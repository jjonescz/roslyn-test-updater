Index: OverloadResolutionTests.cs
===================================================================
--- OverloadResolutionTests.cs
+++ OverloadResolutionTests.cs
@@ -154,20 +154,20 @@
   }
 }";
 
             CreateCompilation(source2).VerifyDiagnostics(
-// (18,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M(string, System.Action<string>)' and 'P.M(object, System.Action<object>)'
+// (18,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M(string x, Action<string> a)' and 'P.M(object x, Action<object> a)'
 //     M((string)null, null);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("P.M(string, System.Action<string>)", "P.M(object, System.Action<object>)"),
-// (19,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(string, System.Func<object>)' and 'P.M1(object, System.Func<System.ValueType>)'
+Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("P.M(string x, System.Action<string> a)", "P.M(object x, System.Action<object> a)").WithLocation(18, 5),
+// (19,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(string x, Func<object> a)' and 'P.M1(object x, Func<ValueType> a)'
 //     M1((string)null, ()=>{ return 5;});
-Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(string, System.Func<object>)", "P.M1(object, System.Func<System.ValueType>)"),
-// (20,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M4(System.Func<object>, System.Action<object>, System.Action<string>)' and 'P.M4(System.Func<System.ValueType>, System.Action<string>, System.Action<object>)'
+Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(string x, System.Func<object> a)", "P.M1(object x, System.Func<System.ValueType> a)").WithLocation(19, 5),
+// (20,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M4(Func<object> a, Action<object> b, Action<string> x)' and 'P.M4(Func<ValueType> a, Action<string> b, Action<object> x)'
 //     M4(()=>{ throw new NotImplementedException();}, q=> {}, q=> {});
-Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("P.M4(System.Func<object>, System.Action<object>, System.Action<string>)", "P.M4(System.Func<System.ValueType>, System.Action<string>, System.Action<object>)"),
-// (21,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M6(System.Action<object>, string, object)' and 'P.M6(System.Action<string>, object, string)'
+Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("P.M4(System.Func<object> a, System.Action<object> b, System.Action<string> x)", "P.M4(System.Func<System.ValueType> a, System.Action<string> b, System.Action<object> x)").WithLocation(20, 5),
+// (21,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M6(Action<object> b, string x, object a)' and 'P.M6(Action<string> b, object x, string a)'
 //     M6(q=> {},(string)null, (string)null);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("P.M6(System.Action<object>, string, object)", "P.M6(System.Action<string>, object, string)")
+Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("P.M6(System.Action<object> b, string x, object a)", "P.M6(System.Action<string> b, object x, string a)").WithLocation(21, 5)
                 );
 
             // By comparing these two programs, it becomes clear how unfortunate this is. M(q=>null) is ambiguous,
             // M(null) is unambiguous. But M((string)null, q=>{}) is unambiguous, M((string)null, null) is ambiguous!
@@ -302,17 +302,17 @@
   }
 }";
 
             CreateCompilation(source2).VerifyDiagnostics(
-// (16,8): error CS1503: Argument 1: cannot convert from 'int?' to 'int'
+// (16,8): error CS1503: Argument 1: cannot convert from 'int?' to 'int a'
 //     M1(ni);
-Diagnostic(ErrorCode.ERR_BadArgType, "ni").WithArguments("1", "int?", "int"),
-// (17,8): error CS1503: Argument 1: cannot convert from 'short?' to 'int'
+Diagnostic(ErrorCode.ERR_BadArgType, "ni").WithArguments("1", "int?", "int a").WithLocation(16, 8),
+// (17,8): error CS1503: Argument 1: cannot convert from 'short?' to 'int a'
 //     M1(ns);
-Diagnostic(ErrorCode.ERR_BadArgType, "ns").WithArguments("1", "short?", "int"),
-// (19,8): error CS1503: Argument 1: cannot convert from 'uint?' to 'int?'
+Diagnostic(ErrorCode.ERR_BadArgType, "ns").WithArguments("1", "short?", "int a").WithLocation(17, 8),
+// (18,8): error CS1503: Argument 1: cannot convert from 'uint?' to 'int? a'
 //     M2(nu);
-Diagnostic(ErrorCode.ERR_BadArgType, "nu").WithArguments("1", "uint?", "int?")
+Diagnostic(ErrorCode.ERR_BadArgType, "nu").WithArguments("1", "uint?", "int? a").WithLocation(18, 8)
                 );
         }
 
 
@@ -336,11 +336,11 @@
   }
 }";
 
             CreateCompilation(source2).VerifyDiagnostics(
-// (14,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(P.DA)' and 'P.M1(P.DB)'
+// (14,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(P.DA a)' and 'P.M1(P.DB a)'
 //     M1(() => x);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA)", "P.M1(P.DB)")
+Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA a)", "P.M1(P.DB a)").WithLocation(14, 5)
                 );
         }
 
         [Fact]
@@ -387,11 +387,11 @@
             CompileAndVerify(source2, parseOptions: TestOptions.Regular9, expectedOutput: @"2");
 
             var comp = CreateCompilation(source2);
             comp.VerifyDiagnostics(
-                // (15,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(P.DA, object)' and 'P.M1(P.DB, int)'
+                // (15,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(P.DA a, object b)' and 'P.M1(P.DB a, int b)'
                 //     M1(() => () => i, i);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA, object)", "P.M1(P.DB, int)").WithLocation(15, 5));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA a, object b)", "P.M1(P.DB a, int b)").WithLocation(15, 5));
         }
 
         [Fact]
         public void ParametersImplicitlyConvertibleToEachOther()
@@ -435,11 +435,11 @@
   }
 }";
 
             CreateCompilation(source1).VerifyDiagnostics(
-// (36,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(CA)' and 'P.M1(CB)'
+// (36,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(CA a)' and 'P.M1(CB a)'
 //     M1(i);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(CA)", "P.M1(CB)")
+Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(CA a)", "P.M1(CB a)").WithLocation(36, 5)
                 );
         }
 
         [Fact]
@@ -475,11 +475,11 @@
   }
 }";
 
             CreateCompilation(source2).VerifyDiagnostics(
-// (11,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(System.Threading.Tasks.Task<int>, uint)' and 'P.M1(System.Threading.Tasks.Task<uint>, int)'
+// (11,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(Task<int> a, uint b)' and 'P.M1(Task<uint> a, int b)'
 //     M1(null,0);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Threading.Tasks.Task<int>, uint)", "P.M1(System.Threading.Tasks.Task<uint>, int)")
+Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Threading.Tasks.Task<int> a, uint b)", "P.M1(System.Threading.Tasks.Task<uint> a, int b)").WithLocation(11, 5)
                 );
         }
 
         [Fact]
@@ -514,11 +514,11 @@
 
 namespace System.Runtime.CompilerServices { class AsyncMethodBuilderAttribute : System.Attribute { public AsyncMethodBuilderAttribute(System.Type t) { } } }
 ";
             CreateCompilationWithMscorlib45(source1).VerifyDiagnostics(
-                // (9,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.h<T>(Func<Task<T>>)' and 'C.h<T>(Func<MyTask<T>>)'
+                // (9,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.h<T>(Func<Task<T>> lambda)' and 'C.h<T>(Func<MyTask<T>> lambda)'
                 //         h(async () => { await (Task)null; return 1; });
-                Diagnostic(ErrorCode.ERR_AmbigCall, "h").WithArguments("C.h<T>(System.Func<System.Threading.Tasks.Task<T>>)", "C.h<T>(System.Func<MyTask<T>>)").WithLocation(9, 9)
+                Diagnostic(ErrorCode.ERR_AmbigCall, "h").WithArguments("C.h<T>(System.Func<System.Threading.Tasks.Task<T>> lambda)", "C.h<T>(System.Func<MyTask<T>> lambda)").WithLocation(9, 9)
                 );
 
             string source2 = @"
 using System;
@@ -1165,14 +1165,14 @@
   }
 }";
 
             CreateCompilation(source2).VerifyDiagnostics(
-// (13,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(System.Func<int>, uint)' and 'P.M1(System.Func<uint>, int)'
+// (13,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(Func<int> a, uint b)' and 'P.M1(Func<uint> a, int b)'
 //     M1(null,0);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Func<int>, uint)", "P.M1(System.Func<uint>, int)"),
-// (14,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M2(System.Func<int>, uint)' and 'P.M2(System.Action, int)'
+Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Func<int> a, uint b)", "P.M1(System.Func<uint> a, int b)").WithLocation(13, 5),
+// (14,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M2(Func<int> a, uint b)' and 'P.M2(Action a, int b)'
 //     M2(null,0);
-Diagnostic(ErrorCode.ERR_AmbigCall, "M2").WithArguments("P.M2(System.Func<int>, uint)", "P.M2(System.Action, int)")
+Diagnostic(ErrorCode.ERR_AmbigCall, "M2").WithArguments("P.M2(System.Func<int> a, uint b)", "P.M2(System.Action a, int b)").WithLocation(14, 5)
                 );
         }
 
         [Fact, WorkItem(6560, "https://github.com/dotnet/roslyn/issues/6560")]
@@ -1246,11 +1246,11 @@
         J(123.0, 456.0m);
     }
 }";
             CreateCompilation(source).VerifyDiagnostics(
-                // (8,9): error CS0411: The type arguments for method 'C.J<T>(T, T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (8,9): error CS0411: The type arguments for method 'C.J<T>(T t1, T t2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         J(123.0, 456.0m);
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "J").WithArguments("C.J<T>(T, T)").WithLocation(8, 9));
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "J").WithArguments("C.J<T>(T t1, T t2)").WithLocation(8, 9));
         }
 
         [Fact]
         public void TestLambdaErrorReporting()
@@ -1344,20 +1344,20 @@
     }
 }";
 
             CreateCompilationWithMscorlib40AndSystemCore(source).VerifyDiagnostics(
-                // (14,21): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'ref Func<string, string>'
+                // (14,21): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'ref Func<string, string> a'
                 //         Goo<string>(x => x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Func<string, string>").WithLocation(14, 21),
-                // (15,21): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'out Func<string, string>'
+                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Func<string, string> a").WithLocation(14, 21),
+                // (15,21): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'out Func<string, string> a'
                 //         Bar<string>(x => x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Func<string, string>").WithLocation(15, 21),
-                // (16,22): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'ref Expression<Func<string, string>>'
+                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Func<string, string> a").WithLocation(15, 21),
+                // (16,22): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'ref Expression<Func<string, string>> a'
                 //         Goo2<string>(x => x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Linq.Expressions.Expression<System.Func<string, string>>").WithLocation(16, 22),
-                // (17,22): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'out Expression<Func<string, string>>'
+                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Linq.Expressions.Expression<System.Func<string, string>> a").WithLocation(16, 22),
+                // (17,22): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'out Expression<Func<string, string>> a'
                 //         Bar2<string>(x => x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Linq.Expressions.Expression<System.Func<string, string>>").WithLocation(17, 22));
+                Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Linq.Expressions.Expression<System.Func<string, string>> a").WithLocation(17, 22));
         }
 
         [Fact, WorkItem(1157097, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/1157097"), WorkItem(2298, "https://github.com/dotnet/roslyn/issues/2298")]
         public void TestOverloadResolutionTiebreaker()
@@ -1377,11 +1377,11 @@
 
             var compilation = CreateCompilation(source, options: TestOptions.DebugDll);
 
             compilation.VerifyDiagnostics(
-    // (9,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.X(params string[])' and 'C.X<T>(T)'
+    // (9,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.X(params string[] s)' and 'C.X<T>(T t)'
     //         X((string)null); //-C.X(string, object)
-    Diagnostic(ErrorCode.ERR_AmbigCall, "X").WithArguments("C.X(params string[])", "C.X<T>(T)").WithLocation(9, 9)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "X").WithArguments("C.X(params string[] s)", "C.X<T>(T t)").WithLocation(9, 9)
                 );
         }
 
         [Fact]
@@ -1470,26 +1470,26 @@
             CreateCompilation(source, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(
                 // (67,36): error CS0453: The type 'Y' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'C.N<T>'
                 //     static void Test5<Y>(Y y, N<Y> ny) { }
                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "ny").WithArguments("C.N<T>", "T", "Y").WithLocation(67, 36),
-                // (17,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'U' in the generic type or method 'C.Test1<U>(U, C.N<U>)'
+                // (17,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'U' in the generic type or method 'C.Test1<U>(U u, C.N<U> nu)'
                 //         Test1<string>(s, null);
-                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test1<string>").WithArguments("C.Test1<U>(U, C.N<U>)", "U", "string").WithLocation(17, 9),
-                // (21,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'V' in the generic type or method 'C.Test2<V>(V, C.N<V>)'
+                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test1<string>").WithArguments("C.Test1<U>(U u, C.N<U> nu)", "U", "string").WithLocation(17, 9),
+                // (21,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'V' in the generic type or method 'C.Test2<V>(V v, C.N<V> nv)'
                 //         Test2(s, null);
-                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test2").WithArguments("C.Test2<V>(V, C.N<V>)", "V", "string").WithLocation(21, 9),
-                // (36,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'X' in the generic type or method 'C.Test4<X>(X)'
+                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test2").WithArguments("C.Test2<V>(V v, C.N<V> nv)", "V", "string").WithLocation(21, 9),
+                // (36,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'X' in the generic type or method 'C.Test4<X>(X x)'
                 //         Test4(s);
-                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test4").WithArguments("C.Test4<X>(X)", "X", "string").WithLocation(36, 9),
+                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test4").WithArguments("C.Test4<X>(X x)", "X", "string").WithLocation(36, 9),
                 // (47,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'C.N<T>'
                 //         Test5(s, null);
                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test5").WithArguments("C.N<T>", "T", "string").WithLocation(47, 9),
                 // (58,17): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'S' in the generic type or method 'C.L<S>'
                 //         Test6<L<string>>(null);
                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "string").WithArguments("C.L<S>", "S", "string").WithLocation(58, 17),
                 // (58,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'S' in the generic type or method 'C.L<S>'
                 //         Test6<L<string>>(null);
-                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test6<L<string>>").WithArguments("C.L<S>", "S", "string").WithLocation(58, 9));
+                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test6<L<string>>").WithArguments("C.L<S>", "S", "string").WithLocation(58, 9));
 
             CreateCompilation(source).VerifyDiagnostics(
                 // (67,36): error CS0453: The type 'Y' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'C.N<T>'
                 //     static void Test5<Y>(Y y, N<Y> ny) { }
@@ -1524,11 +1524,11 @@
     }
     static void Goo<T>(params T[] x) { }
 }";
             CreateCompilation(source).VerifyDiagnostics(
-                // (6,9): error CS0411: The type arguments for method 'C.Goo<T>(params T[])' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (6,9): error CS0411: The type arguments for method 'C.Goo<T>(params T[] x)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         Goo();
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Goo").WithArguments("C.Goo<T>(params T[])").WithLocation(6, 9));
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Goo").WithArguments("C.Goo<T>(params T[] x)").WithLocation(6, 9));
         }
 
         [Fact]
         public void TestMoreOverloadResolutionErrors()
@@ -1546,11 +1546,11 @@
             CreateCompilation(source).VerifyDiagnostics(
                 // (7,22): error CS1729: 'byte' does not contain a constructor that takes 1 arguments
                 //         byte b = new byte(1);
                 Diagnostic(ErrorCode.ERR_BadCtorArgCount, "byte").WithArguments("byte", "1").WithLocation(7, 22),
-                // (8,34): error CS1503: Argument 1: cannot convert from 'void' to 'bool'
+                // (8,34): error CS1503: Argument 1: cannot convert from 'void' to 'bool value'
                 //         System.Console.WriteLine(VoidReturning());
-                Diagnostic(ErrorCode.ERR_BadArgType, "VoidReturning()").WithArguments("1", "void", "bool").WithLocation(8, 34));
+                Diagnostic(ErrorCode.ERR_BadArgType, "VoidReturning()").WithArguments("1", "void", "bool value").WithLocation(8, 34));
         }
 
         [Fact]
         public void TestBug6156()
@@ -1852,12 +1852,14 @@
         b.Method2(d, d, d, d, d); // Should report error - No overload for Method2 takes 5 arguments
     }
 }";
             CreateCompilation(source).VerifyDiagnostics(
-                // (10,15): error CS0466: 'Derived.Base.Method2(Derived, Derived, params Derived[])' should not have a params parameter since 'Base.Method2(Derived, Derived, Derived[])' does not
-                Diagnostic(ErrorCode.ERR_ExplicitImplParams, "Method2").WithArguments("Derived.Base.Method2(Derived, Derived, params Derived[])", "Base.Method2(Derived, Derived, Derived[])"),
-                // (19,9): error CS1501: No overload for method 'Method2' takes 5 arguments
-                Diagnostic(ErrorCode.ERR_BadArgCount, "Method2").WithArguments("Method2", "5"));
+                // (10,15): error CS0466: 'Derived.Base.Method2(Derived C1, Derived C2, params Derived[] C3)' should not have a params parameter since 'Base.Method2(Derived c1, Derived c2, Derived[] c3)' does not
+                //     void Base.Method2(Derived C1, Derived C2, params Derived[] C3) { } //adds 'params' - CS0466
+                Diagnostic(ErrorCode.ERR_ExplicitImplParams, "Method2").WithArguments("Derived.Base.Method2(Derived C1, Derived C2, params Derived[] C3)", "Base.Method2(Derived c1, Derived c2, Derived[] c3)").WithLocation(10, 15),
+                // (19,11): error CS1501: No overload for method 'Method2' takes 5 arguments
+                //         b.Method2(d, d, d, d, d); // Should report error - No overload for Method2 takes 5 arguments
+                Diagnostic(ErrorCode.ERR_BadArgCount, "Method2").WithArguments("Method2", "5").WithLocation(19, 11));
         }
 
         [WorkItem(540153, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/540153")]
         [WorkItem(540406, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/540406")]
@@ -2003,11 +2005,17 @@
     }
 }";
 
             CreateCompilation(source).VerifyDiagnostics(
-                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A, B)"),
-                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base3<U, V>.Method(U, V)"),
-                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Property").WithArguments("Base3<U, V>.Property"));
+                // (16,9): error CS0205: Cannot call an abstract base member: 'Base<A, B>.Method(A i, B j)'
+                //         base.Method(a, b); // Error - Cannot call abstract base member
+                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A i, B j)").WithLocation(16, 9),
+                // (30,9): error CS0205: Cannot call an abstract base member: 'Base3<U, V>.Method(U x, V y)'
+                //         base.Method(x, y); // Error - Cannot call abstract base member
+                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base3<U, V>.Method(U x, V y)").WithLocation(30, 9),
+                // (37,13): error CS0205: Cannot call an abstract base member: 'Base3<U, V>.Property'
+                //             base.Property = f; // Error - Cannot call abstract base member
+                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Property").WithArguments("Base3<U, V>.Property").WithLocation(37, 13));
         }
 
         [WorkItem(6353, "DevDiv_Projects/Roslyn")]
         [Fact()]
@@ -2032,9 +2040,11 @@
     }
 }";
 
             CreateCompilation(source).VerifyDiagnostics(
-                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A, B)"));
+                // (12,26): error CS0205: Cannot call an abstract base member: 'Base<A, B>.Method(A i, B j)'
+                //         Action<A, B> m = base.Method; // Error - Cannot call abstract base member
+                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A i, B j)").WithLocation(12, 26));
         }
 
         [WorkItem(6353, "DevDiv_Projects/Roslyn")]
         [Fact()]
@@ -2077,9 +2087,11 @@
 }
 ";
 
             CreateCompilation(source).VerifyDiagnostics(
-                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("A.Base2<long>.Method(long)"));
+                // (17,46): error CS0205: Cannot call an abstract base member: 'Base2<long>.Method(long x)'
+                //         public override long Method(int x) { base.Method(x); return 1; }
+                Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("A.Base2<long>.Method(long x)").WithLocation(17, 46));
         }
 
         [Fact]
         public void Bug8766_ConstructorOverloadResolution_PrivateCtor()
@@ -2779,11 +2791,11 @@
    }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (13,16): error CS0423: Since 'Ref1Impl' has the ComImport attribute, 'Ref1Impl.M(ref int, int)' must be extern or abstract
+                // (13,16): error CS0423: Since 'Ref1Impl' has the ComImport attribute, 'Ref1Impl.M(ref int x, int y)' must be extern or abstract
                 //     public int M(ref int x, int y) { return x + y; }
-                Diagnostic(ErrorCode.ERR_ComImportWithImpl, "M").WithArguments("Ref1Impl.M(ref int, int)", "Ref1Impl").WithLocation(13, 16));
+                Diagnostic(ErrorCode.ERR_ComImportWithImpl, "M").WithArguments("Ref1Impl.M(ref int x, int y)", "Ref1Impl").WithLocation(13, 16));
         }
 
         [Fact]
         public void RefOmittedComCall_Error_NonComImportType()
@@ -3057,35 +3069,35 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
+                // (36,24): warning CS0626: Method, operator, or accessor 'H.M(ref short p)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
+                //     extern public void M(ref short p);
+                Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("H.M(ref short p)").WithLocation(36, 24),
+                // (59,24): warning CS0626: Method, operator, or accessor 'J.M(ref short p)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
+                //     extern public void M(ref short p);
+                Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(ref short p)").WithLocation(59, 24),
+                // (58,24): warning CS0626: Method, operator, or accessor 'J.M(sbyte p)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
+                //     extern public void M(sbyte p);
+                Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(sbyte p)").WithLocation(58, 24),
                 // (12,6): error CS0601: The DllImport attribute must be specified on a method marked 'static' and 'extern'
                 //     [DllImport("goo")]
-                Diagnostic(ErrorCode.ERR_DllImportOnInvalidMethod, "DllImport"),
-                // (20,19): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte'
+                Diagnostic(ErrorCode.ERR_DllImportOnInvalidMethod, "DllImport").WithLocation(12, 6),
+                // (20,19): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte p'
                 //         new F().M(x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte"),
-                // (36,24): warning CS0626: Method, operator, or accessor 'H.M(ref short)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
-                //     extern public void M(ref short p);
-                Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("H.M(ref short)"),
+                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(20, 19),
                 // (43,19): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //         new H().M(x);
-                Diagnostic(ErrorCode.ERR_BadArgRef, "x").WithArguments("1", "ref"),
-                // (46,13): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "x").WithArguments("1", "ref").WithLocation(43, 19),
+                // (46,13): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte p'
                 //         g.M(x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte"),
-                // (58,24): warning CS0626: Method, operator, or accessor 'J.M(sbyte)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
-                //     extern public void M(sbyte p);
-                Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(sbyte)"),
-                // (59,24): warning CS0626: Method, operator, or accessor 'J.M(ref short)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
-                //     extern public void M(ref short p);
-                Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(ref short)"),
-                // (66,19): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte'
+                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(46, 13),
+                // (66,19): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte p'
                 //         new J().M(x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte"),
-                // (69,11): error CS1061: 'I' does not contain a definition for 'M' and no extension method 'M' accepting a first argument of type 'I' could be found (are you missing a using directive or an assembly reference?)
+                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(66, 19),
+                // (69,11): error CS1061: 'I' does not contain a definition for 'M' and no accessible extension method 'M' accepting a first argument of type 'I' could be found (are you missing a using directive or an assembly reference?)
                 //         i.M(x);
-                Diagnostic(ErrorCode.ERR_NoSuchMemberOrExtension, "M").WithArguments("I", "M"));
+                Diagnostic(ErrorCode.ERR_NoSuchMemberOrExtension, "M").WithArguments("I", "M").WithLocation(69, 11));
         }
 
         [Fact, WorkItem(546122, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/546122")]
         public void RefOmittedComCall_DerivedComImport()
@@ -3712,92 +3724,92 @@
    }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (79,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                // (79,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M1(10L);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int"),
-                // (80,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int x").WithLocation(79, 16),
+                // (80,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M1(l);        // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (81,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(80, 16),
+                // (81,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref l);    // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (82,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(81, 20),
+                // (82,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref c);    // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (89,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(82, 20),
+                // (89,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref l);    // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (90,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(89, 20),
+                // (90,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref c);    // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (97,16): error CS1503: Argument 1: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(90, 20),
+                // (97,16): error CS1503: Argument 1: cannot convert from 'long' to 'char x'
                 //        ref1.M3(10L);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char"),
-                // (98,16): error CS1503: Argument 1: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char x").WithLocation(97, 16),
+                // (98,16): error CS1503: Argument 1: cannot convert from 'long' to 'char x'
                 //        ref1.M3(l);        // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char"),
-                // (99,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char x").WithLocation(98, 16),
+                // (99,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M3(ref l);    // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (100,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(99, 20),
+                // (100,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M3(ref c);    // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(100, 20),
                 // (107,16): error CS1620: Argument 1 must be passed with the 'out' keyword
                 //        ref1.M4(10L);      // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "10L").WithArguments("1", "out"),
+                Diagnostic(ErrorCode.ERR_BadArgRef, "10L").WithArguments("1", "out").WithLocation(107, 16),
                 // (108,16): error CS1620: Argument 1 must be passed with the 'out' keyword
                 //        ref1.M4(l);        // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out"),
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out").WithLocation(108, 16),
                 // (109,20): error CS1620: Argument 1 must be passed with the 'out' keyword
                 //        ref1.M4(ref l);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out"),
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out").WithLocation(109, 20),
                 // (110,20): error CS1620: Argument 1 must be passed with the 'out' keyword
                 //        ref1.M4(ref c);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "c").WithArguments("1", "out"),
-                // (117,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int)' and 'IRef1.M5(ref long)'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "c").WithArguments("1", "out").WithLocation(110, 20),
+                // (117,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
                 //        ref1.M5(10);       // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
-                // (118,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int)' and 'IRef1.M5(ref long)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(117, 13),
+                // (118,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
                 //        ref1.M5('c');      // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
-                // (119,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int)' and 'IRef1.M5(ref long)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(118, 13),
+                // (119,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
                 //        ref1.M5(i);        // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
-                // (120,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int)' and 'IRef1.M5(ref long)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(119, 13),
+                // (120,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
                 //        ref1.M5(c);        // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
-                // (121,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(120, 13),
+                // (121,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
                 //        ref1.M5(ref c);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
-                // (128,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref char)' and 'IRef1.M6(ref long)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(121, 20),
+                // (128,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref char x)' and 'IRef1.M6(ref long x)'
                 //        ref1.M6('c');      // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char)", "IRef1.M6(ref long)"),
-                // (129,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref char)' and 'IRef1.M6(ref long)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char x)", "IRef1.M6(ref long x)").WithLocation(128, 13),
+                // (129,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref char x)' and 'IRef1.M6(ref long x)'
                 //        ref1.M6(c);        // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char)", "IRef1.M6(ref long)"),
-                // (130,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref char'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char x)", "IRef1.M6(ref long x)").WithLocation(129, 13),
+                // (130,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref char x'
                 //        ref1.M6(ref i);    // CS1503   
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char"),
-                // (137,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char x").WithLocation(130, 20),
+                // (137,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long x'
                 //        ref1.M7(ref i);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (138,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(137, 20),
+                // (138,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long x'
                 //        ref1.M7(ref c);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (145,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long x").WithLocation(138, 20),
+                // (145,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long x'
                 //        ref1.M8(ref i);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (146,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(145, 20),
+                // (146,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long x'
                 //        ref1.M8(ref c);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (153,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long x").WithLocation(146, 20),
+                // (153,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref char x'
                 //        ref1.M9(ref i);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char"),
-                // (154,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char x").WithLocation(153, 20),
+                // (154,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref char x'
                 //        ref1.M9(ref l);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref char"));
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref char x").WithLocation(154, 20));
         }
 
         [Fact, WorkItem(546176, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/546176")]
         public void RefOmittedComCall_OverloadResolution_SingleArgument_IndexedProperties()
@@ -5120,152 +5132,152 @@
    }
 }
 ";
             CreateCompilationWithILAndMscorlib40(source2, source1).VerifyDiagnostics(
-                // (15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                // (15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
                 //        value = a.P1[10L];         // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int"),
-                // (16,13): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int i").WithLocation(15, 21),
+                // (16,13): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
                 //        a.P1[10L] = value;         // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int"),
-                // (17,21): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int i").WithLocation(16, 13),
+                // (17,21): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
                 //        value = a.P1[l];           // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (18,13): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int i").WithLocation(17, 21),
+                // (18,13): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
                 //        a.P1[l] = value;           // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (19,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int i").WithLocation(18, 13),
+                // (19,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P1[ref l];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (20,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(19, 25),
+                // (20,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P1[ref l] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (21,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(20, 17),
+                // (21,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P1[ref c];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (22,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(21, 25),
+                // (22,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P1[ref c] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (27,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(22, 17),
+                // (27,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P2[ref l];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (28,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(27, 25),
+                // (28,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P2[ref l] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (29,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(28, 17),
+                // (29,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P2[ref c];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (30,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(29, 25),
+                // (30,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P2[ref c] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (35,21): error CS1503: Argument 1: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(30, 17),
+                // (35,21): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
                 //        value = a.P3[10L];         // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char"),
-                // (36,13): error CS1503: Argument 1: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char i").WithLocation(35, 21),
+                // (36,13): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
                 //        a.P3[10L] = value;         // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char"),
-                // (37,21): error CS1503: Argument 1: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char i").WithLocation(36, 13),
+                // (37,21): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
                 //        value = a.P3[l];           // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char"),
-                // (38,13): error CS1503: Argument 1: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char i").WithLocation(37, 21),
+                // (38,13): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
                 //        a.P3[l] = value;           // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char"),
-                // (39,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char i").WithLocation(38, 13),
+                // (39,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P3[ref l];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (40,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(39, 25),
+                // (40,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P3[ref l] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (41,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(40, 17),
+                // (41,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P3[ref c];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (42,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(41, 25),
+                // (42,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P3[ref c] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (47,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(42, 17),
+                // (47,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        value = a.P4[10];          // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (58,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(47, 16),
+                // (48,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        a.P4[10] = value;          // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (49,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(48, 8),
+                // (49,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        value = a.P4['c'];         // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (50,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(49, 16),
+                // (50,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        a.P4['c'] = value;         // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (51,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(50, 8),
+                // (51,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        value = a.P4[i];           // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (52,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(51, 16),
+                // (52,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        a.P4[i] = value;           // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (53,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(52, 8),
+                // (53,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        value = a.P4[c];           // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (54,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long]' and 'IA.P4[ref int]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(53, 16),
+                // (54,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
                 //        a.P4[c] = value;           // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
-                // (55,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(54, 8),
+                // (55,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
                 //        value = a.P4[ref c];       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (56,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(55, 25),
+                // (56,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
                 //        a.P4[ref c] = value;       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (61,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long]' and 'IA.P5[ref char]'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(56, 17),
+                // (61,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
                 //        value = a.P5['c'];         // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
-                // (62,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long]' and 'IA.P5[ref char]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(61, 16),
+                // (62,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
                 //        a.P5['c'] = value;         // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
-                // (63,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long]' and 'IA.P5[ref char]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(62, 8),
+                // (63,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
                 //        value = a.P5[c];           // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
-                // (64,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long]' and 'IA.P5[ref char]'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(63, 16),
+                // (64,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
                 //        a.P5[c] = value;           // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
-                // (65,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(64, 8),
+                // (65,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
                 //        value = a.P5[ref i];       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (66,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(65, 25),
+                // (66,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
                 //        a.P5[ref i] = value;       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (71,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(66, 17),
+                // (71,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
                 //        value = a.P6[ref i];       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (72,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(71, 25),
+                // (72,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
                 //        a.P6[ref i] = value;       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (73,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(72, 17),
+                // (73,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
                 //        value = a.P6[ref c];       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (74,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(73, 25),
+                // (74,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
                 //        a.P6[ref c] = value;       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (79,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(74, 17),
+                // (79,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
                 //        value = a.P7[ref i];       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (80,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(79, 25),
+                // (80,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
                 //        a.P7[ref i] = value;       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (81,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(80, 17),
+                // (81,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
                 //        value = a.P7[ref c];       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (82,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(81, 25),
+                // (82,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
                 //        a.P7[ref c] = value;       // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
-                // (87,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(82, 17),
+                // (87,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P8[ref i];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (88,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(87, 25),
+                // (88,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P8[ref i] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (89,25): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(88, 17),
+                // (89,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        value = a.P8[ref l];       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (90,17): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(89, 25),
+                // (90,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        a.P8[ref l] = value;       // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"));
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(90, 17));
         }
 
         [Fact]
         public void RefOmittedComCall_OverloadResolution_MultipleArguments()
@@ -5906,350 +5918,350 @@
    }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (80,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                // (80,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M1(l, i);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (81,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(80, 16),
+                // (81,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M1(l, l);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (82,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(81, 16),
+                // (82,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M1(l, c);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (83,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(82, 16),
+                // (83,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref i, l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (84,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(83, 20),
+                // (84,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref l, i);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (85,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(84, 20),
+                // (85,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref l, l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (86,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(85, 20),
+                // (86,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref l, c);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (87,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(86, 20),
+                // (87,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref c, i);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (88,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(87, 20),
+                // (88,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref c, l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (89,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(88, 20),
+                // (89,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M1(ref c, c);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (96,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(89, 20),
+                // (96,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M2(i, l);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (97,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(96, 19),
+                // (97,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M2(l, i);      // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (97,19): error CS1503: Argument 2: cannot convert from 'int' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(97, 16),
+                // (97,19): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
                 //        ref1.M2(l, i);      // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
-                // (98,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(97, 19),
+                // (98,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M2(l, l);      // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (98,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(98, 16),
+                // (98,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M2(l, l);      // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (99,16): error CS1503: Argument 1: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(98, 19),
+                // (99,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
                 //        ref1.M2(l, c);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
-                // (100,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(99, 16),
+                // (100,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M2(c, l);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (101,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(100, 19),
+                // (101,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref i, l);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (101,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(101, 20),
+                // (101,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M2(ref i, l);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (102,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(101, 23),
+                // (102,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref l, i);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (102,23): error CS1503: Argument 2: cannot convert from 'int' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(102, 20),
+                // (102,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
                 //        ref1.M2(ref l, i);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
-                // (103,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(102, 23),
+                // (103,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref l, l);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (103,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(103, 20),
+                // (103,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M2(ref l, l);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (104,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(103, 23),
+                // (104,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref l, c);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (105,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(104, 20),
+                // (105,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref c, i);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (105,23): error CS1503: Argument 2: cannot convert from 'int' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(105, 20),
+                // (105,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
                 //        ref1.M2(ref c, i);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
-                // (106,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(105, 23),
+                // (106,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref c, l);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (106,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(106, 20),
+                // (106,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M2(ref c, l);  // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (107,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(106, 23),
+                // (107,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M2(ref c, c);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
-                // (114,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(107, 20),
+                // (114,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M3(i, l);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(114, 19),
                 // (115,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M3(l, l);      // CS1620, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (115,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(115, 16),
+                // (115,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M3(l, l);      // CS1620, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (116,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(115, 19),
+                // (116,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M3(c, l);      // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (117,23): error CS1503: Argument 2: cannot convert from 'int' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(116, 19),
+                // (117,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
                 //        ref1.M3(ref i, i);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
-                // (118,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(117, 23),
+                // (118,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M3(ref i, l);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (119,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(118, 23),
+                // (119,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int x'
                 //        ref1.M3(ref l, l);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int"),
-                // (119,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(119, 20),
+                // (119,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M3(ref l, l);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (120,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(119, 23),
+                // (120,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
                 //        ref1.M3(ref c, i);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
-                // (120,23): error CS1503: Argument 2: cannot convert from 'int' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(120, 20),
+                // (120,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
                 //        ref1.M3(ref c, i);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
-                // (121,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(120, 23),
+                // (121,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
                 //        ref1.M3(ref c, l);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
-                // (121,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(121, 20),
+                // (121,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M3(ref c, l);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (122,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(121, 23),
+                // (122,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
                 //        ref1.M3(ref c, c);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
-                // (129,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int, long)' and 'IRef1.M4(ref int, ref int)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(122, 20),
+                // (129,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
                 //        ref1.M4(i, i);      // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
-                // (130,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int, long)' and 'IRef1.M4(ref int, ref int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(129, 13),
+                // (130,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
                 //        ref1.M4(i, c);      // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(130, 13),
                 // (131,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M4(l, i);      // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(131, 16),
                 // (132,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M4(l, l);      // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(132, 16),
                 // (133,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M4(l, c);      // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (134,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int, long)' and 'IRef1.M4(ref int, ref int)'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(133, 16),
+                // (134,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
                 //        ref1.M4(c, i);      // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
-                // (135,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int, long)' and 'IRef1.M4(ref int, ref int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(134, 13),
+                // (135,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
                 //        ref1.M4(c, c);      // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(135, 13),
                 // (136,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M4(l, ref i);  // CS1620, CS1615
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (136,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(136, 16),
+                // (136,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M4(l, ref i);  // CS1620, CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref"),
-                // (137,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref").WithLocation(136, 23),
+                // (137,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M4(i, ref l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(137, 23),
                 // (138,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M4(l, ref l);  // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (138,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(138, 16),
+                // (138,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M4(l, ref l);  // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
-                // (139,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(138, 23),
+                // (139,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M4(c, ref l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
-                // (146,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(139, 23),
+                // (146,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M5(i, l);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(146, 19),
                 // (147,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M5(l, l);    // CS1620, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (147,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(147, 16),
+                // (147,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M5(l, l);    // CS1620, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (148,19): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(147, 19),
+                // (148,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M5(c, l);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (149,23): error CS1503: Argument 2: cannot convert from 'int' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(148, 19),
+                // (149,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
                 //        ref1.M5(ref i, i);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
-                // (150,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(149, 23),
+                // (150,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M5(ref i, l);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (151,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(150, 23),
+                // (151,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int x'
                 //        ref1.M5(ref l, l);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int"),
-                // (151,23): error CS1503: Argument 2: cannot convert from 'long' to 'char'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(151, 20),
+                // (151,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
                 //        ref1.M5(ref l, l);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
-                // (158,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int, int)' and 'IRef1.M6(ref long, int)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(151, 23),
+                // (158,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
                 //        ref1.M6(i, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
-                // (159,19): error CS1503: Argument 2: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(158, 13),
+                // (159,19): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
                 //        ref1.M6(i, l);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
-                // (160,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int, int)' and 'IRef1.M6(ref long, int)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(159, 19),
+                // (160,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
                 //        ref1.M6(i, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(160, 13),
                 // (161,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M6(l, l);    // CS1620, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (161,19): error CS1503: Argument 2: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(161, 16),
+                // (161,19): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
                 //        ref1.M6(l, l);    // CS1620, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
-                // (162,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int, int)' and 'IRef1.M6(ref long, int)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(161, 19),
+                // (162,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
                 //        ref1.M6(c, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
-                // (163,19): error CS1503: Argument 2: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(162, 13),
+                // (163,19): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
                 //        ref1.M6(c, l);    // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
-                // (164,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int, int)' and 'IRef1.M6(ref long, int)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(163, 19),
+                // (164,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
                 //        ref1.M6(c, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
-                // (165,23): error CS1503: Argument 2: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(164, 13),
+                // (165,23): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
                 //        ref1.M6(ref i, l);  // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
-                // (166,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(165, 23),
+                // (166,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int x'
                 //        ref1.M6(ref l, l);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int"),
-                // (166,23): error CS1503: Argument 2: cannot convert from 'long' to 'int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(166, 20),
+                // (166,23): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
                 //        ref1.M6(ref l, l);  // CS1503, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
-                // (173,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int, long)' and 'IRef1.M7(ref long, ref int)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(166, 23),
+                // (173,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
                 //        ref1.M7(i, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
-                // (174,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int, long)' and 'IRef1.M7(ref long, ref int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(173, 13),
+                // (174,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
                 //        ref1.M7(i, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(174, 13),
                 // (175,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M7(l, l);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (176,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int, long)' and 'IRef1.M7(ref long, ref int)'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(175, 16),
+                // (176,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
                 //        ref1.M7(c, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
-                // (177,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int, long)' and 'IRef1.M7(ref long, ref int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(176, 13),
+                // (177,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
                 //        ref1.M7(c, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
-                // (178,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(177, 13),
+                // (178,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M7(i, ref l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(178, 23),
                 // (179,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
                 //        ref1.M7(l, ref l);  // CS1620, CS1615
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
-                // (179,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(179, 16),
+                // (179,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M7(l, ref l);  // CS1620, CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
-                // (180,23): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(179, 23),
+                // (180,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M7(c, ref l);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
-                // (181,27): error CS1615: Argument 2 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(180, 23),
+                // (181,27): error CS1615: Argument 2 may not be passed with the 'ref' keyword
                 //        ref1.M7(ref i, ref i);  // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref").WithLocation(181, 27),
                 // (188,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M8(i, l);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
-                // (189,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long, ref int)' and 'IRef1.M8(ref long, int)'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(188, 19),
+                // (189,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long x, ref int y)' and 'IRef1.M8(ref long x, int y)'
                 //        ref1.M8(i, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)"),
-                // (190,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long, ref int)' and 'IRef1.M8(ref long, int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(189, 13),
+                // (190,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long x, ref int y)' and 'IRef1.M8(ref long x, int y)'
                 //        ref1.M8(l, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)"),
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(190, 13),
                 // (191,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M8(l, l);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(191, 19),
                 // (192,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M8(c, l);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
-                // (193,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long, ref int)' and 'IRef1.M8(ref long, int)'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(192, 19),
+                // (193,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long x, ref int y)' and 'IRef1.M8(ref long x, int y)'
                 //        ref1.M8(c, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)"),
-                // (194,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(193, 13),
+                // (194,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M8(i, ref l);   // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
-                // (195,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(194, 23),
+                // (195,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M8(l, ref l);   // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
-                // (196,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(195, 23),
+                // (196,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M8(c, ref l);   // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
-                // (197,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(196, 23),
+                // (197,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref i, i);   // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (198,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(197, 20),
+                // (198,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref i, l);   // CS1615, CS1620
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(198, 20),
                 // (198,23): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M8(ref i, l);   // CS1615, CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
-                // (199,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(198, 23),
+                // (199,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref i, c);   // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (200,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(199, 20),
+                // (200,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref l, l);   // CS1615, CS1620
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(200, 20),
                 // (200,23): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M8(ref l, l);   // CS1615, CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
-                // (201,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(200, 23),
+                // (201,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref i, ref i);   // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (202,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(201, 20),
+                // (202,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref i, ref l);   // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
-                // (202,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(202, 20),
+                // (202,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M8(ref i, ref l);   // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
-                // (203,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(202, 27),
+                // (203,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref l, ref i);   // CS1615
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (204,20): error CS1615: Argument 1 should not be passed with the 'ref' keyword
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(203, 20),
+                // (204,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
                 //        ref1.M8(ref l, ref l);   // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
-                // (204,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(204, 20),
+                // (204,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M8(ref l, ref l);   // CS1615, CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
-                // (211,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long, ref int)' and 'IRef1.M9(ref int, ref long)'
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(204, 27),
+                // (211,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
                 //        ref1.M9(i, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
-                // (212,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long, ref int)' and 'IRef1.M9(ref int, ref long)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(211, 13),
+                // (212,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
                 //        ref1.M9(i, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(212, 13),
                 // (213,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M9(l, l);    // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
-                // (214,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long, ref int)' and 'IRef1.M9(ref int, ref long)'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(213, 19),
+                // (214,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
                 //        ref1.M9(c, i);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
-                // (215,8): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long, ref int)' and 'IRef1.M9(ref int, ref long)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(214, 13),
+                // (215,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
                 //        ref1.M9(c, c);    // CS0121
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
-                // (216,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(215, 13),
+                // (216,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M9(l, ref l);   // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(216, 23),
                 // (217,23): error CS1620: Argument 2 must be passed with the 'ref' keyword
                 //        ref1.M9(ref l, l);   // CS1620
-                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
-                // (218,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long'
+                Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(217, 23),
+                // (218,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long x'
                 //        ref1.M9(ref i, ref i);   // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
-                // (219,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int'
+                Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(218, 20),
+                // (219,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
                 //        ref1.M9(ref l, ref l);   // CS1503
-                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"));
+                Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(219, 27));
         }
 
         [Fact]
         public void FailedToConvertToParameterArrayElementType()
@@ -6372,35 +6384,32 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (43,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (42,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(null); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-                // (44,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(42, 13),
+                // (43,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(a); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-                // (45,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(43, 13),
+                // (44,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(i); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-                // (46,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(44, 13),
+                // (45,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(g1a); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-                // (47,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(45, 13),
+                // (46,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(g11b); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-                // (48,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(46, 13),
+                // (47,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(g111c); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-
-                // NOTE: Dev10 reports "AggTest.B1.M3<S,T>(G2<G1<S>,T>)" for the last two, but this seems just as good (type inference fails for both).
-
-                // (50,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(47, 13),
+                // (49,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(g2ab); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
-                // (55,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>>)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(49, 13),
+                // (54,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //             M3(g2a2bc); // Can't infer
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"));
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(54, 13));
         }
 
         [WorkItem(528425, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/528425")]
         [WorkItem(528425, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/528425")]
@@ -6486,14 +6495,14 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-    // (6,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.overload1(byte, goo)' and 'Ambig.overload1(int, baz)'
+    // (6,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.overload1(byte b, goo f)' and 'Ambig.overload1(int b, baz f)'
     //         overload1(1, 1);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "overload1").WithArguments("Ambig.overload1(byte, goo)", "Ambig.overload1(int, baz)").WithLocation(6, 9),
-    // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.overload2(int, baz)' and 'Ambig.overload2(byte, goo)'
+    Diagnostic(ErrorCode.ERR_AmbigCall, "overload1").WithArguments("Ambig.overload1(byte b, goo f)", "Ambig.overload1(int b, baz f)").WithLocation(6, 9),
+    // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.overload2(int b, baz f)' and 'Ambig.overload2(byte b, goo f)'
     //         overload2(1, 1);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "overload2").WithArguments("Ambig.overload2(int, baz)", "Ambig.overload2(byte, goo)").WithLocation(7, 9)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "overload2").WithArguments("Ambig.overload2(int b, baz f)", "Ambig.overload2(byte b, goo f)").WithLocation(7, 9)
                 );
         }
 
         [WorkItem(545382, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/545382")]
@@ -6564,11 +6573,11 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (6,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.F(P1)' and 'Ambig.F(P2)'
+                // (6,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.F(P1 p)' and 'Ambig.F(P2 p)'
                 //         F(new Q());
-                Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("Ambig.F(P1)", "Ambig.F(P2)"));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("Ambig.F(P1 p)", "Ambig.F(P2 p)").WithLocation(6, 9));
         }
 
         [WorkItem(545467, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/545467")]
         [Fact]
@@ -6883,11 +6892,11 @@
 	}
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (4,20): error CS0115: 'C.Override<T>(T)': no suitable method found to override
-                //     public override T Override<T>(T t) 
-                Diagnostic(ErrorCode.ERR_OverrideNotExpected, "Override").WithArguments("C.Override<T>(T)"));
+                // (4,20): error CS0115: 'C.Override<T>(T t)': no suitable method found to override
+                // 	public override T Override<T>(T t) 
+                Diagnostic(ErrorCode.ERR_OverrideNotExpected, "Override").WithArguments("C.Override<T>(T t)").WithLocation(4, 20));
         }
 
         [WorkItem(547186, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/547186")]
         [Fact, WorkItem(531613, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/531613")]
@@ -6916,21 +6925,21 @@
             // Doesn't assert.
             CreateCompilation(source).VerifyDiagnostics(
                 // (18,41): error CS1514: { expected
                 //     public override int this[string arg]
-                Diagnostic(ErrorCode.ERR_LbraceExpected, ""),
+                Diagnostic(ErrorCode.ERR_LbraceExpected, "").WithLocation(18, 41),
                 // (18,41): error CS1513: } expected
                 //     public override int this[string arg]
-                Diagnostic(ErrorCode.ERR_RbraceExpected, ""),
+                Diagnostic(ErrorCode.ERR_RbraceExpected, "").WithLocation(18, 41),
                 // (18,41): error CS1513: } expected
                 //     public override int this[string arg]
-                Diagnostic(ErrorCode.ERR_RbraceExpected, ""),
-                // (18,25): error CS0548: 'C.this[string]': property or indexer must have at least one accessor
+                Diagnostic(ErrorCode.ERR_RbraceExpected, "").WithLocation(18, 41),
+                // (16,7): error CS0534: 'C' does not implement inherited abstract member 'A.this[string arg].set'
+                // class C : A
+                Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "A.this[string arg].set").WithLocation(16, 7),
+                // (18,25): error CS0548: 'C.this[string arg]': property or indexer must have at least one accessor
                 //     public override int this[string arg]
-                Diagnostic(ErrorCode.ERR_PropertyWithNoAccessors, "this").WithArguments("C.this[string]"),
-                // (16,7): error CS0534: 'C' does not implement inherited abstract member 'A.this[string].set'
-                // class C : A
-                Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "A.this[string].set"));
+                Diagnostic(ErrorCode.ERR_PropertyWithNoAccessors, "this").WithArguments("C.this[string arg]").WithLocation(18, 25));
         }
 
         [Fact]
         public void DynamicVsTypeParameters()
@@ -7081,11 +7090,11 @@
     }
 }";
             // Doesn't assert.
             CreateCompilationWithMscorlib40AndSystemCore(source).VerifyDiagnostics(
-                // (20,16): error CS0121: The call is ambiguous between the following methods or properties: 'Test.Goo(Test.nongenerics, dynamic)' and 'Test.Goo<T>(Test.generics<T>, dynamic)'
+                // (20,16): error CS0121: The call is ambiguous between the following methods or properties: 'Test.Goo(Test.nongenerics Meth, dynamic id)' and 'Test.Goo<T>(Test.generics<T> Meth, dynamic id)'
                 //         return Goo(method, "abc");
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Goo").WithArguments("Test.Goo(Test.nongenerics, dynamic)", "Test.Goo<T>(Test.generics<T>, dynamic)")
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Goo").WithArguments("Test.Goo(Test.nongenerics Meth, dynamic id)", "Test.Goo<T>(Test.generics<T> Meth, dynamic id)").WithLocation(20, 16)
                 );
         }
 
         [WorkItem(662641, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/662641")]
@@ -7188,11 +7197,11 @@
     public static void Add(this IViewable @this, object obj = null) { }
 }
 ";
             CreateCompilationWithMscorlib40AndSystemCore(source).VerifyDiagnostics(
-                // (8,16): warning CS0618: 'Extensions.Add(IViewable2)' is obsolete: 'A'
+                // (8,16): warning CS0618: 'Extensions.Add(IViewable2 @this)' is obsolete: 'A'
                 //         v.View(v.Add);
-                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2)", "A"));
+                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2 @this)", "A").WithLocation(8, 16));
         }
 
         [WorkItem(718294, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/718294")]
         [Fact]
@@ -7227,11 +7236,11 @@
     public static void Add(this IViewable @this, params object[] obj) { }
 }
 ";
             CreateCompilationWithMscorlib40AndSystemCore(source).VerifyDiagnostics(
-                // (8,16): warning CS0618: 'Extensions.Add(IViewable2)' is obsolete: 'A'
+                // (8,16): warning CS0618: 'Extensions.Add(IViewable2 @this)' is obsolete: 'A'
                 //         v.View(v.Add);
-                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2)", "A"));
+                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2 @this)", "A").WithLocation(8, 16));
         }
 
         [WorkItem(709114, "http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/709114")]
         [Fact]
@@ -7554,11 +7563,11 @@
 ";
 
             var comp = CreateCompilation(source);
             comp.VerifyDiagnostics(
-    // (8,46): error CS1503: Argument 1: cannot convert from 'string' to 'int'
+    // (8,46): error CS1503: Argument 1: cannot convert from 'string' to 'int key'
     //         var d = new Dictionary<int, int>() {["aaa"] = 3};
-    Diagnostic(ErrorCode.ERR_BadArgType, @"""aaa""").WithArguments("1", "string", "int").WithLocation(8, 46)
+    Diagnostic(ErrorCode.ERR_BadArgType, @"""aaa""").WithArguments("1", "string", "int key").WithLocation(8, 46)
 );
         }
 
         [Fact]
@@ -7621,11 +7630,11 @@
 
 ";
             var comp = CreateCompilationWithMscorlib40AndSystemCore(source);
             comp.VerifyDiagnostics(
-    // (8,44): error CS0121: The call is ambiguous between the following methods or properties: 'C.M<T>(System.Func<bool, T>)' and 'C.M<T>(System.Func<byte, T>)'
+    // (8,44): error CS0121: The call is ambiguous between the following methods or properties: 'C.M<T>(Func<bool, T> x)' and 'C.M<T>(Func<byte, T> x)'
     //         M(a => M(b => M(c => M(d => M(e => M(f => a))))));
-    Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("C.M<T>(System.Func<bool, T>)", "C.M<T>(System.Func<byte, T>)").WithLocation(8, 44)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("C.M<T>(System.Func<bool, T> x)", "C.M<T>(System.Func<byte, T> x)").WithLocation(8, 44)
                 );
         }
 
         [Fact, WorkItem(30, "https://roslyn.codeplex.com/workitem/30")]
@@ -7835,11 +7844,11 @@
 }
 ";
             var comp = CreateCompilationWithMscorlib40AndSystemCore(source);
             comp.VerifyDiagnostics(
-    // (31,19): error CS0121: The call is ambiguous between the following methods or properties: 'X.Test(int)' and 'X.Test(int)'
+    // (30,19): error CS0121: The call is ambiguous between the following methods or properties: 'A.B.X.Test(int o)' and 'A.C.X.Test(int o)'
     //             if (1.Test() != 1)
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Test").WithArguments("A.B.X.Test(int)", "A.C.X.Test(int)").WithLocation(30, 19)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Test").WithArguments("A.B.X.Test(int o)", "A.C.X.Test(int o)").WithLocation(30, 19)
                 );
 
             Assert.Equal("(30,19): error CS0121: The call is ambiguous between the following methods or properties: 'A.B.X.Test(int)' and 'A.C.X.Test(int)'", DiagnosticFormatter.Instance.Format(comp.GetDiagnostics()[0], EnsureEnglishUICulture.PreferredOrNull));
         }
@@ -7915,11 +7924,11 @@
 }
 ";
 
             CreateCompilation(source1, options: TestOptions.DebugExe, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(
-    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool>)' and 'Program.Bar<T, V>.Create(Func<T, V>, params Func<T, bool>[])'
+    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool> filter)' and 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev, params Func<T, bool>[] filter)'
     //             var x = Bar<Goo, double>.Create(Goo.IsThing);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params System.Func<T, bool>[])").WithLocation(25, 38)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params System.Func<T, bool>[] filter)").WithLocation(25, 38)
                 );
             CreateCompilation(source1, options: TestOptions.DebugExe).VerifyDiagnostics(
                 );
         }
@@ -7995,11 +8004,11 @@
 }
 ";
 
             CreateCompilation(source1, options: TestOptions.DebugExe, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(
-    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool>, params int[])' and 'Program.Bar<T, V>.Create(Func<T, V>)'
+    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool> filter, params int[] dummy)' and 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev)'
     //             var x = Bar<Goo, double>.Create(Goo.IsThing);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>)").WithLocation(25, 38)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] dummy)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev)").WithLocation(25, 38)
                 );
             CreateCompilation(source1, options: TestOptions.DebugExe).VerifyDiagnostics(
                 );
         }
@@ -8037,11 +8046,11 @@
 }
 ";
 
             CreateCompilation(source1, options: TestOptions.DebugExe, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(
-    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, V>)' and 'Program.Bar<T, V>.Create(Func<T, bool>, params int[])'
+    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev)' and 'Program.Bar<T, V>.Create(Func<T, bool> filter, params int[] dummy)'
     //             var x = Bar<Goo, double>.Create(Goo.IsThing);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])").WithLocation(25, 38)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] dummy)").WithLocation(25, 38)
                 );
             CreateCompilation(source1, options: TestOptions.DebugExe).VerifyDiagnostics(
                 );
         }
@@ -8079,11 +8088,11 @@
 }
 ";
 
             CreateCompilation(source1, options: TestOptions.DebugExe, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(
-    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, V>, params Func<T, bool>[])' and 'Program.Bar<T, V>.Create(Func<T, bool>)'
+    // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev, params Func<T, bool>[] filter)' and 'Program.Bar<T, V>.Create(Func<T, bool> filter)'
     //             var x = Bar<Goo, double>.Create(Goo.IsThing);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params System.Func<T, bool>[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>)").WithLocation(25, 38)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params System.Func<T, bool>[] filter)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter)").WithLocation(25, 38)
                 );
             CreateCompilation(source1, options: TestOptions.DebugExe).VerifyDiagnostics(
                 );
         }
@@ -8119,11 +8128,11 @@
 }
 ";
 
             CreateCompilation(source1, options: TestOptions.DebugExe, parseOptions: TestOptions.WithoutImprovedOverloadCandidates).VerifyDiagnostics(
-    // (23,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool>, params int[])' and 'Program.Bar<T, V>.Create(Func<T, V>, params int[])'
+    // (23,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool> filter, params int[] extra)' and 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev, params int[] extra)'
     //             var x = Bar<Goo, double>.Create(Goo.IsThing);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params int[])").WithLocation(23, 38)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] extra)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params int[] extra)").WithLocation(23, 38)
                 );
             CreateCompilation(source1, options: TestOptions.DebugExe).VerifyDiagnostics(
                 );
         }
@@ -8318,11 +8327,11 @@
             comp.VerifyDiagnostics(
                 // (16,35): error CS1001: Identifier expected
                 //     public A(params SecurityAction)
                 Diagnostic(ErrorCode.ERR_IdentifierExpected, ")").WithLocation(16, 35),
-                // (30,22): error CS0231: A params parameter must be the last parameter in a parameter list
-                //     public C(int p1, params SecurityAction p2, string p3)
-                Diagnostic(ErrorCode.ERR_ParamsLast, "params SecurityAction p2").WithLocation(30, 22),
+                // (16,14): error CS0225: The params parameter must be a single dimensional array
+                //     public A(params SecurityAction)
+                Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(16, 14),
                 // (14,14): error CS0534: 'A' does not implement inherited abstract member 'SecurityAttribute.CreatePermission()'
                 // public class A : CodeAccessSecurityAttribute
                 Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "A").WithArguments("A", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(14, 14),
                 // (28,14): error CS0534: 'C' does not implement inherited abstract member 'SecurityAttribute.CreatePermission()'
@@ -8330,32 +8339,32 @@
                 Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(28, 14),
                 // (21,14): error CS0534: 'B' does not implement inherited abstract member 'SecurityAttribute.CreatePermission()'
                 // public class B : CodeAccessSecurityAttribute
                 Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "B").WithArguments("B", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(21, 14),
-                // (16,14): error CS0225: The params parameter must be a single dimensional array
-                //     public A(params SecurityAction)
-                Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(16, 14),
                 // (23,22): error CS0225: The params parameter must be a single dimensional array
                 //     public B(int p1, params SecurityAction p2)
                 Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(23, 22),
                 // (30,22): error CS0225: The params parameter must be a single dimensional array
                 //     public C(int p1, params SecurityAction p2, string p3)
                 Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(30, 22),
+                // (30,22): error CS0231: A params parameter must be the last parameter in a parameter list
+                //     public C(int p1, params SecurityAction p2, string p3)
+                Diagnostic(ErrorCode.ERR_ParamsLast, "params SecurityAction p2").WithLocation(30, 22),
                 // (7,6): error CS7048: First argument to a security attribute must be a valid SecurityAction
                 //     [B(p2: SecurityAction.Assert, p1: 0)]
                 Diagnostic(ErrorCode.ERR_SecurityAttributeMissingAction, "B").WithLocation(7, 6),
                 // (8,6): error CS7048: First argument to a security attribute must be a valid SecurityAction
                 //     [C(p3: "again", p2: SecurityAction.Assert, p1: 0)]
                 Diagnostic(ErrorCode.ERR_SecurityAttributeMissingAction, "C").WithLocation(8, 6),
-                // (16,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction)'
+                // (16,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction action)'
                 //     public A(params SecurityAction)
-                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "A").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(16, 12),
-                // (23,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction)'
+                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "A").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(16, 12),
+                // (30,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction action)'
+                //     public C(int p1, params SecurityAction p2, string p3)
+                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "C").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(30, 12),
+                // (23,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction action)'
                 //     public B(int p1, params SecurityAction p2)
-                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "B").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(23, 12),
-                // (30,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction)'
-                //     public C(int p1, params SecurityAction p2, string p3)
-                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "C").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(30, 12));
+                Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "B").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(23, 12));
         }
 
         [WorkItem(18875, "https://github.com/dotnet/roslyn/issues/18875")]
         [Fact]
@@ -8379,12 +8388,12 @@
             var comp = CreateCompilation(source);
             comp.VerifyDiagnostics(
                 // (4,28): error CS0231: A params parameter must be the last parameter in a parameter list
                 //     public static void Goo(params int[] vals, bool truth)
-                Diagnostic(ErrorCode.ERR_ParamsLast, "params int[] vals"),
-                // (12,13): error CS1503: Argument 1: cannot convert from 'int' to 'params int[]'
+                Diagnostic(ErrorCode.ERR_ParamsLast, "params int[] vals").WithLocation(4, 28),
+                // (12,13): error CS1503: Argument 1: cannot convert from 'int' to 'params int[] vals'
                 //         Goo(1, true);
-                Diagnostic(ErrorCode.ERR_BadArgType, "1").WithArguments("1", "int", "params int[]").WithLocation(12, 13));
+                Diagnostic(ErrorCode.ERR_BadArgType, "1").WithArguments("1", "int", "params int[] vals").WithLocation(12, 13));
         }
 
         [WorkItem(2249, "https://github.com/dotnet/roslyn/issues/2249")]
         [Fact]
@@ -8632,14 +8641,14 @@
 
             var compilation = CreateCompilation(source1, options: TestOptions.DebugExe);
 
             compilation.VerifyDiagnostics(
-    // (9,39): error CS0121: The call is ambiguous between the following methods or properties: 'VS2015CompilerBug.Test2(int, int)' and 'VS2015CompilerBug.Test2(int, int, int)'
+    // (9,39): error CS0121: The call is ambiguous between the following methods or properties: 'VS2015CompilerBug.Test2(int x, int y)' and 'VS2015CompilerBug.Test2(int x, int y, int z)'
     //             (new VS2015CompilerBug()).Test2(1);   
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Test2").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test2(int, int)", "VS2015CompilerBug.VS2015CompilerBug.Test2(int, int, int)").WithLocation(9, 39),
-    // (10,39): error CS0121: The call is ambiguous between the following methods or properties: 'VS2015CompilerBug.Test3(int, int, int, int)' and 'VS2015CompilerBug.Test3(int, int, int)'
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Test2").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test2(int x, int y)", "VS2015CompilerBug.VS2015CompilerBug.Test2(int x, int y, int z)").WithLocation(9, 39),
+    // (10,39): error CS0121: The call is ambiguous between the following methods or properties: 'VS2015CompilerBug.Test3(int x, int y, int z, int u)' and 'VS2015CompilerBug.Test3(int x, int y, int z)'
     //             (new VS2015CompilerBug()).Test3(1, 2);   
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Test3").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test3(int, int, int, int)", "VS2015CompilerBug.VS2015CompilerBug.Test3(int, int, int)").WithLocation(10, 39)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Test3").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test3(int x, int y, int z, int u)", "VS2015CompilerBug.VS2015CompilerBug.Test3(int x, int y, int z)").WithLocation(10, 39)
                 );
         }
 
         [Fact, WorkItem(2533, "https://github.com/dotnet/roslyn/issues/2533")]
@@ -8693,11 +8702,11 @@
 
             var compilation = CreateCompilation(source1, options: TestOptions.DebugExe);
 
             compilation.VerifyDiagnostics(
-    // (14,9): error CS0121: The call is ambiguous between the following methods or properties: 'Test.M1(object, object, string)' and 'Test.M1(string, object, object)'
+    // (14,9): error CS0121: The call is ambiguous between the following methods or properties: 'Test.M1(object o, object o1, string s)' and 'Test.M1(string s, object o1, object o2)'
     //         M1("M", null, null);
-    Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("Test.M1(object, object, string)", "Test.M1(string, object, object)").WithLocation(14, 9)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("Test.M1(object o, object o1, string s)", "Test.M1(string s, object o1, object o2)").WithLocation(14, 9)
                 );
         }
 
         [Fact, WorkItem(4424, "https://github.com/dotnet/roslyn/issues/4424")]
@@ -8867,20 +8876,20 @@
     Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(21, 15),
     // (22,15): error CS1744: Named argument 'x' specifies a parameter for which a positional argument has already been given
     //         M6(0, x: 1);
     Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(22, 15),
-    // (24,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M7(int, int, int)'
+    // (24,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M7(int u, int x, int w)'
     //         M7(0, x: 1);
-    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M7").WithArguments("w", "C.M7(int, int, int)").WithLocation(24, 9),
-    // (25,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M9(int, int, int)'
+    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M7").WithArguments("w", "C.M7(int u, int x, int w)").WithLocation(24, 9),
+    // (25,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M9(int u, int x, int w)'
     //         M9(0, x: 1);
-    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M9").WithArguments("w", "C.M9(int, int, int)").WithLocation(25, 9),
-    // (26,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M8(int, int, int)'
+    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M9").WithArguments("w", "C.M9(int u, int x, int w)").WithLocation(25, 9),
+    // (26,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M8(int u, int x, int w)'
     //         M8(0, x: 1);
-    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M8").WithArguments("w", "C.M8(int, int, int)").WithLocation(26, 9),
-    // (27,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M10(int, int, int)'
+    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M8").WithArguments("w", "C.M8(int u, int x, int w)").WithLocation(26, 9),
+    // (27,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M10(int u, int x, int w)'
     //         M10(0, x: 1);
-    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M10").WithArguments("w", "C.M10(int, int, int)").WithLocation(27, 9),
+    Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M10").WithArguments("w", "C.M10(int u, int x, int w)").WithLocation(27, 9),
     // (29,25): error CS1739: The best overload for 'M11' does not have a parameter named 'z'
     //         M11(x: 1, y: 2, z: 3);
     Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("M11", "z").WithLocation(29, 25),
     // (31,9): error CS1501: No overload for method 'M12' takes 4 arguments
@@ -8905,9 +8914,9 @@
     //         M18(1, x: 2, y: 3);
     Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "y").WithArguments("y").WithLocation(40, 22),
     // (41,16): error CS1744: Named argument 'x' specifies a parameter for which a positional argument has already been given
     //         M19(1, x: 2, y: 3);
-    Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(41, 16)
+    Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(41, 16)
                 );
         }
 
         [Fact, WorkItem(2631, "https://github.com/dotnet/roslyn/issues/2631")]
@@ -8973,11 +8982,11 @@
 
             var compilation = CreateCompilationWithMscorlib45(source1);
 
             compilation.VerifyDiagnostics(
-    // (34,18): error CS0121: The call is ambiguous between the following methods or properties: 'FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)' and 'Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)'
+    // (34,18): error CS0121: The call is ambiguous between the following methods or properties: 'FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> actualValue)' and 'Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> actualValue)'
     //             dict.Should();
-    Diagnostic(ErrorCode.ERR_AmbigCall, "Should").WithArguments("FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)", "Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)").WithLocation(34, 18)
+    Diagnostic(ErrorCode.ERR_AmbigCall, "Should").WithArguments("FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> actualValue)", "Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> actualValue)").WithLocation(34, 18)
                 );
         }
 
         [Fact, WorkItem(4970, "https://github.com/dotnet/roslyn/issues/4970")]
@@ -9066,11 +9075,11 @@
 ";
             var compilation = CreateCompilation(source, options: TestOptions.ReleaseDll);
 
             compilation.VerifyDiagnostics(
-    // (6,11): error CS0122: 'D.M(int)' is inaccessible due to its protection level
+    // (6,11): error CS0122: 'D.M(int i)' is inaccessible due to its protection level
     //         d.M(1);
-    Diagnostic(ErrorCode.ERR_BadAccess, "M").WithArguments("D.M(int)").WithLocation(6, 11)
+    Diagnostic(ErrorCode.ERR_BadAccess, "M").WithArguments("D.M(int i)").WithLocation(6, 11)
                 );
 
             var tree = compilation.SyntaxTrees.Single();
             var model = compilation.GetSemanticModel(tree);
@@ -9103,11 +9112,11 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1)' and 'Program.Method(Del2)'
+                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1 del1)' and 'Program.Method(Del2 del2)'
                 //         Method(() => null);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(11, 9)
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(11, 9)
                 );
         }
 
         [Fact, WorkItem(12061, "https://github.com/dotnet/roslyn/issues/12061")]
@@ -9127,11 +9136,11 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1)' and 'Program.Method(Del2)'
+                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1 del1)' and 'Program.Method(Del2 del2)'
                 //         Method(() => null);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(11, 9)
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(11, 9)
                 );
         }
 
         [Fact, WorkItem(12061, "https://github.com/dotnet/roslyn/issues/12061")]
@@ -9151,11 +9160,11 @@
     }
 }
 ";
             CreateCompilation(source).VerifyDiagnostics(
-                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1<string>)' and 'Program.Method(Del2<string>)'
+                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1<string> del1)' and 'Program.Method(Del2<string> del2)'
                 //         Method(() => null);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1<string>)", "Program.Method(Del2<string>)").WithLocation(11, 9)
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1<string> del1)", "Program.Method(Del2<string> del2)").WithLocation(11, 9)
                 );
         }
 
         [Fact, WorkItem(12061, "https://github.com/dotnet/roslyn/issues/12061")]
@@ -9176,11 +9185,11 @@
     }
 }
 ";
             CreateCompilationWithMscorlib40AndSystemCore(source).VerifyDiagnostics(
-                // (12,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1)' and 'Program.Method(Del2)'
+                // (12,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1 del1)' and 'Program.Method(Del2 del2)'
                 //         Method(() => null);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(12, 9)
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(12, 9)
                 );
         }
 
         [Fact, WorkItem(13380, "https://github.com/dotnet/roslyn/issues/13380")]
@@ -9299,14 +9308,14 @@
     }
 }";
             var comp = CreateCompilationWithMscorlib40AndSystemCore(source);
             comp.VerifyDiagnostics(
-                // (17,9): error CS0411: The type arguments for method 'Test.Assert<T>(T, T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (17,9): error CS0411: The type arguments for method 'Test.Assert<T>(T a, T b)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         Assert(a, b);
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T, T)").WithLocation(17, 9),
-                // (18,9): error CS0411: The type arguments for method 'Test.Assert<T>(T, T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T a, T b)").WithLocation(17, 9),
+                // (18,9): error CS0411: The type arguments for method 'Test.Assert<T>(T a, T b)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         Assert(b, a);
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T, T)").WithLocation(18, 9)
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T a, T b)").WithLocation(18, 9)
                 );
         }
 
         /// <summary>
@@ -9338,11 +9347,11 @@
     internal static void F(this B x, Action<object> y, A z) { }
 }";
             var comp = CreateCompilationWithMscorlib40AndSystemCore(source);
             comp.VerifyDiagnostics(
-                // (9,22): error CS1503: Argument 3: cannot convert from 'A' to 'B'
+                // (9,22): error CS1503: Argument 3: cannot convert from 'A' to 'B z'
                 //         a.F(o => {}, a);
-                Diagnostic(ErrorCode.ERR_BadArgType, "a").WithArguments("3", "A", "B").WithLocation(9, 22));
+                Diagnostic(ErrorCode.ERR_BadArgType, "a").WithArguments("3", "A", "B z").WithLocation(9, 22));
         }
 
         /// <summary>
         /// Inapplicable extension methods with bad arguments, with overloads where
@@ -9373,11 +9382,11 @@
     internal static void F(this A x, Action<object> y, B z) { }
 }";
             var comp = CreateCompilationWithMscorlib40AndSystemCore(source);
             comp.VerifyDiagnostics(
-                // (9,9): error CS1929: 'A' does not contain a definition for 'F' and the best extension method overload 'E.F(B, Action<object>, A)' requires a receiver of type 'B'
+                // (9,9): error CS1929: 'A' does not contain a definition for 'F' and the best extension method overload 'E.F(B x, Action<object> y, A z)' requires a receiver of type 'B x'
                 //         a.F(o => {}, a);
-                Diagnostic(ErrorCode.ERR_BadInstanceArgType, "a").WithArguments("A", "F", "E.F(B, System.Action<object>, A)", "B").WithLocation(9, 9));
+                Diagnostic(ErrorCode.ERR_BadInstanceArgType, "a").WithArguments("A", "F", "E.F(B x, System.Action<object> y, A z)", "B x").WithLocation(9, 9));
         }
 
         [Fact]
         public void CircularImplicitConversions()
@@ -9414,11 +9423,11 @@
 }
 ";
             var comp = CreateCompilationWithMscorlib40AndSystemCore(source);
             comp.VerifyDiagnostics(
-                // (28,36): error CS0121: The call is ambiguous between the following methods or properties: 'E.F(A)' and 'E.F(B)'
+                // (28,36): error CS0121: The call is ambiguous between the following methods or properties: 'E.F(A a)' and 'E.F(B b)'
                 //     public static void Main() => E.F(new D());
-                Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("E.F(A)", "E.F(B)").WithLocation(28, 36)
+                Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("E.F(A a)", "E.F(B b)").WithLocation(28, 36)
             );
 
             var tree = comp.SyntaxTrees.Single();
             var model = comp.GetSemanticModel(tree);
@@ -9539,11 +9548,11 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (11,16): error CS1503: Argument 1: cannot convert from 'System.Exception' to 'in int'
+                // (11,16): error CS1503: Argument 1: cannot convert from 'System.Exception' to 'in int p'
                 //         Method(x);
-                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "System.Exception", "in int").WithLocation(11, 16)
+                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "System.Exception", "in int p").WithLocation(11, 16)
             );
         }
 
         [WorkItem(20799, "https://github.com/dotnet/roslyn/issues/20799")]
@@ -10032,14 +10041,14 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int, int)' and 'Program.Method(int, in int)'
+                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y)' and 'Program.Method(int x, in int y)'
                 //         Method(x, y);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int)", "Program.Method(int, in int)").WithLocation(18, 9),
-                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int, int)' and 'Program.Method(int, in int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y)", "Program.Method(int x, in int y)").WithLocation(18, 9),
+                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y)' and 'Program.Method(int x, in int y)'
                 //         Method(3, 4);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int)", "Program.Method(int, in int)").WithLocation(19, 9));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y)", "Program.Method(int x, in int y)").WithLocation(19, 9));
         }
 
         [Fact]
         public void PassingInArgumentsOverloadedOnIn_ConflictingParameters_Error_Inverse()
@@ -10066,14 +10075,14 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int, in int)' and 'Program.Method(in int, int)'
+                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y)' and 'Program.Method(in int x, int y)'
                 //         Method(x, y);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int)", "Program.Method(in int, int)").WithLocation(18, 9),
-                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int, in int)' and 'Program.Method(in int, int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y)", "Program.Method(in int x, int y)").WithLocation(18, 9),
+                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y)' and 'Program.Method(in int x, int y)'
                 //         Method(3, 4);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int)", "Program.Method(in int, int)").WithLocation(19, 9));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y)", "Program.Method(in int x, int y)").WithLocation(19, 9));
         }
 
         [Fact]
         public void PassingInArgumentsOverloadedOnIn_ThreeConflictingParameters_Error()
@@ -10100,14 +10109,14 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int, int, in int)' and 'Program.Method(int, in int, int)'
+                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y, in int z)' and 'Program.Method(int x, in int y, int z)'
                 //         Method(x, y, z);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int, in int)", "Program.Method(int, in int, int)").WithLocation(18, 9),
-                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int, int, in int)' and 'Program.Method(int, in int, int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y, in int z)", "Program.Method(int x, in int y, int z)").WithLocation(18, 9),
+                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y, in int z)' and 'Program.Method(int x, in int y, int z)'
                 //         Method(4, 5, 6);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int, in int)", "Program.Method(int, in int, int)").WithLocation(19, 9));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y, in int z)", "Program.Method(int x, in int y, int z)").WithLocation(19, 9));
         }
 
         [Fact]
         public void PassingInArgumentsOverloadedOnIn_ThreeConflictingParameters_Error_Inverse()
@@ -10134,14 +10143,14 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int, in int, int)' and 'Program.Method(in int, int, in int)'
+                // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y, int z)' and 'Program.Method(in int x, int y, in int z)'
                 //         Method(x, y, z);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int, int)", "Program.Method(in int, int, in int)").WithLocation(18, 9),
-                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int, in int, int)' and 'Program.Method(in int, int, in int)'
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y, int z)", "Program.Method(in int x, int y, in int z)").WithLocation(18, 9),
+                // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y, int z)' and 'Program.Method(in int x, int y, in int z)'
                 //         Method(4, 5, 6);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int, int)", "Program.Method(in int, int, in int)").WithLocation(19, 9));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y, int z)", "Program.Method(in int x, int y, in int z)").WithLocation(19, 9));
         }
 
         [Fact]
         public void PassingInArgumentsOverloadedOnIn_ConflictingParameters_Error_BinaryOperators()
@@ -10389,17 +10398,17 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                    // (17,19): error CS1503: Argument 1: cannot convert from 'in byte' to 'in int'
+                    // (17,19): error CS1503: Argument 1: cannot convert from 'in byte' to 'in int inP'
                     //         Method(in x);
-                    Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int").WithLocation(17, 19),
+                    Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int inP").WithLocation(17, 19),
                     // (20,26): error CS1510: A ref or out value must be an assignable variable
                     //         Method(valP: out 2);
                     Diagnostic(ErrorCode.ERR_RefLvalueExpected, "2").WithLocation(20, 26),
                     // (21,25): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
                     //         Method(valP: in 2);
-                    Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(21, 25)
+                    Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(21, 25)
                 );
         }
 
         [Fact]
@@ -10486,17 +10495,17 @@
     }
 }";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (27,18): error CS1503: Argument 1: cannot convert from 'in byte' to 'in int'
+                // (27,18): error CS1503: Argument 1: cannot convert from 'in byte' to 'in int inP'
                 //         _ = p[in x];
-                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int").WithLocation(27, 18),
+                Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int inP").WithLocation(27, 18),
                 // (30,25): error CS1510: A ref or out value must be an assignable variable
                 //         _ = p[valP: out 2];
                 Diagnostic(ErrorCode.ERR_RefLvalueExpected, "2").WithLocation(30, 25),
                 // (31,23): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
                 //         _ = p[inP: in 2];
-                Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(31, 23));
+                Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(31, 23));
         }
 
         [Fact]
         public void PassingInArgumentsOverloadedOnInOptionalParameters()
@@ -10793,11 +10802,11 @@
     {
         M(null);
     }
 }").VerifyDiagnostics(
-                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.M(string)' and 'Program.M(StringBuilder)'
+                // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.M(string x)' and 'Program.M(StringBuilder x)'
                 //         M(null);
-                Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("Program.M(string)", "Program.M(System.Text.StringBuilder)").WithLocation(11, 9));
+                Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("Program.M(string x)", "Program.M(System.Text.StringBuilder x)").WithLocation(11, 9));
         }
 
         [Fact]
         public void GenericInferenceOnIn()
@@ -10870,29 +10879,29 @@
 }
 ";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (15,9): error CS0411: The type arguments for method 'Program.M1<T>(in T, in T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (15,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         M1(null, null);
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(15, 9),
-                // (16,12): error CS1503: Argument 1: cannot convert from '<null>' to 'in int'
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(15, 9),
+                // (16,12): error CS1503: Argument 1: cannot convert from '<null>' to 'in int arg1'
                 //         M1(null, 1);
-                Diagnostic(ErrorCode.ERR_BadArgType, "null").WithArguments("1", "<null>", "in int").WithLocation(16, 12),
-                // (17,9): error CS0411: The type arguments for method 'Program.M1<T>(in T, in T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_BadArgType, "null").WithArguments("1", "<null>", "in int arg1").WithLocation(16, 12),
+                // (17,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         M1(new object(), default(RefLike));
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(17, 9),
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(17, 9),
                 // (19,9): error CS0306: The type 'Program.RefLike' may not be used as a type argument
                 //         M1(rl, rl);
                 Diagnostic(ErrorCode.ERR_BadTypeArgument, "M1").WithArguments("Program.RefLike").WithLocation(19, 9),
                 // (20,9): error CS0306: The type 'Program.RefLike' may not be used as a type argument
                 //         M1(in rl, in rl);
                 Diagnostic(ErrorCode.ERR_BadTypeArgument, "M1").WithArguments("Program.RefLike").WithLocation(20, 9),
-                // (22,9): error CS0411: The type arguments for method 'Program.M1<T>(in T, in T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (22,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         M1(in y, in x);
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(22, 9),
-                // (23,9): error CS0411: The type arguments for method 'Program.M1<T>(in T, in T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(22, 9),
+                // (23,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         M1(in y, x);  
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(23, 9)
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(23, 9)
                 );
         }
 
         [Fact]
@@ -10965,20 +10974,20 @@
 }
 ";
 
             CreateCompilationWithMscorlib40(code, references: new[] { SystemRuntimeFacadeRef, ValueTupleRef }).VerifyDiagnostics(
-                // (15,9): error CS0411: The type arguments for method 'Program.Method<T>(in (T arg1, T arg2))' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (15,9): error CS0411: The type arguments for method 'Program.Method<T>(in (T arg1, T arg2) p)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         Method((null, null));
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2))").WithLocation(15, 9),
-                // (16,16): error CS1503: Argument 1: cannot convert from '(<null>, int)' to 'in (int arg1, int arg2)'
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2) p)").WithLocation(15, 9),
+                // (16,16): error CS1503: Argument 1: cannot convert from '(<null>, int)' to 'in (int arg1, int arg2) p'
                 //         Method((null, 1));
-                Diagnostic(ErrorCode.ERR_BadArgType, "(null, 1)").WithArguments("1", "(<null>, int)", "in (int arg1, int arg2)").WithLocation(16, 16),
+                Diagnostic(ErrorCode.ERR_BadArgType, "(null, 1)").WithArguments("1", "(<null>, int)", "in (int arg1, int arg2) p").WithLocation(16, 16),
                 // (17,31): error CS0306: The type 'Program.RefLike' may not be used as a type argument
                 //         Method((new object(), default(RefLike)));
                 Diagnostic(ErrorCode.ERR_BadTypeArgument, "default(RefLike)").WithArguments("Program.RefLike").WithLocation(17, 31),
-                // (17,9): error CS0411: The type arguments for method 'Program.Method<T>(in (T arg1, T arg2))' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (17,9): error CS0411: The type arguments for method 'Program.Method<T>(in (T arg1, T arg2) p)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         Method((new object(), default(RefLike)));
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2))").WithLocation(17, 9),
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2) p)").WithLocation(17, 9),
                 // (19,17): error CS0306: The type 'Program.RefLike' may not be used as a type argument
                 //         Method((rl, rl));
                 Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(19, 17),
                 // (19,21): error CS0306: The type 'Program.RefLike' may not be used as a type argument
@@ -10997,9 +11006,9 @@
                 //         Method(in (rl, rl));
                 Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(rl, rl)").WithLocation(20, 19),
                 // (22,19): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
                 //         Method(in (y, x));  
-                Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(y, x)").WithLocation(22, 19));
+                Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(y, x)").WithLocation(22, 19));
         }
 
         [Fact]
         public void GenericInferenceErrorRecovery()
@@ -11019,11 +11028,11 @@
 }
 ";
             var comp = CreateCompilation(code);
             comp.VerifyDiagnostics(
-                // (11,9): error CS0411: The type arguments for method 'Program.Method<T>(in T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (11,9): error CS0411: The type arguments for method 'Program.Method<T>(in T p)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         Method((null, 1));
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in T)").WithLocation(11, 9));
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in T p)").WithLocation(11, 9));
         }
 
         [Fact]
         public void GenericInferenceLambdaVariance()
@@ -11045,11 +11054,11 @@
 }
 ";
 
             CreateCompilation(code).VerifyDiagnostics(
-                // (13,9): error CS0411: The type arguments for method 'Program.M1<T>(T, T)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
+                // (13,9): error CS0411: The type arguments for method 'Program.M1<T>(T arg1, T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
                 //         M1((in int arg1, in int arg2) => throw null, (in int arg1, in int arg2) => throw null);
-                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(T, T)").WithLocation(13, 9)
+                Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(T arg1, T arg2)").WithLocation(13, 9)
                 );
         }
 
         [Fact]
@@ -11096,14 +11105,14 @@
 ";
 
 
             CreateCompilation(code, references: new[] { libComp.EmitToImageReference() }).VerifyDiagnostics(
-                // (13,10): error CS8329: Cannot use variable 'in int' as a ref or out value because it is a readonly variable
+                // (13,10): error CS8329: Cannot use variable 'in int y' as a ref or out value because it is a readonly variable
                 //          y.R_extension(); // error 1
-                Diagnostic(ErrorCode.ERR_RefReadonlyNotField, "y").WithArguments("variable", "in int").WithLocation(13, 10),
+                Diagnostic(ErrorCode.ERR_RefReadonlyNotField, "y").WithArguments("variable", "in int y").WithLocation(13, 10),
                 // (14,10): error CS1510: A ref or out value must be an assignable variable
                 //          1.R_extension(); // error 2
-                Diagnostic(ErrorCode.ERR_RefLvalueExpected, "1").WithLocation(14, 10)
+                Diagnostic(ErrorCode.ERR_RefLvalueExpected, "1").WithLocation(14, 10)
                 );
 
             CreateCompilation(code, references: new[] { libComp.ToMetadataReference() }).VerifyDiagnostics(
                 // (13,10): error CS8329: Cannot use variable 'in int' as a ref or out value because it is a readonly variable
@@ -11229,11 +11238,11 @@
 ";
 
             CreateCompilation(code).VerifyDiagnostics
             (
-                // (16,15): error CS8189: Ref mismatch between 'Program.F(in DateTime)' and delegate 'Program.D'
+                // (16,15): error CS8189: Ref mismatch between 'Program.F(in DateTime x)' and delegate 'Program.D'
                 //         D a = F;
-                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, "F").WithArguments("Program.F(in System.DateTime)", "Program.D").WithLocation(16, 15)
+                Diagnostic(ErrorCode.ERR_DelegateRefMismatch, "F").WithArguments("Program.F(in System.DateTime x)", "Program.D").WithLocation(16, 15)
             );
         }
 
         [Fact]
@@ -11261,11 +11270,11 @@
 ";
 
             CreateCompilation(code).VerifyDiagnostics
             (
-                // (16,15): error CS0407: 'string Program.F(in DateTime)' has the wrong return type
+                // (16,15): error CS0407: 'string Program.F(in DateTime x)' has the wrong return type
                 //         D a = F;
-                Diagnostic(ErrorCode.ERR_BadRetType, "F").WithArguments("Program.F(in System.DateTime)", "string").WithLocation(16, 15)
+                Diagnostic(ErrorCode.ERR_BadRetType, "F").WithArguments("Program.F(in System.DateTime x)", "string").WithLocation(16, 15)
             );
         }
 
         [Fact, WorkItem(25813, "https://github.com/dotnet/roslyn/issues/25813")]
@@ -11465,11 +11474,11 @@
 ";
 
             var comp = CreateCompilation(source);
             comp.VerifyDiagnostics(
-                // (11,35): error CS0453: The type 'object' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'B.F<T>(T)'
+                // (11,35): error CS0453: The type 'object' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'B.F<T>(T t)'
                 //         System.Action<object> d = F<object>;
-                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T)", "T", "object").WithLocation(11, 35)
+                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T t)", "T", "object").WithLocation(11, 35)
                 );
         }
 
         [Fact]
@@ -11493,11 +11502,11 @@
 ";
 
             var comp = CreateCompilation(source);
             comp.VerifyDiagnostics(
-                // (11,9): error CS0453: The type 'object' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'B.F<T>(T)'
+                // (11,9): error CS0453: The type 'object' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'B.F<T>(T t)'
                 //         F<object>(default);
-                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T)", "T", "object").WithLocation(11, 9)
+                Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T t)", "T", "object").WithLocation(11, 9)
                 );
         }
     }
 }
