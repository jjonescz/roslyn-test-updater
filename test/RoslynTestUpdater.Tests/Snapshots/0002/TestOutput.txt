Building Test Projects
Starting test discovery for requested test run
========== Starting test discovery ==========
========== Test discovery skipped: All test containers are up to date ==========
========== Starting test run ==========
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.5+1caef2f33e (64-bit .NET 6.0.9)
[xUnit.net 00:00:04.59]   Starting:    Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests
[xUnit.net 00:00:05.95]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DynamicByRef [FAIL]
[xUnit.net 00:00:05.95]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:05.95]       -C.F(int, char, ref dynamic)
[xUnit.net 00:00:05.95]       +C.F(int p1, char p2, ref dynamic p3)
[xUnit.net 00:00:05.95]       
[xUnit.net 00:00:05.95]       Expected: True
[xUnit.net 00:00:05.95]       Actual:   False
[xUnit.net 00:00:05.95]       Stack Trace:
[xUnit.net 00:00:05.95]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:05.95]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:05.95]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6980,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DynamicByRef()
[xUnit.net 00:00:06.03]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TypeInferenceFailures [FAIL]
[xUnit.net 00:00:06.03]       
[xUnit.net 00:00:06.03]       Expected:
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)"),
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       Actual:
[xUnit.net 00:00:06.03]                       // (42,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(null); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(42, 13),
[xUnit.net 00:00:06.03]                       // (43,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(a); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(43, 13),
[xUnit.net 00:00:06.03]                       // (44,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(i); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(44, 13),
[xUnit.net 00:00:06.03]                       // (45,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(g1a); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(45, 13),
[xUnit.net 00:00:06.03]                       // (46,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(g11b); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(46, 13),
[xUnit.net 00:00:06.03]                       // (47,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(g111c); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(47, 13),
[xUnit.net 00:00:06.03]                       // (49,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(g2ab); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(49, 13),
[xUnit.net 00:00:06.03]                       // (54,13): error CS0411: The type arguments for method 'AggTest.B1.M3<S, T>(G1<G2<S, T>> a)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:06.03]                       //             M3(g2a2bc); // Can't infer
[xUnit.net 00:00:06.03]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(54, 13)
[xUnit.net 00:00:06.03]       Diff:
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(42, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(43, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(44, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(45, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(46, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(47, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(49, 13)
[xUnit.net 00:00:06.03]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>> a)").WithLocation(54, 13)
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M3").WithArguments("AggTest.B1.M3<S, T>(G1<G2<S, T>>)")
[xUnit.net 00:00:06.03]       Expected: True
[xUnit.net 00:00:06.03]       Actual:   False
[xUnit.net 00:00:06.03]       Stack Trace:
[xUnit.net 00:00:06.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.03]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6375,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TypeInferenceFailures()
[xUnit.net 00:00:06.30]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversion_BetterCandidateHasParameterArray [FAIL]
[xUnit.net 00:00:06.30]       
[xUnit.net 00:00:06.30]       Expected:
[xUnit.net 00:00:06.30]                       Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2)", "A")
[xUnit.net 00:00:06.30]       Actual:
[xUnit.net 00:00:06.30]                       // (8,16): warning CS0618: 'Extensions.Add(IViewable2 @this)' is obsolete: 'A'
[xUnit.net 00:00:06.30]                       //         v.View(v.Add);
[xUnit.net 00:00:06.30]                       Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2 @this)", "A").WithLocation(8, 16)
[xUnit.net 00:00:06.30]       Diff:
[xUnit.net 00:00:06.30]       ++>                 Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2 @this)", "A").WithLocation(8, 16)
[xUnit.net 00:00:06.30]       -->                 Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2)", "A")
[xUnit.net 00:00:06.30]       Expected: True
[xUnit.net 00:00:06.30]       Actual:   False
[xUnit.net 00:00:06.30]       Stack Trace:
[xUnit.net 00:00:06.30]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.30]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.30]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.30]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.30]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7230,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversion_BetterCandidateHasParameterArray()
[xUnit.net 00:00:06.45]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ExactlyMatchingNestedLambda [FAIL]
[xUnit.net 00:00:06.45]       
[xUnit.net 00:00:06.45]       Expected:
[xUnit.net 00:00:06.45]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA, object)", "P.M1(P.DB, int)").WithLocation(15, 5)
[xUnit.net 00:00:06.45]       Actual:
[xUnit.net 00:00:06.45]                       // (15,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(P.DA a, object b)' and 'P.M1(P.DB a, int b)'
[xUnit.net 00:00:06.45]                       //     M1(() => () => i, i);
[xUnit.net 00:00:06.45]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA a, object b)", "P.M1(P.DB a, int b)").WithLocation(15, 5)
[xUnit.net 00:00:06.45]       Diff:
[xUnit.net 00:00:06.45]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA a, object b)", "P.M1(P.DB a, int b)").WithLocation(15, 5)
[xUnit.net 00:00:06.45]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA, object)", "P.M1(P.DB, int)").WithLocation(15, 5)
[xUnit.net 00:00:06.45]       Expected: True
[xUnit.net 00:00:06.45]       Actual:   False
[xUnit.net 00:00:06.45]       Stack Trace:
[xUnit.net 00:00:06.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.45]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(390,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ExactlyMatchingNestedLambda()
[xUnit.net 00:00:06.58]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug11961 [FAIL]
[xUnit.net 00:00:06.58]       
[xUnit.net 00:00:06.58]       Expected:
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("P.M(string, System.Action<string>)", "P.M(object, System.Action<object>)"),
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(string, System.Func<object>)", "P.M1(object, System.Func<System.ValueType>)"),
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("P.M4(System.Func<object>, System.Action<object>, System.Action<string>)", "P.M4(System.Func<System.ValueType>, System.Action<string>, System.Action<object>)"),
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("P.M6(System.Action<object>, string, object)", "P.M6(System.Action<string>, object, string)")
[xUnit.net 00:00:06.58]       Actual:
[xUnit.net 00:00:06.58]                       // (18,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M(string x, Action<string> a)' and 'P.M(object x, Action<object> a)'
[xUnit.net 00:00:06.58]                       //     M((string)null, null);
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("P.M(string x, System.Action<string> a)", "P.M(object x, System.Action<object> a)").WithLocation(18, 5),
[xUnit.net 00:00:06.58]                       // (19,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(string x, Func<object> a)' and 'P.M1(object x, Func<ValueType> a)'
[xUnit.net 00:00:06.58]                       //     M1((string)null, ()=>{ return 5;});
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(string x, System.Func<object> a)", "P.M1(object x, System.Func<System.ValueType> a)").WithLocation(19, 5),
[xUnit.net 00:00:06.58]                       // (20,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M4(Func<object> a, Action<object> b, Action<string> x)' and 'P.M4(Func<ValueType> a, Action<string> b, Action<object> x)'
[xUnit.net 00:00:06.58]                       //     M4(()=>{ throw new NotImplementedException();}, q=> {}, q=> {});
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("P.M4(System.Func<object> a, System.Action<object> b, System.Action<string> x)", "P.M4(System.Func<System.ValueType> a, System.Action<string> b, System.Action<object> x)").WithLocation(20, 5),
[xUnit.net 00:00:06.58]                       // (21,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M6(Action<object> b, string x, object a)' and 'P.M6(Action<string> b, object x, string a)'
[xUnit.net 00:00:06.58]                       //     M6(q=> {},(string)null, (string)null);
[xUnit.net 00:00:06.58]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("P.M6(System.Action<object> b, string x, object a)", "P.M6(System.Action<string> b, object x, string a)").WithLocation(21, 5)
[xUnit.net 00:00:06.58]       Diff:
[xUnit.net 00:00:06.58]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("P.M(string x, System.Action<string> a)", "P.M(object x, System.Action<object> a)").WithLocation(18, 5)
[xUnit.net 00:00:06.58]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(string x, System.Func<object> a)", "P.M1(object x, System.Func<System.ValueType> a)").WithLocation(19, 5)
[xUnit.net 00:00:06.58]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("P.M4(System.Func<object> a, System.Action<object> b, System.Action<string> x)", "P.M4(System.Func<System.ValueType> a, System.Action<string> b, System.Action<object> x)").WithLocation(20, 5)
[xUnit.net 00:00:06.58]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("P.M6(System.Action<object> b, string x, object a)", "P.M6(System.Action<string> b, object x, string a)").WithLocation(21, 5)
[xUnit.net 00:00:06.59]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("P.M(string, System.Action<string>)", "P.M(object, System.Action<object>)")
[xUnit.net 00:00:06.59]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(string, System.Func<object>)", "P.M1(object, System.Func<System.ValueType>)")
[xUnit.net 00:00:06.59]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("P.M4(System.Func<object>, System.Action<object>, System.Action<string>)", "P.M4(System.Func<System.ValueType>, System.Action<string>, System.Action<object>)")
[xUnit.net 00:00:06.59]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("P.M6(System.Action<object>, string, object)", "P.M6(System.Action<string>, object, string)")
[xUnit.net 00:00:06.59]       Expected: True
[xUnit.net 00:00:06.59]       Actual:   False
[xUnit.net 00:00:06.59]       Stack Trace:
[xUnit.net 00:00:06.59]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.59]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.59]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.59]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.59]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(157,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug11961()
[xUnit.net 00:00:06.65]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RegressionTestForIEnumerableOfDynamic [FAIL]
[xUnit.net 00:00:06.65]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:06.65]       -C.Goo(System.Collections.Generic.IEnumerable<C.DynamicWrapper>, System.Func<C.DynamicWrapper, System.Collections.Generic.IEnumerable<dynamic>>, System.Func<C.DynamicWrapper, dynamic, string>)
[xUnit.net 00:00:06.65]       +C.Goo(System.Collections.Generic.IEnumerable<C.DynamicWrapper> source, System.Func<C.DynamicWrapper, System.Collections.Generic.IEnumerable<dynamic>> collectionSelector, System.Func<C.DynamicWrapper, dynamic, string> resultSelector)
[xUnit.net 00:00:06.65]       
[xUnit.net 00:00:06.65]       Expected: True
[xUnit.net 00:00:06.65]       Actual:   False
[xUnit.net 00:00:06.65]       Stack Trace:
[xUnit.net 00:00:06.65]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:06.65]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:06.65]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(2264,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RegressionTestForIEnumerableOfDynamic()
[xUnit.net 00:00:06.67]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DynamicVsTypeParameters [FAIL]
[xUnit.net 00:00:06.67]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:06.67]       -B<C>.F(C)
[xUnit.net 00:00:06.67]       +B<C>.F(C p1)
[xUnit.net 00:00:06.67]       
[xUnit.net 00:00:06.67]       Expected: True
[xUnit.net 00:00:06.67]       Actual:   False
[xUnit.net 00:00:06.67]       Stack Trace:
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6954,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DynamicVsTypeParameters()
[xUnit.net 00:00:06.67]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TieBreakOnNumberOfDeclaredParameters_05 [FAIL]
[xUnit.net 00:00:06.67]       
[xUnit.net 00:00:06.67]       Expected:
[xUnit.net 00:00:06.67]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("Test.M1(object, object, string)", "Test.M1(string, object, object)").WithLocation(14, 9)
[xUnit.net 00:00:06.67]       Actual:
[xUnit.net 00:00:06.67]                       // (14,9): error CS0121: The call is ambiguous between the following methods or properties: 'Test.M1(object o, object o1, string s)' and 'Test.M1(string s, object o1, object o2)'
[xUnit.net 00:00:06.67]                       //         M1("M", null, null);
[xUnit.net 00:00:06.67]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("Test.M1(object o, object o1, string s)", "Test.M1(string s, object o1, object o2)").WithLocation(14, 9)
[xUnit.net 00:00:06.67]       Diff:
[xUnit.net 00:00:06.67]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("Test.M1(object o, object o1, string s)", "Test.M1(string s, object o1, object o2)").WithLocation(14, 9)
[xUnit.net 00:00:06.67]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("Test.M1(object, object, string)", "Test.M1(string, object, object)").WithLocation(14, 9)
[xUnit.net 00:00:06.67]       Expected: True
[xUnit.net 00:00:06.67]       Actual:   False
[xUnit.net 00:00:06.67]       Stack Trace:
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.67]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8696,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TieBreakOnNumberOfDeclaredParameters_05()
[xUnit.net 00:00:06.73]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InvokeMethodOverridingNothing [FAIL]
[xUnit.net 00:00:06.73]       
[xUnit.net 00:00:06.73]       Expected:
[xUnit.net 00:00:06.73]                       Diagnostic(ErrorCode.ERR_OverrideNotExpected, "Override").WithArguments("C.Override<T>(T)")
[xUnit.net 00:00:06.73]       Actual:
[xUnit.net 00:00:06.73]                       // (4,20): error CS0115: 'C.Override<T>(T t)': no suitable method found to override
[xUnit.net 00:00:06.73]                       // 	public override T Override<T>(T t) 
[xUnit.net 00:00:06.73]                       Diagnostic(ErrorCode.ERR_OverrideNotExpected, "Override").WithArguments("C.Override<T>(T t)").WithLocation(4, 20)
[xUnit.net 00:00:06.73]       Diff:
[xUnit.net 00:00:06.73]       ++>                 Diagnostic(ErrorCode.ERR_OverrideNotExpected, "Override").WithArguments("C.Override<T>(T t)").WithLocation(4, 20)
[xUnit.net 00:00:06.73]       -->                 Diagnostic(ErrorCode.ERR_OverrideNotExpected, "Override").WithArguments("C.Override<T>(T)")
[xUnit.net 00:00:06.73]       Expected: True
[xUnit.net 00:00:06.73]       Actual:   False
[xUnit.net 00:00:06.73]       Stack Trace:
[xUnit.net 00:00:06.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.73]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6886,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InvokeMethodOverridingNothing()
[xUnit.net 00:00:06.92]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug1034429 [FAIL]
[xUnit.net 00:00:06.92]       
[xUnit.net 00:00:06.92]       Expected:
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_IdentifierExpected, ")").WithLocation(16, 35),
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_ParamsLast, "params SecurityAction p2").WithLocation(30, 22),
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "A").WithArguments("A", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(14, 14),
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(28, 14),
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "B").WithArguments("B", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(21, 14),
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(16, 14),
[xUnit.net 00:00:06.92]                       Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(23, 22),
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(30, 22),
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_SecurityAttributeMissingAction, "B").WithLocation(7, 6),
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_SecurityAttributeMissingAction, "C").WithLocation(8, 6),
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "A").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(16, 12),
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "B").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(23, 12),
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "C").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(30, 12)
[xUnit.net 00:00:06.93]       Actual:
[xUnit.net 00:00:06.93]                       // (16,35): error CS1001: Identifier expected
[xUnit.net 00:00:06.93]                       //     public A(params SecurityAction)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_IdentifierExpected, ")").WithLocation(16, 35),
[xUnit.net 00:00:06.93]                       // (16,14): error CS0225: The params parameter must be a single dimensional array
[xUnit.net 00:00:06.93]                       //     public A(params SecurityAction)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(16, 14),
[xUnit.net 00:00:06.93]                       // (14,14): error CS0534: 'A' does not implement inherited abstract member 'SecurityAttribute.CreatePermission()'
[xUnit.net 00:00:06.93]                       // public class A : CodeAccessSecurityAttribute
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "A").WithArguments("A", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(14, 14),
[xUnit.net 00:00:06.93]                       // (28,14): error CS0534: 'C' does not implement inherited abstract member 'SecurityAttribute.CreatePermission()'
[xUnit.net 00:00:06.93]                       // public class C : CodeAccessSecurityAttribute
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(28, 14),
[xUnit.net 00:00:06.93]                       // (21,14): error CS0534: 'B' does not implement inherited abstract member 'SecurityAttribute.CreatePermission()'
[xUnit.net 00:00:06.93]                       // public class B : CodeAccessSecurityAttribute
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "B").WithArguments("B", "System.Security.Permissions.SecurityAttribute.CreatePermission()").WithLocation(21, 14),
[xUnit.net 00:00:06.93]                       // (23,22): error CS0225: The params parameter must be a single dimensional array
[xUnit.net 00:00:06.93]                       //     public B(int p1, params SecurityAction p2)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(23, 22),
[xUnit.net 00:00:06.93]                       // (30,22): error CS0225: The params parameter must be a single dimensional array
[xUnit.net 00:00:06.93]                       //     public C(int p1, params SecurityAction p2, string p3)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_ParamsMustBeArray, "params").WithLocation(30, 22),
[xUnit.net 00:00:06.93]                       // (30,22): error CS0231: A params parameter must be the last parameter in a parameter list
[xUnit.net 00:00:06.93]                       //     public C(int p1, params SecurityAction p2, string p3)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_ParamsLast, "params SecurityAction p2").WithLocation(30, 22),
[xUnit.net 00:00:06.93]                       // (7,6): error CS7048: First argument to a security attribute must be a valid SecurityAction
[xUnit.net 00:00:06.93]                       //     [B(p2: SecurityAction.Assert, p1: 0)]
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_SecurityAttributeMissingAction, "B").WithLocation(7, 6),
[xUnit.net 00:00:06.93]                       // (8,6): error CS7048: First argument to a security attribute must be a valid SecurityAction
[xUnit.net 00:00:06.93]                       //     [C(p3: "again", p2: SecurityAction.Assert, p1: 0)]
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_SecurityAttributeMissingAction, "C").WithLocation(8, 6),
[xUnit.net 00:00:06.93]                       // (16,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction action)'
[xUnit.net 00:00:06.93]                       //     public A(params SecurityAction)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "A").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(16, 12),
[xUnit.net 00:00:06.93]                       // (30,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction action)'
[xUnit.net 00:00:06.93]                       //     public C(int p1, params SecurityAction p2, string p3)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "C").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(30, 12),
[xUnit.net 00:00:06.93]                       // (23,12): error CS7036: There is no argument given that corresponds to the required parameter 'action' of 'CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(SecurityAction action)'
[xUnit.net 00:00:06.93]                       //     public B(int p1, params SecurityAction p2)
[xUnit.net 00:00:06.93]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "B").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(23, 12)
[xUnit.net 00:00:06.93]       Diff:
[xUnit.net 00:00:06.93]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "A").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(16, 12)
[xUnit.net 00:00:06.93]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "C").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(30, 12)
[xUnit.net 00:00:06.93]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "B").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction action)").WithLocation(23, 12)
[xUnit.net 00:00:06.93]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "A").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(16, 12)
[xUnit.net 00:00:06.93]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "B").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(23, 12)
[xUnit.net 00:00:06.93]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "C").WithArguments("action", "System.Security.Permissions.CodeAccessSecurityAttribute.CodeAccessSecurityAttribute(System.Security.Permissions.SecurityAction)").WithLocation(30, 12)
[xUnit.net 00:00:06.93]       Expected: True
[xUnit.net 00:00:06.93]       Actual:   False
[xUnit.net 00:00:06.93]       Stack Trace:
[xUnit.net 00:00:06.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:06.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:06.93]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8318,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug1034429()
[xUnit.net 00:00:07.12]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversionRoReadonlyReturn [FAIL]
[xUnit.net 00:00:07.12]       
[xUnit.net 00:00:07.12]       Expected:
[xUnit.net 00:00:07.12]                       Diagnostic(ErrorCode.ERR_DelegateRefMismatch, "F").WithArguments("Program.F(in System.DateTime)", "Program.D").WithLocation(16, 15)
[xUnit.net 00:00:07.12]       Actual:
[xUnit.net 00:00:07.12]                       // (16,15): error CS8189: Ref mismatch between 'Program.F(in DateTime x)' and delegate 'Program.D'
[xUnit.net 00:00:07.12]                       //         D a = F;
[xUnit.net 00:00:07.12]                       Diagnostic(ErrorCode.ERR_DelegateRefMismatch, "F").WithArguments("Program.F(in System.DateTime x)", "Program.D").WithLocation(16, 15)
[xUnit.net 00:00:07.12]       Diff:
[xUnit.net 00:00:07.12]       ++>                 Diagnostic(ErrorCode.ERR_DelegateRefMismatch, "F").WithArguments("Program.F(in System.DateTime x)", "Program.D").WithLocation(16, 15)
[xUnit.net 00:00:07.12]       -->                 Diagnostic(ErrorCode.ERR_DelegateRefMismatch, "F").WithArguments("Program.F(in System.DateTime)", "Program.D").WithLocation(16, 15)
[xUnit.net 00:00:07.12]       Expected: True
[xUnit.net 00:00:07.12]       Actual:   False
[xUnit.net 00:00:07.12]       Stack Trace:
[xUnit.net 00:00:07.12]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.12]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.12]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.12]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.12]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11231,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversionRoReadonlyReturn()
[xUnit.net 00:00:07.17]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Whidbey133503b [FAIL]
[xUnit.net 00:00:07.17]       
[xUnit.net 00:00:07.17]       Expected:
[xUnit.net 00:00:07.17]                       Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("Ambig.F(P1)", "Ambig.F(P2)")
[xUnit.net 00:00:07.17]       Actual:
[xUnit.net 00:00:07.17]                       // (6,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.F(P1 p)' and 'Ambig.F(P2 p)'
[xUnit.net 00:00:07.17]                       //         F(new Q());
[xUnit.net 00:00:07.17]                       Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("Ambig.F(P1 p)", "Ambig.F(P2 p)").WithLocation(6, 9)
[xUnit.net 00:00:07.18]       Diff:
[xUnit.net 00:00:07.18]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("Ambig.F(P1 p)", "Ambig.F(P2 p)").WithLocation(6, 9)
[xUnit.net 00:00:07.18]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("Ambig.F(P1)", "Ambig.F(P2)")
[xUnit.net 00:00:07.18]       Expected: True
[xUnit.net 00:00:07.18]       Actual:   False
[xUnit.net 00:00:07.18]       Stack Trace:
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6567,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Whidbey133503b()
[xUnit.net 00:00:07.18]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingArgumentsToOverloadsOfByValAndInParameters_TypeConversions_NonConvertible_Error [FAIL]
[xUnit.net 00:00:07.18]       
[xUnit.net 00:00:07.18]       Expected:
[xUnit.net 00:00:07.18]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("Program.M(string)", "Program.M(System.Text.StringBuilder)").WithLocation(11, 9)
[xUnit.net 00:00:07.18]       Actual:
[xUnit.net 00:00:07.18]                       // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.M(string x)' and 'Program.M(StringBuilder x)'
[xUnit.net 00:00:07.18]                       //         M(null);
[xUnit.net 00:00:07.18]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("Program.M(string x)", "Program.M(System.Text.StringBuilder x)").WithLocation(11, 9)
[xUnit.net 00:00:07.18]       Diff:
[xUnit.net 00:00:07.18]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("Program.M(string x)", "Program.M(System.Text.StringBuilder x)").WithLocation(11, 9)
[xUnit.net 00:00:07.18]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("Program.M(string)", "Program.M(System.Text.StringBuilder)").WithLocation(11, 9)
[xUnit.net 00:00:07.18]       Expected: True
[xUnit.net 00:00:07.18]       Actual:   False
[xUnit.net 00:00:07.18]       Stack Trace:
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.19]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.19]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10784,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingArgumentsToOverloadsOfByValAndInParameters_TypeConversions_NonConvertible_Error()
[xUnit.net 00:00:07.41]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness04 [FAIL]
[xUnit.net 00:00:07.41]       
[xUnit.net 00:00:07.41]       Expected:
[xUnit.net 00:00:07.41]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(12, 9)
[xUnit.net 00:00:07.41]       Actual:
[xUnit.net 00:00:07.41]                       // (12,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1 del1)' and 'Program.Method(Del2 del2)'
[xUnit.net 00:00:07.41]                       //         Method(() => null);
[xUnit.net 00:00:07.41]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(12, 9)
[xUnit.net 00:00:07.41]       Diff:
[xUnit.net 00:00:07.41]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(12, 9)
[xUnit.net 00:00:07.41]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(12, 9)
[xUnit.net 00:00:07.41]       Expected: True
[xUnit.net 00:00:07.41]       Actual:   False
[xUnit.net 00:00:07.41]       Stack Trace:
[xUnit.net 00:00:07.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.41]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9179,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness04()
[xUnit.net 00:00:07.42]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ParametersExactlyMatchExpression [FAIL]
[xUnit.net 00:00:07.42]       
[xUnit.net 00:00:07.42]       Expected:
[xUnit.net 00:00:07.42]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA)", "P.M1(P.DB)")
[xUnit.net 00:00:07.42]       Actual:
[xUnit.net 00:00:07.42]                       // (14,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(P.DA a)' and 'P.M1(P.DB a)'
[xUnit.net 00:00:07.42]                       //     M1(() => x);
[xUnit.net 00:00:07.42]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA a)", "P.M1(P.DB a)").WithLocation(14, 5)
[xUnit.net 00:00:07.42]       Diff:
[xUnit.net 00:00:07.42]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA a)", "P.M1(P.DB a)").WithLocation(14, 5)
[xUnit.net 00:00:07.42]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(P.DA)", "P.M1(P.DB)")
[xUnit.net 00:00:07.42]       Expected: True
[xUnit.net 00:00:07.42]       Actual:   False
[xUnit.net 00:00:07.42]       Stack Trace:
[xUnit.net 00:00:07.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.42]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(339,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ParametersExactlyMatchExpression()
[xUnit.net 00:00:07.43]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestDelegateBetterness [FAIL]
[xUnit.net 00:00:07.43]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:07.43]       -C.N2(Func<int, object>)
[xUnit.net 00:00:07.43]       -C.N3(Func<int, Tiger>)
[xUnit.net 00:00:07.43]       -C.N4(Func2<int, Mammal>)
[xUnit.net 00:00:07.43]       +C.N2(Func<int, object> f)
[xUnit.net 00:00:07.43]       +C.N3(Func<int, Tiger> f)
[xUnit.net 00:00:07.43]       +C.N4(Func2<int, Mammal> f)
[xUnit.net 00:00:07.43]       
[xUnit.net 00:00:07.43]       Expected: True
[xUnit.net 00:00:07.43]       Actual:   False
[xUnit.net 00:00:07.43]       Stack Trace:
[xUnit.net 00:00:07.43]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:07.43]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:07.43]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1627,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestDelegateBetterness()
[xUnit.net 00:00:07.57]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceOnInErr [FAIL]
[xUnit.net 00:00:07.57]       
[xUnit.net 00:00:07.57]       Expected:
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(15, 9),
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_BadArgType, "null").WithArguments("1", "<null>", "in int").WithLocation(16, 12),
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(17, 9),
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "M1").WithArguments("Program.RefLike").WithLocation(19, 9),
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "M1").WithArguments("Program.RefLike").WithLocation(20, 9),
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(22, 9),
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(23, 9)
[xUnit.net 00:00:07.57]       Actual:
[xUnit.net 00:00:07.57]                       // (15,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:07.57]                       //         M1(null, null);
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(15, 9),
[xUnit.net 00:00:07.57]                       // (16,12): error CS1503: Argument 1: cannot convert from '<null>' to 'in int arg1'
[xUnit.net 00:00:07.57]                       //         M1(null, 1);
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_BadArgType, "null").WithArguments("1", "<null>", "in int arg1").WithLocation(16, 12),
[xUnit.net 00:00:07.57]                       // (17,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:07.57]                       //         M1(new object(), default(RefLike));
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(17, 9),
[xUnit.net 00:00:07.57]                       // (19,9): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:07.57]                       //         M1(rl, rl);
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "M1").WithArguments("Program.RefLike").WithLocation(19, 9),
[xUnit.net 00:00:07.57]                       // (20,9): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:07.57]                       //         M1(in rl, in rl);
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "M1").WithArguments("Program.RefLike").WithLocation(20, 9),
[xUnit.net 00:00:07.57]                       // (22,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:07.57]                       //         M1(in y, in x);
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(22, 9),
[xUnit.net 00:00:07.57]                       // (23,9): error CS0411: The type arguments for method 'Program.M1<T>(in T arg1, in T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:07.57]                       //         M1(in y, x);  
[xUnit.net 00:00:07.57]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(23, 9)
[xUnit.net 00:00:07.57]       Diff:
[xUnit.net 00:00:07.57]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(15, 9)
[xUnit.net 00:00:07.57]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "null").WithArguments("1", "<null>", "in int arg1").WithLocation(16, 12)
[xUnit.net 00:00:07.57]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(17, 9)
[xUnit.net 00:00:07.57]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(22, 9)
[xUnit.net 00:00:07.57]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T arg1, in T arg2)").WithLocation(23, 9)
[xUnit.net 00:00:07.57]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(15, 9)
[xUnit.net 00:00:07.57]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "null").WithArguments("1", "<null>", "in int").WithLocation(16, 12)
[xUnit.net 00:00:07.57]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(17, 9)
[xUnit.net 00:00:07.57]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(22, 9)
[xUnit.net 00:00:07.57]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(in T, in T)").WithLocation(23, 9)
[xUnit.net 00:00:07.57]       Expected: True
[xUnit.net 00:00:07.57]       Actual:   False
[xUnit.net 00:00:07.57]       Stack Trace:
[xUnit.net 00:00:07.57]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.57]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.57]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.57]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.57]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10873,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceOnInErr()
[xUnit.net 00:00:07.61]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InvalidParamsPositionCSharp [FAIL]
[xUnit.net 00:00:07.61]       
[xUnit.net 00:00:07.61]       Expected:
[xUnit.net 00:00:07.61]                       Diagnostic(ErrorCode.ERR_ParamsLast, "params int[] vals"),
[xUnit.net 00:00:07.61]                       Diagnostic(ErrorCode.ERR_BadArgType, "1").WithArguments("1", "int", "params int[]").WithLocation(12, 13)
[xUnit.net 00:00:07.61]       Actual:
[xUnit.net 00:00:07.61]                       // (4,28): error CS0231: A params parameter must be the last parameter in a parameter list
[xUnit.net 00:00:07.61]                       //     public static void Goo(params int[] vals, bool truth)
[xUnit.net 00:00:07.61]                       Diagnostic(ErrorCode.ERR_ParamsLast, "params int[] vals").WithLocation(4, 28),
[xUnit.net 00:00:07.61]                       // (12,13): error CS1503: Argument 1: cannot convert from 'int' to 'params int[] vals'
[xUnit.net 00:00:07.61]                       //         Goo(1, true);
[xUnit.net 00:00:07.61]                       Diagnostic(ErrorCode.ERR_BadArgType, "1").WithArguments("1", "int", "params int[] vals").WithLocation(12, 13)
[xUnit.net 00:00:07.61]       Diff:
[xUnit.net 00:00:07.61]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "1").WithArguments("1", "int", "params int[] vals").WithLocation(12, 13)
[xUnit.net 00:00:07.61]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "1").WithArguments("1", "int", "params int[]").WithLocation(12, 13)
[xUnit.net 00:00:07.61]       Expected: True
[xUnit.net 00:00:07.61]       Actual:   False
[xUnit.net 00:00:07.61]       Stack Trace:
[xUnit.net 00:00:07.61]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.61]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.61]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.61]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.61]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8380,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InvalidParamsPositionCSharp()
[xUnit.net 00:00:07.63]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DelegateConversions [FAIL]
[xUnit.net 00:00:07.63]       
[xUnit.net 00:00:07.63]       Expected:
[xUnit.net 00:00:07.63]                       Diagnostic(ErrorCode.ERR_RefReadonlyNotField, "y").WithArguments("variable", "in int").WithLocation(13, 10),
[xUnit.net 00:00:07.63]                       Diagnostic(ErrorCode.ERR_RefLvalueExpected, "1").WithLocation(14, 10)
[xUnit.net 00:00:07.63]       Actual:
[xUnit.net 00:00:07.63]                       // (13,10): error CS8329: Cannot use variable 'in int y' as a ref or out value because it is a readonly variable
[xUnit.net 00:00:07.63]                       //          y.R_extension(); // error 1
[xUnit.net 00:00:07.63]                       Diagnostic(ErrorCode.ERR_RefReadonlyNotField, "y").WithArguments("variable", "in int y").WithLocation(13, 10),
[xUnit.net 00:00:07.63]                       // (14,10): error CS1510: A ref or out value must be an assignable variable
[xUnit.net 00:00:07.63]                       //          1.R_extension(); // error 2
[xUnit.net 00:00:07.63]                       Diagnostic(ErrorCode.ERR_RefLvalueExpected, "1").WithLocation(14, 10)
[xUnit.net 00:00:07.63]       Diff:
[xUnit.net 00:00:07.63]       ++>                 Diagnostic(ErrorCode.ERR_RefReadonlyNotField, "y").WithArguments("variable", "in int y").WithLocation(13, 10)
[xUnit.net 00:00:07.63]       -->                 Diagnostic(ErrorCode.ERR_RefReadonlyNotField, "y").WithArguments("variable", "in int").WithLocation(13, 10)
[xUnit.net 00:00:07.63]       Expected: True
[xUnit.net 00:00:07.63]       Actual:   False
[xUnit.net 00:00:07.63]       Stack Trace:
[xUnit.net 00:00:07.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.63]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11099,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DelegateConversions()
[xUnit.net 00:00:07.65]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_OverloadResolution_SingleArgument_ErrorCases [FAIL]
[xUnit.net 00:00:07.65]       
[xUnit.net 00:00:07.65]       Expected:
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "10L").WithArguments("1", "out"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "c").WithArguments("1", "out"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char)", "IRef1.M6(ref long)"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char)", "IRef1.M6(ref long)"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char"),
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref char")
[xUnit.net 00:00:07.65]       Actual:
[xUnit.net 00:00:07.65]                       // (79,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.65]                       //        ref1.M1(10L);      // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int x").WithLocation(79, 16),
[xUnit.net 00:00:07.65]                       // (80,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.65]                       //        ref1.M1(l);        // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(80, 16),
[xUnit.net 00:00:07.65]                       // (81,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M1(ref l);    // CS1615
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(81, 20),
[xUnit.net 00:00:07.65]                       // (82,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M1(ref c);    // CS1615
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(82, 20),
[xUnit.net 00:00:07.65]                       // (89,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M2(ref l);    // CS1615
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(89, 20),
[xUnit.net 00:00:07.65]                       // (90,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M2(ref c);    // CS1615
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(90, 20),
[xUnit.net 00:00:07.65]                       // (97,16): error CS1503: Argument 1: cannot convert from 'long' to 'char x'
[xUnit.net 00:00:07.65]                       //        ref1.M3(10L);      // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char x").WithLocation(97, 16),
[xUnit.net 00:00:07.65]                       // (98,16): error CS1503: Argument 1: cannot convert from 'long' to 'char x'
[xUnit.net 00:00:07.65]                       //        ref1.M3(l);        // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char x").WithLocation(98, 16),
[xUnit.net 00:00:07.65]                       // (99,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M3(ref l);    // CS1615
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(99, 20),
[xUnit.net 00:00:07.65]                       // (100,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M3(ref c);    // CS1615
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(100, 20),
[xUnit.net 00:00:07.65]                       // (107,16): error CS1620: Argument 1 must be passed with the 'out' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M4(10L);      // CS1620
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "10L").WithArguments("1", "out").WithLocation(107, 16),
[xUnit.net 00:00:07.65]                       // (108,16): error CS1620: Argument 1 must be passed with the 'out' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M4(l);        // CS1620
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out").WithLocation(108, 16),
[xUnit.net 00:00:07.65]                       // (109,20): error CS1620: Argument 1 must be passed with the 'out' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M4(ref l);    // CS1620
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "out").WithLocation(109, 20),
[xUnit.net 00:00:07.65]                       // (110,20): error CS1620: Argument 1 must be passed with the 'out' keyword
[xUnit.net 00:00:07.65]                       //        ref1.M4(ref c);    // CS1620
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgRef, "c").WithArguments("1", "out").WithLocation(110, 20),
[xUnit.net 00:00:07.65]                       // (117,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
[xUnit.net 00:00:07.65]                       //        ref1.M5(10);       // CS0121
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(117, 13),
[xUnit.net 00:00:07.65]                       // (118,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
[xUnit.net 00:00:07.65]                       //        ref1.M5('c');      // CS0121
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(118, 13),
[xUnit.net 00:00:07.65]                       // (119,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
[xUnit.net 00:00:07.65]                       //        ref1.M5(i);        // CS0121
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(119, 13),
[xUnit.net 00:00:07.65]                       // (120,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M5(ref int x)' and 'IRef1.M5(ref long x)'
[xUnit.net 00:00:07.65]                       //        ref1.M5(c);        // CS0121
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(120, 13),
[xUnit.net 00:00:07.65]                       // (121,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
[xUnit.net 00:00:07.65]                       //        ref1.M5(ref c);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(121, 20),
[xUnit.net 00:00:07.65]                       // (128,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref char x)' and 'IRef1.M6(ref long x)'
[xUnit.net 00:00:07.65]                       //        ref1.M6('c');      // CS0121
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char x)", "IRef1.M6(ref long x)").WithLocation(128, 13),
[xUnit.net 00:00:07.65]                       // (129,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref char x)' and 'IRef1.M6(ref long x)'
[xUnit.net 00:00:07.65]                       //        ref1.M6(c);        // CS0121
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char x)", "IRef1.M6(ref long x)").WithLocation(129, 13),
[xUnit.net 00:00:07.65]                       // (130,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref char x'
[xUnit.net 00:00:07.65]                       //        ref1.M6(ref i);    // CS1503   
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char x").WithLocation(130, 20),
[xUnit.net 00:00:07.65]                       // (137,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long x'
[xUnit.net 00:00:07.65]                       //        ref1.M7(ref i);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(137, 20),
[xUnit.net 00:00:07.65]                       // (138,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long x'
[xUnit.net 00:00:07.65]                       //        ref1.M7(ref c);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long x").WithLocation(138, 20),
[xUnit.net 00:00:07.65]                       // (145,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long x'
[xUnit.net 00:00:07.65]                       //        ref1.M8(ref i);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(145, 20),
[xUnit.net 00:00:07.65]                       // (146,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long x'
[xUnit.net 00:00:07.65]                       //        ref1.M8(ref c);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long x").WithLocation(146, 20),
[xUnit.net 00:00:07.65]                       // (153,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref char x'
[xUnit.net 00:00:07.65]                       //        ref1.M9(ref i);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char x").WithLocation(153, 20),
[xUnit.net 00:00:07.65]                       // (154,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref char x'
[xUnit.net 00:00:07.65]                       //        ref1.M9(ref l);    // CS1503
[xUnit.net 00:00:07.65]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref char x").WithLocation(154, 20)
[xUnit.net 00:00:07.65]       Diff:
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int x").WithLocation(79, 16)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(80, 16)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char x").WithLocation(97, 16)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char x").WithLocation(98, 16)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(117, 13)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(118, 13)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(119, 13)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int x)", "IRef1.M5(ref long x)").WithLocation(120, 13)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(121, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char x)", "IRef1.M6(ref long x)").WithLocation(128, 13)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char x)", "IRef1.M6(ref long x)").WithLocation(129, 13)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char x").WithLocation(130, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(137, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long x").WithLocation(138, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(145, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long x").WithLocation(146, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char x").WithLocation(153, 20)
[xUnit.net 00:00:07.65]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref char x").WithLocation(154, 20)
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M5").WithArguments("IRef1.M5(ref int)", "IRef1.M5(ref long)")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char)", "IRef1.M6(ref long)")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref char)", "IRef1.M6(ref long)")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref char")
[xUnit.net 00:00:07.65]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref char")
[xUnit.net 00:00:07.65]       Expected: True
[xUnit.net 00:00:07.65]       Actual:   False
[xUnit.net 00:00:07.65]       Stack Trace:
[xUnit.net 00:00:07.65]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.65]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.65]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.65]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.65]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(3715,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_OverloadResolution_SingleArgument_ErrorCases()
[xUnit.net 00:00:07.72]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug9583 [FAIL]
[xUnit.net 00:00:07.72]       
[xUnit.net 00:00:07.72]       Expected:
[xUnit.net 00:00:07.72]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Goo").WithArguments("C.Goo<T>(params T[])").WithLocation(6, 9)
[xUnit.net 00:00:07.72]       Actual:
[xUnit.net 00:00:07.72]                       // (6,9): error CS0411: The type arguments for method 'C.Goo<T>(params T[] x)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:07.72]                       //         Goo();
[xUnit.net 00:00:07.72]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Goo").WithArguments("C.Goo<T>(params T[] x)").WithLocation(6, 9)
[xUnit.net 00:00:07.72]       Diff:
[xUnit.net 00:00:07.72]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Goo").WithArguments("C.Goo<T>(params T[] x)").WithLocation(6, 9)
[xUnit.net 00:00:07.72]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Goo").WithArguments("C.Goo<T>(params T[])").WithLocation(6, 9)
[xUnit.net 00:00:07.72]       Expected: True
[xUnit.net 00:00:07.72]       Actual:   False
[xUnit.net 00:00:07.72]       Stack Trace:
[xUnit.net 00:00:07.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.72]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1527,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug9583()
[xUnit.net 00:00:07.95]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_OverloadResolution_MultipleArguments_ErrorCases [FAIL]
[xUnit.net 00:00:07.95]       
[xUnit.net 00:00:07.95]       Expected:
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.95]       Actual:
[xUnit.net 00:00:07.95]                       // (80,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.95]                       //        ref1.M1(l, i);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(80, 16),
[xUnit.net 00:00:07.95]                       // (81,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.95]                       //        ref1.M1(l, l);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(81, 16),
[xUnit.net 00:00:07.95]                       // (82,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.95]                       //        ref1.M1(l, c);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(82, 16),
[xUnit.net 00:00:07.95]                       // (83,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref i, l);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(83, 20),
[xUnit.net 00:00:07.95]                       // (84,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref l, i);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(84, 20),
[xUnit.net 00:00:07.95]                       // (85,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref l, l);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(85, 20),
[xUnit.net 00:00:07.95]                       // (86,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref l, c);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(86, 20),
[xUnit.net 00:00:07.95]                       // (87,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref c, i);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(87, 20),
[xUnit.net 00:00:07.95]                       // (88,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref c, l);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(88, 20),
[xUnit.net 00:00:07.95]                       // (89,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M1(ref c, c);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(89, 20),
[xUnit.net 00:00:07.95]                       // (96,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(i, l);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(96, 19),
[xUnit.net 00:00:07.95]                       // (97,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.95]                       //        ref1.M2(l, i);      // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(97, 16),
[xUnit.net 00:00:07.95]                       // (97,19): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(l, i);      // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(97, 19),
[xUnit.net 00:00:07.95]                       // (98,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.95]                       //        ref1.M2(l, l);      // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(98, 16),
[xUnit.net 00:00:07.95]                       // (98,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(l, l);      // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(98, 19),
[xUnit.net 00:00:07.95]                       // (99,16): error CS1503: Argument 1: cannot convert from 'long' to 'int x'
[xUnit.net 00:00:07.95]                       //        ref1.M2(l, c);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(99, 16),
[xUnit.net 00:00:07.95]                       // (100,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(c, l);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(100, 19),
[xUnit.net 00:00:07.95]                       // (101,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref i, l);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(101, 20),
[xUnit.net 00:00:07.95]                       // (101,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref i, l);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(101, 23),
[xUnit.net 00:00:07.95]                       // (102,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref l, i);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(102, 20),
[xUnit.net 00:00:07.95]                       // (102,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref l, i);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(102, 23),
[xUnit.net 00:00:07.95]                       // (103,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref l, l);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(103, 20),
[xUnit.net 00:00:07.95]                       // (103,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref l, l);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(103, 23),
[xUnit.net 00:00:07.95]                       // (104,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref l, c);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(104, 20),
[xUnit.net 00:00:07.95]                       // (105,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref c, i);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(105, 20),
[xUnit.net 00:00:07.95]                       // (105,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref c, i);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(105, 23),
[xUnit.net 00:00:07.95]                       // (106,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref c, l);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(106, 20),
[xUnit.net 00:00:07.95]                       // (106,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref c, l);  // CS1615, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(106, 23),
[xUnit.net 00:00:07.95]                       // (107,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M2(ref c, c);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(107, 20),
[xUnit.net 00:00:07.95]                       // (114,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(i, l);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(114, 19),
[xUnit.net 00:00:07.95]                       // (115,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M3(l, l);      // CS1620, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(115, 16),
[xUnit.net 00:00:07.95]                       // (115,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(l, l);      // CS1620, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(115, 19),
[xUnit.net 00:00:07.95]                       // (116,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(c, l);      // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(116, 19),
[xUnit.net 00:00:07.95]                       // (117,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref i, i);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(117, 23),
[xUnit.net 00:00:07.95]                       // (118,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref i, l);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(118, 23),
[xUnit.net 00:00:07.95]                       // (119,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int x'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref l, l);  // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(119, 20),
[xUnit.net 00:00:07.95]                       // (119,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref l, l);  // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(119, 23),
[xUnit.net 00:00:07.95]                       // (120,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref c, i);  // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(120, 20),
[xUnit.net 00:00:07.95]                       // (120,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref c, i);  // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(120, 23),
[xUnit.net 00:00:07.95]                       // (121,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref c, l);  // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(121, 20),
[xUnit.net 00:00:07.95]                       // (121,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref c, l);  // CS1503, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(121, 23),
[xUnit.net 00:00:07.95]                       // (122,20): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref int x'
[xUnit.net 00:00:07.95]                       //        ref1.M3(ref c, c);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(122, 20),
[xUnit.net 00:00:07.95]                       // (129,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M4(i, i);      // CS0121
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(129, 13),
[xUnit.net 00:00:07.95]                       // (130,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M4(i, c);      // CS0121
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(130, 13),
[xUnit.net 00:00:07.95]                       // (131,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, i);      // CS1620
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(131, 16),
[xUnit.net 00:00:07.95]                       // (132,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, l);      // CS1620
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(132, 16),
[xUnit.net 00:00:07.95]                       // (133,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, c);      // CS1620
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(133, 16),
[xUnit.net 00:00:07.95]                       // (134,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M4(c, i);      // CS0121
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(134, 13),
[xUnit.net 00:00:07.95]                       // (135,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M4(ref int x, long y)' and 'IRef1.M4(ref int x, ref int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M4(c, c);      // CS0121
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(135, 13),
[xUnit.net 00:00:07.95]                       // (136,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, ref i);  // CS1620, CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(136, 16),
[xUnit.net 00:00:07.95]                       // (136,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, ref i);  // CS1620, CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref").WithLocation(136, 23),
[xUnit.net 00:00:07.95]                       // (137,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(i, ref l);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(137, 23),
[xUnit.net 00:00:07.95]                       // (138,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, ref l);  // CS1620
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(138, 16),
[xUnit.net 00:00:07.95]                       // (138,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(l, ref l);  // CS1620
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(138, 23),
[xUnit.net 00:00:07.95]                       // (139,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M4(c, ref l);  // CS1615
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(139, 23),
[xUnit.net 00:00:07.95]                       // (146,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M5(i, l);    // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(146, 19),
[xUnit.net 00:00:07.95]                       // (147,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M5(l, l);    // CS1620, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(147, 16),
[xUnit.net 00:00:07.95]                       // (147,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M5(l, l);    // CS1620, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(147, 19),
[xUnit.net 00:00:07.95]                       // (148,19): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M5(c, l);    // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(148, 19),
[xUnit.net 00:00:07.95]                       // (149,23): error CS1503: Argument 2: cannot convert from 'int' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M5(ref i, i);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(149, 23),
[xUnit.net 00:00:07.95]                       // (150,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M5(ref i, l);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(150, 23),
[xUnit.net 00:00:07.95]                       // (151,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int x'
[xUnit.net 00:00:07.95]                       //        ref1.M5(ref l, l);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(151, 20),
[xUnit.net 00:00:07.95]                       // (151,23): error CS1503: Argument 2: cannot convert from 'long' to 'char y'
[xUnit.net 00:00:07.95]                       //        ref1.M5(ref l, l);  // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(151, 23),
[xUnit.net 00:00:07.95]                       // (158,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M6(i, i);    // CS0121
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(158, 13),
[xUnit.net 00:00:07.95]                       // (159,19): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
[xUnit.net 00:00:07.95]                       //        ref1.M6(i, l);    // CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(159, 19),
[xUnit.net 00:00:07.95]                       // (160,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M6(i, c);    // CS0121
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(160, 13),
[xUnit.net 00:00:07.95]                       // (161,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.95]                       //        ref1.M6(l, l);    // CS1620, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(161, 16),
[xUnit.net 00:00:07.95]                       // (161,19): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
[xUnit.net 00:00:07.95]                       //        ref1.M6(l, l);    // CS1620, CS1503
[xUnit.net 00:00:07.95]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(161, 19),
[xUnit.net 00:00:07.95]                       // (162,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
[xUnit.net 00:00:07.95]                       //        ref1.M6(c, i);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(162, 13),
[xUnit.net 00:00:07.96]                       // (163,19): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
[xUnit.net 00:00:07.96]                       //        ref1.M6(c, l);    // CS1503
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(163, 19),
[xUnit.net 00:00:07.96]                       // (164,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M6(ref int x, int y)' and 'IRef1.M6(ref long x, int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M6(c, c);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(164, 13),
[xUnit.net 00:00:07.96]                       // (165,23): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
[xUnit.net 00:00:07.96]                       //        ref1.M6(ref i, l);  // CS1503
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(165, 23),
[xUnit.net 00:00:07.96]                       // (166,20): error CS1503: Argument 1: cannot convert from 'ref long' to 'ref int x'
[xUnit.net 00:00:07.96]                       //        ref1.M6(ref l, l);  // CS1503, CS1503
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(166, 20),
[xUnit.net 00:00:07.96]                       // (166,23): error CS1503: Argument 2: cannot convert from 'long' to 'int y'
[xUnit.net 00:00:07.96]                       //        ref1.M6(ref l, l);  // CS1503, CS1503
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(166, 23),
[xUnit.net 00:00:07.96]                       // (173,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M7(i, i);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(173, 13),
[xUnit.net 00:00:07.96]                       // (174,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M7(i, c);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(174, 13),
[xUnit.net 00:00:07.96]                       // (175,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M7(l, l);    // CS1620
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(175, 16),
[xUnit.net 00:00:07.96]                       // (176,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M7(c, i);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(176, 13),
[xUnit.net 00:00:07.96]                       // (177,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M7(ref int x, long y)' and 'IRef1.M7(ref long x, ref int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M7(c, c);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(177, 13),
[xUnit.net 00:00:07.96]                       // (178,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M7(i, ref l);  // CS1615
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(178, 23),
[xUnit.net 00:00:07.96]                       // (179,16): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M7(l, ref l);  // CS1620, CS1615
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("1", "ref").WithLocation(179, 16),
[xUnit.net 00:00:07.96]                       // (179,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M7(l, ref l);  // CS1620, CS1615
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(179, 23),
[xUnit.net 00:00:07.96]                       // (180,23): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M7(c, ref l);  // CS1615
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("2", "ref").WithLocation(180, 23),
[xUnit.net 00:00:07.96]                       // (181,27): error CS1615: Argument 2 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M7(ref i, ref i);  // CS1615
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("2", "ref").WithLocation(181, 27),
[xUnit.net 00:00:07.96]                       // (188,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M8(i, l);    // CS1620
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(188, 19),
[xUnit.net 00:00:07.96]                       // (189,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long x, ref int y)' and 'IRef1.M8(ref long x, int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M8(i, c);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(189, 13),
[xUnit.net 00:00:07.96]                       // (190,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long x, ref int y)' and 'IRef1.M8(ref long x, int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M8(l, i);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(190, 13),
[xUnit.net 00:00:07.96]                       // (191,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M8(l, l);    // CS1620
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(191, 19),
[xUnit.net 00:00:07.96]                       // (192,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.96]                       //        ref1.M8(c, l);    // CS1620
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(192, 19),
[xUnit.net 00:00:07.96]                       // (193,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M8(long x, ref int y)' and 'IRef1.M8(ref long x, int y)'
[xUnit.net 00:00:07.96]                       //        ref1.M8(c, c);    // CS0121
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(193, 13),
[xUnit.net 00:00:07.96]                       // (194,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.96]                       //        ref1.M8(i, ref l);   // CS1503
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(194, 23),
[xUnit.net 00:00:07.96]                       // (195,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.96]                       //        ref1.M8(l, ref l);   // CS1503
[xUnit.net 00:00:07.96]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(195, 23),
[xUnit.net 00:00:07.97]                       // (196,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.97]                       //        ref1.M8(c, ref l);   // CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(196, 23),
[xUnit.net 00:00:07.97]                       // (197,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, i);   // CS1615
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(197, 20),
[xUnit.net 00:00:07.97]                       // (198,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, l);   // CS1615, CS1620
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(198, 20),
[xUnit.net 00:00:07.97]                       // (198,23): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, l);   // CS1615, CS1620
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(198, 23),
[xUnit.net 00:00:07.97]                       // (199,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, c);   // CS1615
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(199, 20),
[xUnit.net 00:00:07.97]                       // (200,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref l, l);   // CS1615, CS1620
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(200, 20),
[xUnit.net 00:00:07.97]                       // (200,23): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref l, l);   // CS1615, CS1620
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(200, 23),
[xUnit.net 00:00:07.97]                       // (201,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, ref i);   // CS1615
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(201, 20),
[xUnit.net 00:00:07.97]                       // (202,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, ref l);   // CS1615, CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(202, 20),
[xUnit.net 00:00:07.97]                       // (202,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref i, ref l);   // CS1615, CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(202, 27),
[xUnit.net 00:00:07.97]                       // (203,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref l, ref i);   // CS1615
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(203, 20),
[xUnit.net 00:00:07.97]                       // (204,20): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref l, ref l);   // CS1615, CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(204, 20),
[xUnit.net 00:00:07.97]                       // (204,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.97]                       //        ref1.M8(ref l, ref l);   // CS1615, CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(204, 27),
[xUnit.net 00:00:07.97]                       // (211,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
[xUnit.net 00:00:07.97]                       //        ref1.M9(i, i);    // CS0121
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(211, 13),
[xUnit.net 00:00:07.97]                       // (212,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
[xUnit.net 00:00:07.97]                       //        ref1.M9(i, c);    // CS0121
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(212, 13),
[xUnit.net 00:00:07.97]                       // (213,19): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M9(l, l);    // CS1620
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(213, 19),
[xUnit.net 00:00:07.97]                       // (214,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
[xUnit.net 00:00:07.97]                       //        ref1.M9(c, i);    // CS0121
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(214, 13),
[xUnit.net 00:00:07.97]                       // (215,13): error CS0121: The call is ambiguous between the following methods or properties: 'IRef1.M9(ref long x, ref int y)' and 'IRef1.M9(ref int x, ref long y)'
[xUnit.net 00:00:07.97]                       //        ref1.M9(c, c);    // CS0121
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(215, 13),
[xUnit.net 00:00:07.97]                       // (216,23): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.97]                       //        ref1.M9(l, ref l);   // CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(216, 23),
[xUnit.net 00:00:07.97]                       // (217,23): error CS1620: Argument 2 must be passed with the 'ref' keyword
[xUnit.net 00:00:07.97]                       //        ref1.M9(ref l, l);   // CS1620
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgRef, "l").WithArguments("2", "ref").WithLocation(217, 23),
[xUnit.net 00:00:07.97]                       // (218,20): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long x'
[xUnit.net 00:00:07.97]                       //        ref1.M9(ref i, ref i);   // CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(218, 20),
[xUnit.net 00:00:07.97]                       // (219,27): error CS1503: Argument 2: cannot convert from 'ref long' to 'ref int y'
[xUnit.net 00:00:07.97]                       //        ref1.M9(ref l, ref l);   // CS1503
[xUnit.net 00:00:07.97]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(219, 27)
[xUnit.net 00:00:07.97]       Diff:
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(80, 16)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(81, 16)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(82, 16)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(96, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(97, 16)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(97, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(98, 16)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(98, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int x").WithLocation(99, 16)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(100, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(101, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(102, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(103, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(105, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(106, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(114, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(115, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(116, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(117, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(118, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(119, 20)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(119, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(120, 20)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(120, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(121, 20)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(121, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int x").WithLocation(122, 20)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(129, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(130, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(134, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int x, long y)", "IRef1.M4(ref int x, ref int y)").WithLocation(135, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(146, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(147, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(148, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char y").WithLocation(149, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(150, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(151, 20)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char y").WithLocation(151, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(158, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(159, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(160, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(161, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(162, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(163, 19)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int x, int y)", "IRef1.M6(ref long x, int y)").WithLocation(164, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(165, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int x").WithLocation(166, 20)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int y").WithLocation(166, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(173, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(174, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(176, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int x, long y)", "IRef1.M7(ref long x, ref int y)").WithLocation(177, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(189, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(190, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long x, ref int y)", "IRef1.M8(ref long x, int y)").WithLocation(193, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(194, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(195, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(196, 23)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(202, 27)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(204, 27)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(211, 13)
[xUnit.net 00:00:07.97]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(212, 13)
[xUnit.net 00:00:07.98]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(214, 13)
[xUnit.net 00:00:07.98]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long x, ref int y)", "IRef1.M9(ref int x, ref long y)").WithLocation(215, 13)
[xUnit.net 00:00:07.98]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(216, 23)
[xUnit.net 00:00:07.98]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long x").WithLocation(218, 20)
[xUnit.net 00:00:07.98]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int y").WithLocation(219, 27)
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M4").WithArguments("IRef1.M4(ref int, long)", "IRef1.M4(ref int, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("2", "int", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "char")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M6").WithArguments("IRef1.M6(ref int, int)", "IRef1.M6(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "long", "int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M7").WithArguments("IRef1.M7(ref int, long)", "IRef1.M7(ref long, ref int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M8").WithArguments("IRef1.M8(long, ref int)", "IRef1.M8(ref long, int)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M9").WithArguments("IRef1.M9(ref long, ref int)", "IRef1.M9(ref int, ref long)")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:07.98]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("2", "ref long", "ref int")
[xUnit.net 00:00:07.98]       Expected: True
[xUnit.net 00:00:07.98]       Actual:   False
[xUnit.net 00:00:07.98]       Stack Trace:
[xUnit.net 00:00:07.98]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:07.98]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.98]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.98]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:07.98]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(5909,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_OverloadResolution_MultipleArguments_ErrorCases()
[xUnit.net 00:00:08.32]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.IndexerWithoutAccessors [FAIL]
[xUnit.net 00:00:08.32]       
[xUnit.net 00:00:08.32]       Expected:
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_LbraceExpected, ""),
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_RbraceExpected, ""),
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_RbraceExpected, ""),
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_PropertyWithNoAccessors, "this").WithArguments("C.this[string]"),
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "A.this[string].set")
[xUnit.net 00:00:08.32]       Actual:
[xUnit.net 00:00:08.32]                       // (18,41): error CS1514: { expected
[xUnit.net 00:00:08.32]                       //     public override int this[string arg]
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_LbraceExpected, "").WithLocation(18, 41),
[xUnit.net 00:00:08.32]                       // (18,41): error CS1513: } expected
[xUnit.net 00:00:08.32]                       //     public override int this[string arg]
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_RbraceExpected, "").WithLocation(18, 41),
[xUnit.net 00:00:08.32]                       // (18,41): error CS1513: } expected
[xUnit.net 00:00:08.32]                       //     public override int this[string arg]
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_RbraceExpected, "").WithLocation(18, 41),
[xUnit.net 00:00:08.32]                       // (16,7): error CS0534: 'C' does not implement inherited abstract member 'A.this[string arg].set'
[xUnit.net 00:00:08.32]                       // class C : A
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "A.this[string arg].set").WithLocation(16, 7),
[xUnit.net 00:00:08.32]                       // (18,25): error CS0548: 'C.this[string arg]': property or indexer must have at least one accessor
[xUnit.net 00:00:08.32]                       //     public override int this[string arg]
[xUnit.net 00:00:08.32]                       Diagnostic(ErrorCode.ERR_PropertyWithNoAccessors, "this").WithArguments("C.this[string arg]").WithLocation(18, 25)
[xUnit.net 00:00:08.32]       Diff:
[xUnit.net 00:00:08.32]       ++>                 Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "A.this[string arg].set").WithLocation(16, 7)
[xUnit.net 00:00:08.32]       ++>                 Diagnostic(ErrorCode.ERR_PropertyWithNoAccessors, "this").WithArguments("C.this[string arg]").WithLocation(18, 25)
[xUnit.net 00:00:08.32]       -->                 Diagnostic(ErrorCode.ERR_PropertyWithNoAccessors, "this").WithArguments("C.this[string]")
[xUnit.net 00:00:08.32]       -->                 Diagnostic(ErrorCode.ERR_UnimplementedAbstractMethod, "C").WithArguments("C", "A.this[string].set")
[xUnit.net 00:00:08.32]       Expected: True
[xUnit.net 00:00:08.32]       Actual:   False
[xUnit.net 00:00:08.32]       Stack Trace:
[xUnit.net 00:00:08.32]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.32]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.32]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.32]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.32]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6917,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.IndexerWithoutAccessors()
[xUnit.net 00:00:08.62]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.OverloadResolution649807 [FAIL]
[xUnit.net 00:00:08.62]       
[xUnit.net 00:00:08.62]       Expected:
[xUnit.net 00:00:08.62]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Goo").WithArguments("Test.Goo(Test.nongenerics, dynamic)", "Test.Goo<T>(Test.generics<T>, dynamic)")
[xUnit.net 00:00:08.62]       Actual:
[xUnit.net 00:00:08.62]                       // (20,16): error CS0121: The call is ambiguous between the following methods or properties: 'Test.Goo(Test.nongenerics Meth, dynamic id)' and 'Test.Goo<T>(Test.generics<T> Meth, dynamic id)'
[xUnit.net 00:00:08.62]                       //         return Goo(method, "abc");
[xUnit.net 00:00:08.62]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Goo").WithArguments("Test.Goo(Test.nongenerics Meth, dynamic id)", "Test.Goo<T>(Test.generics<T> Meth, dynamic id)").WithLocation(20, 16)
[xUnit.net 00:00:08.62]       Diff:
[xUnit.net 00:00:08.62]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Goo").WithArguments("Test.Goo(Test.nongenerics Meth, dynamic id)", "Test.Goo<T>(Test.generics<T> Meth, dynamic id)").WithLocation(20, 16)
[xUnit.net 00:00:08.62]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Goo").WithArguments("Test.Goo(Test.nongenerics, dynamic)", "Test.Goo<T>(Test.generics<T>, dynamic)")
[xUnit.net 00:00:08.62]       Expected: True
[xUnit.net 00:00:08.62]       Actual:   False
[xUnit.net 00:00:08.62]       Stack Trace:
[xUnit.net 00:00:08.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.62]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7084,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.OverloadResolution649807()
[xUnit.net 00:00:08.70]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_ERR_ComImportWithImpl [FAIL]
[xUnit.net 00:00:08.70]       
[xUnit.net 00:00:08.70]       Expected:
[xUnit.net 00:00:08.70]                       Diagnostic(ErrorCode.ERR_ComImportWithImpl, "M").WithArguments("Ref1Impl.M(ref int, int)", "Ref1Impl").WithLocation(13, 16)
[xUnit.net 00:00:08.70]       Actual:
[xUnit.net 00:00:08.70]                       // (13,16): error CS0423: Since 'Ref1Impl' has the ComImport attribute, 'Ref1Impl.M(ref int x, int y)' must be extern or abstract
[xUnit.net 00:00:08.70]                       //     public int M(ref int x, int y) { return x + y; }
[xUnit.net 00:00:08.70]                       Diagnostic(ErrorCode.ERR_ComImportWithImpl, "M").WithArguments("Ref1Impl.M(ref int x, int y)", "Ref1Impl").WithLocation(13, 16)
[xUnit.net 00:00:08.70]       Diff:
[xUnit.net 00:00:08.70]       ++>                 Diagnostic(ErrorCode.ERR_ComImportWithImpl, "M").WithArguments("Ref1Impl.M(ref int x, int y)", "Ref1Impl").WithLocation(13, 16)
[xUnit.net 00:00:08.70]       -->                 Diagnostic(ErrorCode.ERR_ComImportWithImpl, "M").WithArguments("Ref1Impl.M(ref int, int)", "Ref1Impl").WithLocation(13, 16)
[xUnit.net 00:00:08.70]       Expected: True
[xUnit.net 00:00:08.70]       Actual:   False
[xUnit.net 00:00:08.70]       Stack Trace:
[xUnit.net 00:00:08.70]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.70]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.70]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.70]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.70]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(2782,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_ERR_ComImportWithImpl()
[xUnit.net 00:00:08.71]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_4 [FAIL]
[xUnit.net 00:00:08.71]       
[xUnit.net 00:00:08.71]       Expected:
[xUnit.net 00:00:08.71]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])").WithLocation(25, 38)
[xUnit.net 00:00:08.71]       Actual:
[xUnit.net 00:00:08.71]                       // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev)' and 'Program.Bar<T, V>.Create(Func<T, bool> filter, params int[] dummy)'
[xUnit.net 00:00:08.71]                       //             var x = Bar<Goo, double>.Create(Goo.IsThing);
[xUnit.net 00:00:08.71]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] dummy)").WithLocation(25, 38)
[xUnit.net 00:00:08.71]       Diff:
[xUnit.net 00:00:08.71]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] dummy)").WithLocation(25, 38)
[xUnit.net 00:00:08.71]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])").WithLocation(25, 38)
[xUnit.net 00:00:08.71]       Expected: True
[xUnit.net 00:00:08.71]       Actual:   False
[xUnit.net 00:00:08.71]       Stack Trace:
[xUnit.net 00:00:08.71]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.71]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.71]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.71]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.71]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8040,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_4()
[xUnit.net 00:00:08.80]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterTasklikeType [FAIL]
[xUnit.net 00:00:08.80]       
[xUnit.net 00:00:08.80]       Expected:
[xUnit.net 00:00:08.80]                       Diagnostic(ErrorCode.ERR_AmbigCall, "h").WithArguments("C.h<T>(System.Func<System.Threading.Tasks.Task<T>>)", "C.h<T>(System.Func<MyTask<T>>)").WithLocation(9, 9)
[xUnit.net 00:00:08.80]       Actual:
[xUnit.net 00:00:08.80]                       // (9,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.h<T>(Func<Task<T>> lambda)' and 'C.h<T>(Func<MyTask<T>> lambda)'
[xUnit.net 00:00:08.80]                       //         h(async () => { await (Task)null; return 1; });
[xUnit.net 00:00:08.80]                       Diagnostic(ErrorCode.ERR_AmbigCall, "h").WithArguments("C.h<T>(System.Func<System.Threading.Tasks.Task<T>> lambda)", "C.h<T>(System.Func<MyTask<T>> lambda)").WithLocation(9, 9)
[xUnit.net 00:00:08.80]       Diff:
[xUnit.net 00:00:08.80]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "h").WithArguments("C.h<T>(System.Func<System.Threading.Tasks.Task<T>> lambda)", "C.h<T>(System.Func<MyTask<T>> lambda)").WithLocation(9, 9)
[xUnit.net 00:00:08.80]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "h").WithArguments("C.h<T>(System.Func<System.Threading.Tasks.Task<T>>)", "C.h<T>(System.Func<MyTask<T>>)").WithLocation(9, 9)
[xUnit.net 00:00:08.80]       Expected: True
[xUnit.net 00:00:08.80]       Actual:   False
[xUnit.net 00:00:08.80]       Stack Trace:
[xUnit.net 00:00:08.80]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.80]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.80]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.80]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.80]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(517,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterTasklikeType()
[xUnit.net 00:00:08.81]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TieBreakOnNumberOfDeclaredParameters_03 [FAIL]
[xUnit.net 00:00:08.81]       
[xUnit.net 00:00:08.81]       Expected:
[xUnit.net 00:00:08.81]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Test2").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test2(int, int)", "VS2015CompilerBug.VS2015CompilerBug.Test2(int, int, int)").WithLocation(9, 39),
[xUnit.net 00:00:08.81]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Test3").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test3(int, int, int, int)", "VS2015CompilerBug.VS2015CompilerBug.Test3(int, int, int)").WithLocation(10, 39)
[xUnit.net 00:00:08.81]       Actual:
[xUnit.net 00:00:08.81]                       // (9,39): error CS0121: The call is ambiguous between the following methods or properties: 'VS2015CompilerBug.Test2(int x, int y)' and 'VS2015CompilerBug.Test2(int x, int y, int z)'
[xUnit.net 00:00:08.81]                       //             (new VS2015CompilerBug()).Test2(1);   
[xUnit.net 00:00:08.81]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Test2").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test2(int x, int y)", "VS2015CompilerBug.VS2015CompilerBug.Test2(int x, int y, int z)").WithLocation(9, 39),
[xUnit.net 00:00:08.81]                       // (10,39): error CS0121: The call is ambiguous between the following methods or properties: 'VS2015CompilerBug.Test3(int x, int y, int z, int u)' and 'VS2015CompilerBug.Test3(int x, int y, int z)'
[xUnit.net 00:00:08.81]                       //             (new VS2015CompilerBug()).Test3(1, 2);   
[xUnit.net 00:00:08.81]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Test3").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test3(int x, int y, int z, int u)", "VS2015CompilerBug.VS2015CompilerBug.Test3(int x, int y, int z)").WithLocation(10, 39)
[xUnit.net 00:00:08.81]       Diff:
[xUnit.net 00:00:08.81]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Test2").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test2(int x, int y)", "VS2015CompilerBug.VS2015CompilerBug.Test2(int x, int y, int z)").WithLocation(9, 39)
[xUnit.net 00:00:08.81]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Test3").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test3(int x, int y, int z, int u)", "VS2015CompilerBug.VS2015CompilerBug.Test3(int x, int y, int z)").WithLocation(10, 39)
[xUnit.net 00:00:08.81]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Test2").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test2(int, int)", "VS2015CompilerBug.VS2015CompilerBug.Test2(int, int, int)").WithLocation(9, 39)
[xUnit.net 00:00:08.81]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Test3").WithArguments("VS2015CompilerBug.VS2015CompilerBug.Test3(int, int, int, int)", "VS2015CompilerBug.VS2015CompilerBug.Test3(int, int, int)").WithLocation(10, 39)
[xUnit.net 00:00:08.81]       Expected: True
[xUnit.net 00:00:08.81]       Actual:   False
[xUnit.net 00:00:08.81]       Stack Trace:
[xUnit.net 00:00:08.81]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.81]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.81]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.81]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.81]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8635,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TieBreakOnNumberOfDeclaredParameters_03()
[xUnit.net 00:00:08.93]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DeviationFromSpec [FAIL]
[xUnit.net 00:00:08.93]       
[xUnit.net 00:00:08.93]       Expected:
[xUnit.net 00:00:08.93]                       Diagnostic(ErrorCode.ERR_BadArgType, "ni").WithArguments("1", "int?", "int"),
[xUnit.net 00:00:08.93]                       Diagnostic(ErrorCode.ERR_BadArgType, "ns").WithArguments("1", "short?", "int"),
[xUnit.net 00:00:08.93]                       Diagnostic(ErrorCode.ERR_BadArgType, "nu").WithArguments("1", "uint?", "int?")
[xUnit.net 00:00:08.93]       Actual:
[xUnit.net 00:00:08.93]                       // (16,8): error CS1503: Argument 1: cannot convert from 'int?' to 'int a'
[xUnit.net 00:00:08.93]                       //     M1(ni);
[xUnit.net 00:00:08.93]                       Diagnostic(ErrorCode.ERR_BadArgType, "ni").WithArguments("1", "int?", "int a").WithLocation(16, 8),
[xUnit.net 00:00:08.93]                       // (17,8): error CS1503: Argument 1: cannot convert from 'short?' to 'int a'
[xUnit.net 00:00:08.93]                       //     M1(ns);
[xUnit.net 00:00:08.93]                       Diagnostic(ErrorCode.ERR_BadArgType, "ns").WithArguments("1", "short?", "int a").WithLocation(17, 8),
[xUnit.net 00:00:08.93]                       // (18,8): error CS1503: Argument 1: cannot convert from 'uint?' to 'int? a'
[xUnit.net 00:00:08.93]                       //     M2(nu);
[xUnit.net 00:00:08.93]                       Diagnostic(ErrorCode.ERR_BadArgType, "nu").WithArguments("1", "uint?", "int? a").WithLocation(18, 8)
[xUnit.net 00:00:08.93]       Diff:
[xUnit.net 00:00:08.93]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "ni").WithArguments("1", "int?", "int a").WithLocation(16, 8)
[xUnit.net 00:00:08.93]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "ns").WithArguments("1", "short?", "int a").WithLocation(17, 8)
[xUnit.net 00:00:08.93]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "nu").WithArguments("1", "uint?", "int? a").WithLocation(18, 8)
[xUnit.net 00:00:08.93]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "ni").WithArguments("1", "int?", "int")
[xUnit.net 00:00:08.93]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "ns").WithArguments("1", "short?", "int")
[xUnit.net 00:00:08.93]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "nu").WithArguments("1", "uint?", "int?")
[xUnit.net 00:00:08.93]       Expected: True
[xUnit.net 00:00:08.93]       Actual:   False
[xUnit.net 00:00:08.93]       Stack Trace:
[xUnit.net 00:00:08.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:08.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:08.93]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(305,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.DeviationFromSpec()
[xUnit.net 00:00:11.08]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug655409 [FAIL]
[xUnit.net 00:00:11.08]       
[xUnit.net 00:00:11.08]       Expected:
[xUnit.net 00:00:11.08]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("C.M<T>(System.Func<bool, T>)", "C.M<T>(System.Func<byte, T>)").WithLocation(8, 44)
[xUnit.net 00:00:11.08]       Actual:
[xUnit.net 00:00:11.08]                       // (8,44): error CS0121: The call is ambiguous between the following methods or properties: 'C.M<T>(Func<bool, T> x)' and 'C.M<T>(Func<byte, T> x)'
[xUnit.net 00:00:11.08]                       //         M(a => M(b => M(c => M(d => M(e => M(f => a))))));
[xUnit.net 00:00:11.08]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("C.M<T>(System.Func<bool, T> x)", "C.M<T>(System.Func<byte, T> x)").WithLocation(8, 44)
[xUnit.net 00:00:11.08]       Diff:
[xUnit.net 00:00:11.08]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("C.M<T>(System.Func<bool, T> x)", "C.M<T>(System.Func<byte, T> x)").WithLocation(8, 44)
[xUnit.net 00:00:11.08]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M").WithArguments("C.M<T>(System.Func<bool, T>)", "C.M<T>(System.Func<byte, T>)").WithLocation(8, 44)
[xUnit.net 00:00:11.08]       Expected: True
[xUnit.net 00:00:11.08]       Actual:   False
[xUnit.net 00:00:11.08]       Stack Trace:
[xUnit.net 00:00:11.08]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.08]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.08]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.08]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.08]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7624,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug655409()
[xUnit.net 00:00:11.17]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_6 [FAIL]
[xUnit.net 00:00:11.17]       
[xUnit.net 00:00:11.17]       Expected:
[xUnit.net 00:00:11.17]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params int[])").WithLocation(23, 38)
[xUnit.net 00:00:11.17]       Actual:
[xUnit.net 00:00:11.17]                       // (23,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool> filter, params int[] extra)' and 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev, params int[] extra)'
[xUnit.net 00:00:11.17]                       //             var x = Bar<Goo, double>.Create(Goo.IsThing);
[xUnit.net 00:00:11.17]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] extra)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params int[] extra)").WithLocation(23, 38)
[xUnit.net 00:00:11.17]       Diff:
[xUnit.net 00:00:11.17]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] extra)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params int[] extra)").WithLocation(23, 38)
[xUnit.net 00:00:11.17]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params int[])").WithLocation(23, 38)
[xUnit.net 00:00:11.17]       Expected: True
[xUnit.net 00:00:11.17]       Actual:   False
[xUnit.net 00:00:11.17]       Stack Trace:
[xUnit.net 00:00:11.17]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.17]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.17]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.17]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.17]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8122,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_6()
[xUnit.net 00:00:11.42]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GetSymbolInfo_Inaccessible [FAIL]
[xUnit.net 00:00:11.42]       
[xUnit.net 00:00:11.42]       Expected:
[xUnit.net 00:00:11.42]                       Diagnostic(ErrorCode.ERR_BadAccess, "M").WithArguments("D.M(int)").WithLocation(6, 11)
[xUnit.net 00:00:11.42]       Actual:
[xUnit.net 00:00:11.42]                       // (6,11): error CS0122: 'D.M(int i)' is inaccessible due to its protection level
[xUnit.net 00:00:11.42]                       //         d.M(1);
[xUnit.net 00:00:11.42]                       Diagnostic(ErrorCode.ERR_BadAccess, "M").WithArguments("D.M(int i)").WithLocation(6, 11)
[xUnit.net 00:00:11.42]       Diff:
[xUnit.net 00:00:11.42]       ++>                 Diagnostic(ErrorCode.ERR_BadAccess, "M").WithArguments("D.M(int i)").WithLocation(6, 11)
[xUnit.net 00:00:11.42]       -->                 Diagnostic(ErrorCode.ERR_BadAccess, "M").WithArguments("D.M(int)").WithLocation(6, 11)
[xUnit.net 00:00:11.42]       Expected: True
[xUnit.net 00:00:11.42]       Actual:   False
[xUnit.net 00:00:11.42]       Stack Trace:
[xUnit.net 00:00:11.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.42]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.42]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9069,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GetSymbolInfo_Inaccessible()
[xUnit.net 00:00:11.47]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_BaseTypeComImport [FAIL]
[xUnit.net 00:00:11.47]       
[xUnit.net 00:00:11.47]       Expected:
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_DllImportOnInvalidMethod, "DllImport"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("H.M(ref short)"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgRef, "x").WithArguments("1", "ref"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(sbyte)"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(ref short)"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte"),
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_NoSuchMemberOrExtension, "M").WithArguments("I", "M")
[xUnit.net 00:00:11.47]       Actual:
[xUnit.net 00:00:11.47]                       // (36,24): warning CS0626: Method, operator, or accessor 'H.M(ref short p)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
[xUnit.net 00:00:11.47]                       //     extern public void M(ref short p);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("H.M(ref short p)").WithLocation(36, 24),
[xUnit.net 00:00:11.47]                       // (59,24): warning CS0626: Method, operator, or accessor 'J.M(ref short p)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
[xUnit.net 00:00:11.47]                       //     extern public void M(ref short p);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(ref short p)").WithLocation(59, 24),
[xUnit.net 00:00:11.47]                       // (58,24): warning CS0626: Method, operator, or accessor 'J.M(sbyte p)' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.
[xUnit.net 00:00:11.47]                       //     extern public void M(sbyte p);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(sbyte p)").WithLocation(58, 24),
[xUnit.net 00:00:11.47]                       // (12,6): error CS0601: The DllImport attribute must be specified on a method marked 'static' and 'extern'
[xUnit.net 00:00:11.47]                       //     [DllImport("goo")]
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_DllImportOnInvalidMethod, "DllImport").WithLocation(12, 6),
[xUnit.net 00:00:11.47]                       // (20,19): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte p'
[xUnit.net 00:00:11.47]                       //         new F().M(x);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(20, 19),
[xUnit.net 00:00:11.47]                       // (43,19): error CS1620: Argument 1 must be passed with the 'ref' keyword
[xUnit.net 00:00:11.47]                       //         new H().M(x);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgRef, "x").WithArguments("1", "ref").WithLocation(43, 19),
[xUnit.net 00:00:11.47]                       // (46,13): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte p'
[xUnit.net 00:00:11.47]                       //         g.M(x);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(46, 13),
[xUnit.net 00:00:11.47]                       // (66,19): error CS1503: Argument 1: cannot convert from 'short' to 'sbyte p'
[xUnit.net 00:00:11.47]                       //         new J().M(x);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(66, 19),
[xUnit.net 00:00:11.47]                       // (69,11): error CS1061: 'I' does not contain a definition for 'M' and no accessible extension method 'M' accepting a first argument of type 'I' could be found (are you missing a using directive or an assembly reference?)
[xUnit.net 00:00:11.47]                       //         i.M(x);
[xUnit.net 00:00:11.47]                       Diagnostic(ErrorCode.ERR_NoSuchMemberOrExtension, "M").WithArguments("I", "M").WithLocation(69, 11)
[xUnit.net 00:00:11.47]       Diff:
[xUnit.net 00:00:11.47]       ++>                 Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("H.M(ref short p)").WithLocation(36, 24)
[xUnit.net 00:00:11.47]       ++>                 Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(ref short p)").WithLocation(59, 24)
[xUnit.net 00:00:11.47]       ++>                 Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(sbyte p)").WithLocation(58, 24)
[xUnit.net 00:00:11.47]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(20, 19)
[xUnit.net 00:00:11.47]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(46, 13)
[xUnit.net 00:00:11.47]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte p").WithLocation(66, 19)
[xUnit.net 00:00:11.47]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte")
[xUnit.net 00:00:11.47]       -->                 Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("H.M(ref short)")
[xUnit.net 00:00:11.47]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte")
[xUnit.net 00:00:11.47]       -->                 Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(sbyte)")
[xUnit.net 00:00:11.47]       -->                 Diagnostic(ErrorCode.WRN_ExternMethodNoImplementation, "M").WithArguments("J.M(ref short)")
[xUnit.net 00:00:11.47]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "short", "sbyte")
[xUnit.net 00:00:11.47]       Expected: True
[xUnit.net 00:00:11.47]       Actual:   False
[xUnit.net 00:00:11.47]       Stack Trace:
[xUnit.net 00:00:11.47]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.47]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.47]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.47]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.47]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(3060,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_BaseTypeComImport()
[xUnit.net 00:00:11.54]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceLambdaVariance [FAIL]
[xUnit.net 00:00:11.54]       
[xUnit.net 00:00:11.54]       Expected:
[xUnit.net 00:00:11.54]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(T, T)").WithLocation(13, 9)
[xUnit.net 00:00:11.54]       Actual:
[xUnit.net 00:00:11.54]                       // (13,9): error CS0411: The type arguments for method 'Program.M1<T>(T arg1, T arg2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:11.54]                       //         M1((in int arg1, in int arg2) => throw null, (in int arg1, in int arg2) => throw null);
[xUnit.net 00:00:11.54]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(T arg1, T arg2)").WithLocation(13, 9)
[xUnit.net 00:00:11.54]       Diff:
[xUnit.net 00:00:11.54]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(T arg1, T arg2)").WithLocation(13, 9)
[xUnit.net 00:00:11.54]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "M1").WithArguments("Program.M1<T>(T, T)").WithLocation(13, 9)
[xUnit.net 00:00:11.54]       Expected: True
[xUnit.net 00:00:11.54]       Actual:   False
[xUnit.net 00:00:11.54]       Stack Trace:
[xUnit.net 00:00:11.54]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.54]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.54]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.54]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.54]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11048,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceLambdaVariance()
[xUnit.net 00:00:11.55]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBaseAccessForAbstractMembers [FAIL]
[xUnit.net 00:00:11.55]       
[xUnit.net 00:00:11.55]       Expected:
[xUnit.net 00:00:11.55]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A, B)"),
[xUnit.net 00:00:11.55]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base3<U, V>.Method(U, V)"),
[xUnit.net 00:00:11.55]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Property").WithArguments("Base3<U, V>.Property")
[xUnit.net 00:00:11.55]       Actual:
[xUnit.net 00:00:11.55]                       // (16,9): error CS0205: Cannot call an abstract base member: 'Base<A, B>.Method(A i, B j)'
[xUnit.net 00:00:11.55]                       //         base.Method(a, b); // Error - Cannot call abstract base member
[xUnit.net 00:00:11.55]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A i, B j)").WithLocation(16, 9),
[xUnit.net 00:00:11.55]                       // (30,9): error CS0205: Cannot call an abstract base member: 'Base3<U, V>.Method(U x, V y)'
[xUnit.net 00:00:11.55]                       //         base.Method(x, y); // Error - Cannot call abstract base member
[xUnit.net 00:00:11.55]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base3<U, V>.Method(U x, V y)").WithLocation(30, 9),
[xUnit.net 00:00:11.55]                       // (37,13): error CS0205: Cannot call an abstract base member: 'Base3<U, V>.Property'
[xUnit.net 00:00:11.55]                       //             base.Property = f; // Error - Cannot call abstract base member
[xUnit.net 00:00:11.55]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Property").WithArguments("Base3<U, V>.Property").WithLocation(37, 13)
[xUnit.net 00:00:11.55]       Diff:
[xUnit.net 00:00:11.55]       ++>                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A i, B j)").WithLocation(16, 9)
[xUnit.net 00:00:11.55]       ++>                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base3<U, V>.Method(U x, V y)").WithLocation(30, 9)
[xUnit.net 00:00:11.55]       -->                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A, B)")
[xUnit.net 00:00:11.55]       -->                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base3<U, V>.Method(U, V)")
[xUnit.net 00:00:11.55]       Expected: True
[xUnit.net 00:00:11.55]       Actual:   False
[xUnit.net 00:00:11.55]       Stack Trace:
[xUnit.net 00:00:11.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.55]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(2006,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBaseAccessForAbstractMembers()
[xUnit.net 00:00:11.62]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InapplicableExtensionMethods_2 [FAIL]
[xUnit.net 00:00:11.62]       
[xUnit.net 00:00:11.62]       Expected:
[xUnit.net 00:00:11.62]                       Diagnostic(ErrorCode.ERR_BadInstanceArgType, "a").WithArguments("A", "F", "E.F(B, System.Action<object>, A)", "B").WithLocation(9, 9)
[xUnit.net 00:00:11.62]       Actual:
[xUnit.net 00:00:11.62]                       // (9,9): error CS1929: 'A' does not contain a definition for 'F' and the best extension method overload 'E.F(B x, Action<object> y, A z)' requires a receiver of type 'B x'
[xUnit.net 00:00:11.62]                       //         a.F(o => {}, a);
[xUnit.net 00:00:11.62]                       Diagnostic(ErrorCode.ERR_BadInstanceArgType, "a").WithArguments("A", "F", "E.F(B x, System.Action<object> y, A z)", "B x").WithLocation(9, 9)
[xUnit.net 00:00:11.62]       Diff:
[xUnit.net 00:00:11.62]       ++>                 Diagnostic(ErrorCode.ERR_BadInstanceArgType, "a").WithArguments("A", "F", "E.F(B x, System.Action<object> y, A z)", "B x").WithLocation(9, 9)
[xUnit.net 00:00:11.62]       -->                 Diagnostic(ErrorCode.ERR_BadInstanceArgType, "a").WithArguments("A", "F", "E.F(B, System.Action<object>, A)", "B").WithLocation(9, 9)
[xUnit.net 00:00:11.62]       Expected: True
[xUnit.net 00:00:11.62]       Actual:   False
[xUnit.net 00:00:11.62]       Stack Trace:
[xUnit.net 00:00:11.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.62]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.62]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9376,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InapplicableExtensionMethods_2()
[xUnit.net 00:00:11.63]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ThreeConflictingParameters_Error_Inverse [FAIL]
[xUnit.net 00:00:11.63]       
[xUnit.net 00:00:11.63]       Expected:
[xUnit.net 00:00:11.63]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int, int)", "Program.Method(in int, int, in int)").WithLocation(18, 9),
[xUnit.net 00:00:11.63]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int, int)", "Program.Method(in int, int, in int)").WithLocation(19, 9)
[xUnit.net 00:00:11.63]       Actual:
[xUnit.net 00:00:11.63]                       // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y, int z)' and 'Program.Method(in int x, int y, in int z)'
[xUnit.net 00:00:11.63]                       //         Method(x, y, z);
[xUnit.net 00:00:11.63]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y, int z)", "Program.Method(in int x, int y, in int z)").WithLocation(18, 9),
[xUnit.net 00:00:11.63]                       // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y, int z)' and 'Program.Method(in int x, int y, in int z)'
[xUnit.net 00:00:11.63]                       //         Method(4, 5, 6);
[xUnit.net 00:00:11.63]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y, int z)", "Program.Method(in int x, int y, in int z)").WithLocation(19, 9)
[xUnit.net 00:00:11.63]       Diff:
[xUnit.net 00:00:11.63]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y, int z)", "Program.Method(in int x, int y, in int z)").WithLocation(18, 9)
[xUnit.net 00:00:11.63]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y, int z)", "Program.Method(in int x, int y, in int z)").WithLocation(19, 9)
[xUnit.net 00:00:11.63]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int, int)", "Program.Method(in int, int, in int)").WithLocation(18, 9)
[xUnit.net 00:00:11.63]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int, int)", "Program.Method(in int, int, in int)").WithLocation(19, 9)
[xUnit.net 00:00:11.63]       Expected: True
[xUnit.net 00:00:11.63]       Actual:   False
[xUnit.net 00:00:11.63]       Stack Trace:
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10137,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ThreeConflictingParameters_Error_Inverse()
[xUnit.net 00:00:11.63]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_1 [FAIL]
[xUnit.net 00:00:11.63]       
[xUnit.net 00:00:11.63]       Expected:
[xUnit.net 00:00:11.63]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params System.Func<T, bool>[])").WithLocation(25, 38)
[xUnit.net 00:00:11.63]       Actual:
[xUnit.net 00:00:11.63]                       // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool> filter)' and 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev, params Func<T, bool>[] filter)'
[xUnit.net 00:00:11.63]                       //             var x = Bar<Goo, double>.Create(Goo.IsThing);
[xUnit.net 00:00:11.63]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params System.Func<T, bool>[] filter)").WithLocation(25, 38)
[xUnit.net 00:00:11.63]       Diff:
[xUnit.net 00:00:11.63]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params System.Func<T, bool>[] filter)").WithLocation(25, 38)
[xUnit.net 00:00:11.63]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params System.Func<T, bool>[])").WithLocation(25, 38)
[xUnit.net 00:00:11.63]       Expected: True
[xUnit.net 00:00:11.63]       Actual:   False
[xUnit.net 00:00:11.63]       Stack Trace:
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.63]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7918,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_1()
[xUnit.net 00:00:11.73]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterDelegateType_01 [FAIL]
[xUnit.net 00:00:11.73]       
[xUnit.net 00:00:11.73]       Expected:
[xUnit.net 00:00:11.73]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Func<int>, uint)", "P.M1(System.Func<uint>, int)"),
[xUnit.net 00:00:11.73]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M2").WithArguments("P.M2(System.Func<int>, uint)", "P.M2(System.Action, int)")
[xUnit.net 00:00:11.73]       Actual:
[xUnit.net 00:00:11.73]                       // (13,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(Func<int> a, uint b)' and 'P.M1(Func<uint> a, int b)'
[xUnit.net 00:00:11.73]                       //     M1(null,0);
[xUnit.net 00:00:11.73]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Func<int> a, uint b)", "P.M1(System.Func<uint> a, int b)").WithLocation(13, 5),
[xUnit.net 00:00:11.73]                       // (14,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M2(Func<int> a, uint b)' and 'P.M2(Action a, int b)'
[xUnit.net 00:00:11.73]                       //     M2(null,0);
[xUnit.net 00:00:11.73]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M2").WithArguments("P.M2(System.Func<int> a, uint b)", "P.M2(System.Action a, int b)").WithLocation(14, 5)
[xUnit.net 00:00:11.73]       Diff:
[xUnit.net 00:00:11.73]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Func<int> a, uint b)", "P.M1(System.Func<uint> a, int b)").WithLocation(13, 5)
[xUnit.net 00:00:11.73]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M2").WithArguments("P.M2(System.Func<int> a, uint b)", "P.M2(System.Action a, int b)").WithLocation(14, 5)
[xUnit.net 00:00:11.73]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Func<int>, uint)", "P.M1(System.Func<uint>, int)")
[xUnit.net 00:00:11.73]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M2").WithArguments("P.M2(System.Func<int>, uint)", "P.M2(System.Action, int)")
[xUnit.net 00:00:11.73]       Expected: True
[xUnit.net 00:00:11.73]       Actual:   False
[xUnit.net 00:00:11.73]       Stack Trace:
[xUnit.net 00:00:11.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.73]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.73]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1168,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterDelegateType_01()
[xUnit.net 00:00:11.74]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestExplicitImplMismatchedParamsErrorCase_Source [FAIL]
[xUnit.net 00:00:11.74]       
[xUnit.net 00:00:11.74]       Expected:
[xUnit.net 00:00:11.74]                       Diagnostic(ErrorCode.ERR_ExplicitImplParams, "Method2").WithArguments("Derived.Base.Method2(Derived, Derived, params Derived[])", "Base.Method2(Derived, Derived, Derived[])"),
[xUnit.net 00:00:11.74]                       Diagnostic(ErrorCode.ERR_BadArgCount, "Method2").WithArguments("Method2", "5")
[xUnit.net 00:00:11.74]       Actual:
[xUnit.net 00:00:11.74]                       // (10,15): error CS0466: 'Derived.Base.Method2(Derived C1, Derived C2, params Derived[] C3)' should not have a params parameter since 'Base.Method2(Derived c1, Derived c2, Derived[] c3)' does not
[xUnit.net 00:00:11.74]                       //     void Base.Method2(Derived C1, Derived C2, params Derived[] C3) { } //adds 'params' - CS0466
[xUnit.net 00:00:11.74]                       Diagnostic(ErrorCode.ERR_ExplicitImplParams, "Method2").WithArguments("Derived.Base.Method2(Derived C1, Derived C2, params Derived[] C3)", "Base.Method2(Derived c1, Derived c2, Derived[] c3)").WithLocation(10, 15),
[xUnit.net 00:00:11.74]                       // (19,11): error CS1501: No overload for method 'Method2' takes 5 arguments
[xUnit.net 00:00:11.74]                       //         b.Method2(d, d, d, d, d); // Should report error - No overload for Method2 takes 5 arguments
[xUnit.net 00:00:11.74]                       Diagnostic(ErrorCode.ERR_BadArgCount, "Method2").WithArguments("Method2", "5").WithLocation(19, 11)
[xUnit.net 00:00:11.74]       Diff:
[xUnit.net 00:00:11.74]       ++>                 Diagnostic(ErrorCode.ERR_ExplicitImplParams, "Method2").WithArguments("Derived.Base.Method2(Derived C1, Derived C2, params Derived[] C3)", "Base.Method2(Derived c1, Derived c2, Derived[] c3)").WithLocation(10, 15)
[xUnit.net 00:00:11.74]       -->                 Diagnostic(ErrorCode.ERR_ExplicitImplParams, "Method2").WithArguments("Derived.Base.Method2(Derived, Derived, params Derived[])", "Base.Method2(Derived, Derived, Derived[])")
[xUnit.net 00:00:11.74]       Expected: True
[xUnit.net 00:00:11.74]       Actual:   False
[xUnit.net 00:00:11.74]       Stack Trace:
[xUnit.net 00:00:11.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:11.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:11.74]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1855,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestExplicitImplMismatchedParamsErrorCase_Source()
[xUnit.net 00:00:11.82]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestGenericMethods [FAIL]
[xUnit.net 00:00:11.82]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:11.82]       -C.D<int>.N<byte>(byte)
[xUnit.net 00:00:11.82]       -C.D<int>.E<double>.O<short>(short)
[xUnit.net 00:00:11.82]       +C.D<int>.N<byte>(byte u)
[xUnit.net 00:00:11.82]       +C.D<int>.E<double>.O<short>(short w)
[xUnit.net 00:00:11.82]       
[xUnit.net 00:00:11.82]       Expected: True
[xUnit.net 00:00:11.82]       Actual:   False
[xUnit.net 00:00:11.82]       Stack Trace:
[xUnit.net 00:00:11.82]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:11.82]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:11.82]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1604,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestGenericMethods()
[xUnit.net 00:00:12.12]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestTieBreakers [FAIL]
[xUnit.net 00:00:12.12]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:12.12]       -C.N1(int)
[xUnit.net 00:00:12.12]       -C.N2(int)
[xUnit.net 00:00:12.12]       -C.N3(int, int, params int[])
[xUnit.net 00:00:12.12]       -C.N4(int)
[xUnit.net 00:00:12.12]       +C.N1(int p1)
[xUnit.net 00:00:12.12]       +C.N2(int p1)
[xUnit.net 00:00:12.12]       +C.N3(int p1, int p2, params int[] p3)
[xUnit.net 00:00:12.12]       +C.N4(int p1)
[xUnit.net 00:00:12.12]       
[xUnit.net 00:00:12.12]       Expected: True
[xUnit.net 00:00:12.12]       Actual:   False
[xUnit.net 00:00:12.12]       Stack Trace:
[xUnit.net 00:00:12.12]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:12.12]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:12.12]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1689,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestTieBreakers()
[xUnit.net 00:00:12.18]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness02 [FAIL]
[xUnit.net 00:00:12.18]       
[xUnit.net 00:00:12.18]       Expected:
[xUnit.net 00:00:12.18]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(11, 9)
[xUnit.net 00:00:12.18]       Actual:
[xUnit.net 00:00:12.18]                       // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1 del1)' and 'Program.Method(Del2 del2)'
[xUnit.net 00:00:12.18]                       //         Method(() => null);
[xUnit.net 00:00:12.18]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(11, 9)
[xUnit.net 00:00:12.18]       Diff:
[xUnit.net 00:00:12.18]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(11, 9)
[xUnit.net 00:00:12.18]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(11, 9)
[xUnit.net 00:00:12.18]       Expected: True
[xUnit.net 00:00:12.18]       Actual:   False
[xUnit.net 00:00:12.18]       Stack Trace:
[xUnit.net 00:00:12.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.18]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.18]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9130,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness02()
[xUnit.net 00:00:12.38]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Whidbey133503a [FAIL]
[xUnit.net 00:00:12.38]       
[xUnit.net 00:00:12.38]       Expected:
[xUnit.net 00:00:12.38]                       Diagnostic(ErrorCode.ERR_AmbigCall, "overload1").WithArguments("Ambig.overload1(byte, goo)", "Ambig.overload1(int, baz)").WithLocation(6, 9),
[xUnit.net 00:00:12.38]                       Diagnostic(ErrorCode.ERR_AmbigCall, "overload2").WithArguments("Ambig.overload2(int, baz)", "Ambig.overload2(byte, goo)").WithLocation(7, 9)
[xUnit.net 00:00:12.38]       Actual:
[xUnit.net 00:00:12.38]                       // (6,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.overload1(byte b, goo f)' and 'Ambig.overload1(int b, baz f)'
[xUnit.net 00:00:12.38]                       //         overload1(1, 1);
[xUnit.net 00:00:12.38]                       Diagnostic(ErrorCode.ERR_AmbigCall, "overload1").WithArguments("Ambig.overload1(byte b, goo f)", "Ambig.overload1(int b, baz f)").WithLocation(6, 9),
[xUnit.net 00:00:12.38]                       // (7,9): error CS0121: The call is ambiguous between the following methods or properties: 'Ambig.overload2(int b, baz f)' and 'Ambig.overload2(byte b, goo f)'
[xUnit.net 00:00:12.38]                       //         overload2(1, 1);
[xUnit.net 00:00:12.38]                       Diagnostic(ErrorCode.ERR_AmbigCall, "overload2").WithArguments("Ambig.overload2(int b, baz f)", "Ambig.overload2(byte b, goo f)").WithLocation(7, 9)
[xUnit.net 00:00:12.38]       Diff:
[xUnit.net 00:00:12.38]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "overload1").WithArguments("Ambig.overload1(byte b, goo f)", "Ambig.overload1(int b, baz f)").WithLocation(6, 9)
[xUnit.net 00:00:12.38]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "overload2").WithArguments("Ambig.overload2(int b, baz f)", "Ambig.overload2(byte b, goo f)").WithLocation(7, 9)
[xUnit.net 00:00:12.38]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "overload1").WithArguments("Ambig.overload1(byte, goo)", "Ambig.overload1(int, baz)").WithLocation(6, 9)
[xUnit.net 00:00:12.38]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "overload2").WithArguments("Ambig.overload2(int, baz)", "Ambig.overload2(byte, goo)").WithLocation(7, 9)
[xUnit.net 00:00:12.38]       Expected: True
[xUnit.net 00:00:12.38]       Actual:   False
[xUnit.net 00:00:12.38]       Stack Trace:
[xUnit.net 00:00:12.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.38]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(6489,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Whidbey133503a()
[xUnit.net 00:00:12.45]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_5 [FAIL]
[xUnit.net 00:00:12.45]       
[xUnit.net 00:00:12.45]       Expected:
[xUnit.net 00:00:12.45]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params System.Func<T, bool>[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>)").WithLocation(25, 38)
[xUnit.net 00:00:12.45]       Actual:
[xUnit.net 00:00:12.45]                       // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev, params Func<T, bool>[] filter)' and 'Program.Bar<T, V>.Create(Func<T, bool> filter)'
[xUnit.net 00:00:12.45]                       //             var x = Bar<Goo, double>.Create(Goo.IsThing);
[xUnit.net 00:00:12.45]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params System.Func<T, bool>[] filter)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter)").WithLocation(25, 38)
[xUnit.net 00:00:12.45]       Diff:
[xUnit.net 00:00:12.45]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev, params System.Func<T, bool>[] filter)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter)").WithLocation(25, 38)
[xUnit.net 00:00:12.45]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>, params System.Func<T, bool>[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>)").WithLocation(25, 38)
[xUnit.net 00:00:12.45]       Expected: True
[xUnit.net 00:00:12.45]       Actual:   False
[xUnit.net 00:00:12.45]       Stack Trace:
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8082,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_5()
[xUnit.net 00:00:12.45]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.CircularImplicitConversions [FAIL]
[xUnit.net 00:00:12.45]       
[xUnit.net 00:00:12.45]       Expected:
[xUnit.net 00:00:12.45]                       Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("E.F(A)", "E.F(B)").WithLocation(28, 36)
[xUnit.net 00:00:12.45]       Actual:
[xUnit.net 00:00:12.45]                       // (28,36): error CS0121: The call is ambiguous between the following methods or properties: 'E.F(A a)' and 'E.F(B b)'
[xUnit.net 00:00:12.45]                       //     public static void Main() => E.F(new D());
[xUnit.net 00:00:12.45]                       Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("E.F(A a)", "E.F(B b)").WithLocation(28, 36)
[xUnit.net 00:00:12.45]       Diff:
[xUnit.net 00:00:12.45]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("E.F(A a)", "E.F(B b)").WithLocation(28, 36)
[xUnit.net 00:00:12.45]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "F").WithArguments("E.F(A)", "E.F(B)").WithLocation(28, 36)
[xUnit.net 00:00:12.45]       Expected: True
[xUnit.net 00:00:12.45]       Actual:   False
[xUnit.net 00:00:12.45]       Stack Trace:
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.45]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9417,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.CircularImplicitConversions()
[xUnit.net 00:00:12.46]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestOverloadResolutionTiebreaker [FAIL]
[xUnit.net 00:00:12.46]       
[xUnit.net 00:00:12.46]       Expected:
[xUnit.net 00:00:12.46]                       Diagnostic(ErrorCode.ERR_AmbigCall, "X").WithArguments("C.X(params string[])", "C.X<T>(T)").WithLocation(9, 9)
[xUnit.net 00:00:12.46]       Actual:
[xUnit.net 00:00:12.46]                       // (9,9): error CS0121: The call is ambiguous between the following methods or properties: 'C.X(params string[] s)' and 'C.X<T>(T t)'
[xUnit.net 00:00:12.46]                       //         X((string)null); //-C.X(string, object)
[xUnit.net 00:00:12.46]                       Diagnostic(ErrorCode.ERR_AmbigCall, "X").WithArguments("C.X(params string[] s)", "C.X<T>(T t)").WithLocation(9, 9)
[xUnit.net 00:00:12.46]       Diff:
[xUnit.net 00:00:12.46]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "X").WithArguments("C.X(params string[] s)", "C.X<T>(T t)").WithLocation(9, 9)
[xUnit.net 00:00:12.46]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "X").WithArguments("C.X(params string[])", "C.X<T>(T)").WithLocation(9, 9)
[xUnit.net 00:00:12.46]       Expected: True
[xUnit.net 00:00:12.46]       Actual:   False
[xUnit.net 00:00:12.46]       Stack Trace:
[xUnit.net 00:00:12.46]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.46]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.46]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.46]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.46]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1380,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestOverloadResolutionTiebreaker()
[xUnit.net 00:00:12.72]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestMoreOverloadResolutionErrors [FAIL]
[xUnit.net 00:00:12.72]       
[xUnit.net 00:00:12.72]       Expected:
[xUnit.net 00:00:12.72]                       Diagnostic(ErrorCode.ERR_BadCtorArgCount, "byte").WithArguments("byte", "1").WithLocation(7, 22),
[xUnit.net 00:00:12.72]                       Diagnostic(ErrorCode.ERR_BadArgType, "VoidReturning()").WithArguments("1", "void", "bool").WithLocation(8, 34)
[xUnit.net 00:00:12.72]       Actual:
[xUnit.net 00:00:12.72]                       // (7,22): error CS1729: 'byte' does not contain a constructor that takes 1 arguments
[xUnit.net 00:00:12.72]                       //         byte b = new byte(1);
[xUnit.net 00:00:12.72]                       Diagnostic(ErrorCode.ERR_BadCtorArgCount, "byte").WithArguments("byte", "1").WithLocation(7, 22),
[xUnit.net 00:00:12.72]                       // (8,34): error CS1503: Argument 1: cannot convert from 'void' to 'bool value'
[xUnit.net 00:00:12.72]                       //         System.Console.WriteLine(VoidReturning());
[xUnit.net 00:00:12.72]                       Diagnostic(ErrorCode.ERR_BadArgType, "VoidReturning()").WithArguments("1", "void", "bool value").WithLocation(8, 34)
[xUnit.net 00:00:12.72]       Diff:
[xUnit.net 00:00:12.72]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "VoidReturning()").WithArguments("1", "void", "bool value").WithLocation(8, 34)
[xUnit.net 00:00:12.72]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "VoidReturning()").WithArguments("1", "void", "bool").WithLocation(8, 34)
[xUnit.net 00:00:12.72]       Expected: True
[xUnit.net 00:00:12.72]       Actual:   False
[xUnit.net 00:00:12.72]       Stack Trace:
[xUnit.net 00:00:12.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.72]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1546,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestMoreOverloadResolutionErrors()
[xUnit.net 00:00:12.87]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestRefOutAnonymousDelegate [FAIL]
[xUnit.net 00:00:12.87]       
[xUnit.net 00:00:12.87]       Expected:
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Func<string, string>").WithLocation(14, 21),
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Func<string, string>").WithLocation(15, 21),
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Linq.Expressions.Expression<System.Func<string, string>>").WithLocation(16, 22),
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Linq.Expressions.Expression<System.Func<string, string>>").WithLocation(17, 22)
[xUnit.net 00:00:12.87]       Actual:
[xUnit.net 00:00:12.87]                       // (14,21): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'ref Func<string, string> a'
[xUnit.net 00:00:12.87]                       //         Goo<string>(x => x);
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Func<string, string> a").WithLocation(14, 21),
[xUnit.net 00:00:12.87]                       // (15,21): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'out Func<string, string> a'
[xUnit.net 00:00:12.87]                       //         Bar<string>(x => x);
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Func<string, string> a").WithLocation(15, 21),
[xUnit.net 00:00:12.87]                       // (16,22): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'ref Expression<Func<string, string>> a'
[xUnit.net 00:00:12.87]                       //         Goo2<string>(x => x);
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Linq.Expressions.Expression<System.Func<string, string>> a").WithLocation(16, 22),
[xUnit.net 00:00:12.87]                       // (17,22): error CS1503: Argument 1: cannot convert from 'lambda expression' to 'out Expression<Func<string, string>> a'
[xUnit.net 00:00:12.87]                       //         Bar2<string>(x => x);
[xUnit.net 00:00:12.87]                       Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Linq.Expressions.Expression<System.Func<string, string>> a").WithLocation(17, 22)
[xUnit.net 00:00:12.87]       Diff:
[xUnit.net 00:00:12.87]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Func<string, string> a").WithLocation(14, 21)
[xUnit.net 00:00:12.87]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Func<string, string> a").WithLocation(15, 21)
[xUnit.net 00:00:12.87]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Linq.Expressions.Expression<System.Func<string, string>> a").WithLocation(16, 22)
[xUnit.net 00:00:12.87]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Linq.Expressions.Expression<System.Func<string, string>> a").WithLocation(17, 22)
[xUnit.net 00:00:12.87]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Func<string, string>").WithLocation(14, 21)
[xUnit.net 00:00:12.87]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Func<string, string>").WithLocation(15, 21)
[xUnit.net 00:00:12.87]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "ref System.Linq.Expressions.Expression<System.Func<string, string>>").WithLocation(16, 22)
[xUnit.net 00:00:12.87]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x => x").WithArguments("1", "lambda expression", "out System.Linq.Expressions.Expression<System.Func<string, string>>").WithLocation(17, 22)
[xUnit.net 00:00:12.87]       Expected: True
[xUnit.net 00:00:12.87]       Actual:   False
[xUnit.net 00:00:12.87]       Stack Trace:
[xUnit.net 00:00:12.87]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.87]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.87]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.87]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.87]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1347,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestRefOutAnonymousDelegate()
[xUnit.net 00:00:12.88]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ConflictingParameters_Error_Inverse [FAIL]
[xUnit.net 00:00:12.88]       
[xUnit.net 00:00:12.88]       Expected:
[xUnit.net 00:00:12.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int)", "Program.Method(in int, int)").WithLocation(18, 9),
[xUnit.net 00:00:12.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int)", "Program.Method(in int, int)").WithLocation(19, 9)
[xUnit.net 00:00:12.88]       Actual:
[xUnit.net 00:00:12.88]                       // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y)' and 'Program.Method(in int x, int y)'
[xUnit.net 00:00:12.88]                       //         Method(x, y);
[xUnit.net 00:00:12.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y)", "Program.Method(in int x, int y)").WithLocation(18, 9),
[xUnit.net 00:00:12.88]                       // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(int x, in int y)' and 'Program.Method(in int x, int y)'
[xUnit.net 00:00:12.88]                       //         Method(3, 4);
[xUnit.net 00:00:12.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y)", "Program.Method(in int x, int y)").WithLocation(19, 9)
[xUnit.net 00:00:12.88]       Diff:
[xUnit.net 00:00:12.88]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y)", "Program.Method(in int x, int y)").WithLocation(18, 9)
[xUnit.net 00:00:12.88]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int x, in int y)", "Program.Method(in int x, int y)").WithLocation(19, 9)
[xUnit.net 00:00:12.88]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int)", "Program.Method(in int, int)").WithLocation(18, 9)
[xUnit.net 00:00:12.88]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(int, in int)", "Program.Method(in int, int)").WithLocation(19, 9)
[xUnit.net 00:00:12.88]       Expected: True
[xUnit.net 00:00:12.88]       Actual:   False
[xUnit.net 00:00:12.88]       Stack Trace:
[xUnit.net 00:00:12.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.88]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10069,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ConflictingParameters_Error_Inverse()
[xUnit.net 00:00:12.94]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterTaskType [FAIL]
[xUnit.net 00:00:12.94]       
[xUnit.net 00:00:12.94]       Expected:
[xUnit.net 00:00:12.94]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Threading.Tasks.Task<int>, uint)", "P.M1(System.Threading.Tasks.Task<uint>, int)")
[xUnit.net 00:00:12.94]       Actual:
[xUnit.net 00:00:12.94]                       // (11,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(Task<int> a, uint b)' and 'P.M1(Task<uint> a, int b)'
[xUnit.net 00:00:12.94]                       //     M1(null,0);
[xUnit.net 00:00:12.94]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Threading.Tasks.Task<int> a, uint b)", "P.M1(System.Threading.Tasks.Task<uint> a, int b)").WithLocation(11, 5)
[xUnit.net 00:00:12.94]       Diff:
[xUnit.net 00:00:12.94]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Threading.Tasks.Task<int> a, uint b)", "P.M1(System.Threading.Tasks.Task<uint> a, int b)").WithLocation(11, 5)
[xUnit.net 00:00:12.94]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(System.Threading.Tasks.Task<int>, uint)", "P.M1(System.Threading.Tasks.Task<uint>, int)")
[xUnit.net 00:00:12.94]       Expected: True
[xUnit.net 00:00:12.94]       Actual:   False
[xUnit.net 00:00:12.94]       Stack Trace:
[xUnit.net 00:00:12.94]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:12.94]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.94]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.94]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:12.94]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(478,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterTaskType()
[xUnit.net 00:00:13.00]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ExactInaccessibleMatch [SKIP]
[xUnit.net 00:00:13.00]       528425
[xUnit.net 00:00:13.01]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnInIndexerErr [FAIL]
[xUnit.net 00:00:13.01]       
[xUnit.net 00:00:13.01]       Expected:
[xUnit.net 00:00:13.01]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int").WithLocation(27, 18),
[xUnit.net 00:00:13.01]                       Diagnostic(ErrorCode.ERR_RefLvalueExpected, "2").WithLocation(30, 25),
[xUnit.net 00:00:13.01]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(31, 23)
[xUnit.net 00:00:13.01]       Actual:
[xUnit.net 00:00:13.01]                       // (27,18): error CS1503: Argument 1: cannot convert from 'in byte' to 'in int inP'
[xUnit.net 00:00:13.01]                       //         _ = p[in x];
[xUnit.net 00:00:13.01]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int inP").WithLocation(27, 18),
[xUnit.net 00:00:13.01]                       // (30,25): error CS1510: A ref or out value must be an assignable variable
[xUnit.net 00:00:13.01]                       //         _ = p[valP: out 2];
[xUnit.net 00:00:13.01]                       Diagnostic(ErrorCode.ERR_RefLvalueExpected, "2").WithLocation(30, 25),
[xUnit.net 00:00:13.01]                       // (31,23): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
[xUnit.net 00:00:13.01]                       //         _ = p[inP: in 2];
[xUnit.net 00:00:13.01]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(31, 23)
[xUnit.net 00:00:13.01]       Diff:
[xUnit.net 00:00:13.01]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int inP").WithLocation(27, 18)
[xUnit.net 00:00:13.01]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int").WithLocation(27, 18)
[xUnit.net 00:00:13.01]       Expected: True
[xUnit.net 00:00:13.01]       Actual:   False
[xUnit.net 00:00:13.01]       Stack Trace:
[xUnit.net 00:00:13.01]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.01]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.01]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.01]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.01]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10489,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnInIndexerErr()
[xUnit.net 00:00:13.09]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_OverloadResolution_SingleArgument_IndexedProperties_ErrorCases [FAIL]
[xUnit.net 00:00:13.09]       
[xUnit.net 00:00:13.09]       Expected:
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long]", "IA.P5[ref char]"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref"),
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref")
[xUnit.net 00:00:13.09]       Actual:
[xUnit.net 00:00:13.09]                       // (15,21): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
[xUnit.net 00:00:13.09]                       //        value = a.P1[10L];         // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int i").WithLocation(15, 21),
[xUnit.net 00:00:13.09]                       // (16,13): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
[xUnit.net 00:00:13.09]                       //        a.P1[10L] = value;         // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int i").WithLocation(16, 13),
[xUnit.net 00:00:13.09]                       // (17,21): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
[xUnit.net 00:00:13.09]                       //        value = a.P1[l];           // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int i").WithLocation(17, 21),
[xUnit.net 00:00:13.09]                       // (18,13): error CS1503: Argument 1: cannot convert from 'long' to 'int i'
[xUnit.net 00:00:13.09]                       //        a.P1[l] = value;           // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int i").WithLocation(18, 13),
[xUnit.net 00:00:13.09]                       // (19,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P1[ref l];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(19, 25),
[xUnit.net 00:00:13.09]                       // (20,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        a.P1[ref l] = value;       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(20, 17),
[xUnit.net 00:00:13.09]                       // (21,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P1[ref c];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(21, 25),
[xUnit.net 00:00:13.09]                       // (22,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        a.P1[ref c] = value;       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(22, 17),
[xUnit.net 00:00:13.09]                       // (27,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P2[ref l];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(27, 25),
[xUnit.net 00:00:13.09]                       // (28,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        a.P2[ref l] = value;       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(28, 17),
[xUnit.net 00:00:13.09]                       // (29,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P2[ref c];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(29, 25),
[xUnit.net 00:00:13.09]                       // (30,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        a.P2[ref c] = value;       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(30, 17),
[xUnit.net 00:00:13.09]                       // (35,21): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
[xUnit.net 00:00:13.09]                       //        value = a.P3[10L];         // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char i").WithLocation(35, 21),
[xUnit.net 00:00:13.09]                       // (36,13): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
[xUnit.net 00:00:13.09]                       //        a.P3[10L] = value;         // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char i").WithLocation(36, 13),
[xUnit.net 00:00:13.09]                       // (37,21): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
[xUnit.net 00:00:13.09]                       //        value = a.P3[l];           // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char i").WithLocation(37, 21),
[xUnit.net 00:00:13.09]                       // (38,13): error CS1503: Argument 1: cannot convert from 'long' to 'char i'
[xUnit.net 00:00:13.09]                       //        a.P3[l] = value;           // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char i").WithLocation(38, 13),
[xUnit.net 00:00:13.09]                       // (39,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P3[ref l];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(39, 25),
[xUnit.net 00:00:13.09]                       // (40,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        a.P3[ref l] = value;       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(40, 17),
[xUnit.net 00:00:13.09]                       // (41,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P3[ref c];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(41, 25),
[xUnit.net 00:00:13.09]                       // (42,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        a.P3[ref c] = value;       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "c").WithArguments("1", "ref").WithLocation(42, 17),
[xUnit.net 00:00:13.09]                       // (47,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        value = a.P4[10];          // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(47, 16),
[xUnit.net 00:00:13.09]                       // (48,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        a.P4[10] = value;          // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(48, 8),
[xUnit.net 00:00:13.09]                       // (49,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        value = a.P4['c'];         // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(49, 16),
[xUnit.net 00:00:13.09]                       // (50,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        a.P4['c'] = value;         // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(50, 8),
[xUnit.net 00:00:13.09]                       // (51,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        value = a.P4[i];           // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(51, 16),
[xUnit.net 00:00:13.09]                       // (52,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        a.P4[i] = value;           // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(52, 8),
[xUnit.net 00:00:13.09]                       // (53,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        value = a.P4[c];           // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(53, 16),
[xUnit.net 00:00:13.09]                       // (54,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P4[ref long i]' and 'IA.P4[ref int i]'
[xUnit.net 00:00:13.09]                       //        a.P4[c] = value;           // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(54, 8),
[xUnit.net 00:00:13.09]                       // (55,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        value = a.P4[ref c];       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(55, 25),
[xUnit.net 00:00:13.09]                       // (56,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        a.P4[ref c] = value;       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(56, 17),
[xUnit.net 00:00:13.09]                       // (61,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
[xUnit.net 00:00:13.09]                       //        value = a.P5['c'];         // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(61, 16),
[xUnit.net 00:00:13.09]                       // (62,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
[xUnit.net 00:00:13.09]                       //        a.P5['c'] = value;         // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(62, 8),
[xUnit.net 00:00:13.09]                       // (63,16): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
[xUnit.net 00:00:13.09]                       //        value = a.P5[c];           // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(63, 16),
[xUnit.net 00:00:13.09]                       // (64,8): error CS0121: The call is ambiguous between the following methods or properties: 'IA.P5[ref long i]' and 'IA.P5[ref char i]'
[xUnit.net 00:00:13.09]                       //        a.P5[c] = value;           // CS0121
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(64, 8),
[xUnit.net 00:00:13.09]                       // (65,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        value = a.P5[ref i];       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(65, 25),
[xUnit.net 00:00:13.09]                       // (66,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        a.P5[ref i] = value;       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(66, 17),
[xUnit.net 00:00:13.09]                       // (71,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        value = a.P6[ref i];       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(71, 25),
[xUnit.net 00:00:13.09]                       // (72,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        a.P6[ref i] = value;       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(72, 17),
[xUnit.net 00:00:13.09]                       // (73,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        value = a.P6[ref c];       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(73, 25),
[xUnit.net 00:00:13.09]                       // (74,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        a.P6[ref c] = value;       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(74, 17),
[xUnit.net 00:00:13.09]                       // (79,25): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        value = a.P7[ref i];       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(79, 25),
[xUnit.net 00:00:13.09]                       // (80,17): error CS1503: Argument 1: cannot convert from 'ref int' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        a.P7[ref i] = value;       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(80, 17),
[xUnit.net 00:00:13.09]                       // (81,25): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        value = a.P7[ref c];       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(81, 25),
[xUnit.net 00:00:13.09]                       // (82,17): error CS1503: Argument 1: cannot convert from 'ref char' to 'ref long i'
[xUnit.net 00:00:13.09]                       //        a.P7[ref c] = value;       // CS1503
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(82, 17),
[xUnit.net 00:00:13.09]                       // (87,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.09]                       //        value = a.P8[ref i];       // CS1615
[xUnit.net 00:00:13.09]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(87, 25),
[xUnit.net 00:00:13.09]                       // (88,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.10]                       //        a.P8[ref i] = value;       // CS1615
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "i").WithArguments("1", "ref").WithLocation(88, 17),
[xUnit.net 00:00:13.10]                       // (89,25): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.10]                       //        value = a.P8[ref l];       // CS1615
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(89, 25),
[xUnit.net 00:00:13.10]                       // (90,17): error CS1615: Argument 1 may not be passed with the 'ref' keyword
[xUnit.net 00:00:13.10]                       //        a.P8[ref l] = value;       // CS1615
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_BadArgExtraRef, "l").WithArguments("1", "ref").WithLocation(90, 17)
[xUnit.net 00:00:13.10]       Diff:
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int i").WithLocation(15, 21)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int i").WithLocation(16, 13)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int i").WithLocation(17, 21)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int i").WithLocation(18, 13)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char i").WithLocation(35, 21)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char i").WithLocation(36, 13)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char i").WithLocation(37, 21)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char i").WithLocation(38, 13)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(47, 16)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(48, 8)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(49, 16)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(50, 8)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(51, 16)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(52, 8)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(53, 16)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long i]", "IA.P4[ref int i]").WithLocation(54, 8)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(55, 25)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(56, 17)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(61, 16)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(62, 8)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(63, 16)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long i]", "IA.P5[ref char i]").WithLocation(64, 8)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(65, 25)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(66, 17)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(71, 25)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(72, 17)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(73, 25)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(74, 17)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(79, 25)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long i").WithLocation(80, 17)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(81, 25)
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long i").WithLocation(82, 17)
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "int")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "int")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "10L").WithArguments("1", "long", "char")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "l").WithArguments("1", "long", "char")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[10]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4['c']").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[i]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P4[c]").WithArguments("IA.P4[ref long]", "IA.P4[ref int]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long]", "IA.P5[ref char]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5['c']").WithArguments("IA.P5[ref long]", "IA.P5[ref char]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long]", "IA.P5[ref char]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "a.P5[c]").WithArguments("IA.P5[ref long]", "IA.P5[ref char]")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "i").WithArguments("1", "ref int", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "c").WithArguments("1", "ref char", "ref long")
[xUnit.net 00:00:13.10]       Expected: True
[xUnit.net 00:00:13.10]       Actual:   False
[xUnit.net 00:00:13.10]       Stack Trace:
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(5123,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RefOmittedComCall_OverloadResolution_SingleArgument_IndexedProperties_ErrorCases()
[xUnit.net 00:00:13.10]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnInErr [FAIL]
[xUnit.net 00:00:13.10]       
[xUnit.net 00:00:13.10]       Expected:
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int").WithLocation(17, 19),
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_RefLvalueExpected, "2").WithLocation(20, 26),
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(21, 25)
[xUnit.net 00:00:13.10]       Actual:
[xUnit.net 00:00:13.10]                       // (17,19): error CS1503: Argument 1: cannot convert from 'in byte' to 'in int inP'
[xUnit.net 00:00:13.10]                       //         Method(in x);
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int inP").WithLocation(17, 19),
[xUnit.net 00:00:13.10]                       // (20,26): error CS1510: A ref or out value must be an assignable variable
[xUnit.net 00:00:13.10]                       //         Method(valP: out 2);
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_RefLvalueExpected, "2").WithLocation(20, 26),
[xUnit.net 00:00:13.10]                       // (21,25): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
[xUnit.net 00:00:13.10]                       //         Method(valP: in 2);
[xUnit.net 00:00:13.10]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "2").WithLocation(21, 25)
[xUnit.net 00:00:13.10]       Diff:
[xUnit.net 00:00:13.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int inP").WithLocation(17, 19)
[xUnit.net 00:00:13.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "in byte", "in int").WithLocation(17, 19)
[xUnit.net 00:00:13.10]       Expected: True
[xUnit.net 00:00:13.10]       Actual:   False
[xUnit.net 00:00:13.10]       Stack Trace:
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.10]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10392,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnInErr()
[xUnit.net 00:00:13.55]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness01 [FAIL]
[xUnit.net 00:00:13.55]       
[xUnit.net 00:00:13.55]       Expected:
[xUnit.net 00:00:13.55]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(11, 9)
[xUnit.net 00:00:13.55]       Actual:
[xUnit.net 00:00:13.55]                       // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1 del1)' and 'Program.Method(Del2 del2)'
[xUnit.net 00:00:13.55]                       //         Method(() => null);
[xUnit.net 00:00:13.55]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(11, 9)
[xUnit.net 00:00:13.55]       Diff:
[xUnit.net 00:00:13.55]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1 del1)", "Program.Method(Del2 del2)").WithLocation(11, 9)
[xUnit.net 00:00:13.55]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1)", "Program.Method(Del2)").WithLocation(11, 9)
[xUnit.net 00:00:13.55]       Expected: True
[xUnit.net 00:00:13.55]       Actual:   False
[xUnit.net 00:00:13.55]       Stack Trace:
[xUnit.net 00:00:13.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.55]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.55]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9106,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness01()
[xUnit.net 00:00:13.56]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversion_BetterCandidateHasOptionalParameter [FAIL]
[xUnit.net 00:00:13.56]       
[xUnit.net 00:00:13.56]       Expected:
[xUnit.net 00:00:13.56]                       Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2)", "A")
[xUnit.net 00:00:13.56]       Actual:
[xUnit.net 00:00:13.56]                       // (8,16): warning CS0618: 'Extensions.Add(IViewable2 @this)' is obsolete: 'A'
[xUnit.net 00:00:13.56]                       //         v.View(v.Add);
[xUnit.net 00:00:13.56]                       Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2 @this)", "A").WithLocation(8, 16)
[xUnit.net 00:00:13.56]       Diff:
[xUnit.net 00:00:13.56]       ++>                 Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2 @this)", "A").WithLocation(8, 16)
[xUnit.net 00:00:13.56]       -->                 Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, "v.Add").WithArguments("Extensions.Add(IViewable2)", "A")
[xUnit.net 00:00:13.56]       Expected: True
[xUnit.net 00:00:13.56]       Actual:   False
[xUnit.net 00:00:13.56]       Stack Trace:
[xUnit.net 00:00:13.56]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.56]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.56]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.56]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.56]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7191,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversion_BetterCandidateHasOptionalParameter()
[xUnit.net 00:00:13.57]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TypeParameterInterfaceVersusNonInterface [FAIL]
[xUnit.net 00:00:13.57]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:13.57]       -IA.Goo(int)
[xUnit.net 00:00:13.57]       +IA.Goo(int x)
[xUnit.net 00:00:13.57]       
[xUnit.net 00:00:13.57]       Expected: True
[xUnit.net 00:00:13.57]       Actual:   False
[xUnit.net 00:00:13.57]       Stack Trace:
[xUnit.net 00:00:13.57]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:13.57]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:13.57]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7051,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TypeParameterInterfaceVersusNonInterface()
[xUnit.net 00:00:13.62]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterErrorMessage_01 [FAIL]
[xUnit.net 00:00:13.62]       
[xUnit.net 00:00:13.62]       Expected:
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("F1", "z").WithLocation(12, 24),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("F2", "z").WithLocation(13, 24),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M1").WithArguments("M1", "2").WithLocation(15, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "x").WithArguments("M2", "x").WithLocation(17, 15),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "x").WithArguments("M3", "x").WithLocation(18, 15),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(20, 15),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(21, 15),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(22, 15),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M7").WithArguments("w", "C.M7(int, int, int)").WithLocation(24, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M9").WithArguments("w", "C.M9(int, int, int)").WithLocation(25, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M8").WithArguments("w", "C.M8(int, int, int)").WithLocation(26, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M10").WithArguments("w", "C.M10(int, int, int)").WithLocation(27, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("M11", "z").WithLocation(29, 25),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M12").WithArguments("M12", "4").WithLocation(31, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M13").WithArguments("M13", "4").WithLocation(32, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M14").WithArguments("M14", "3").WithLocation(34, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M15").WithArguments("M15", "2").WithLocation(36, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M16").WithArguments("M16", "2").WithLocation(37, 9),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "y").WithArguments("y").WithLocation(39, 22),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "y").WithArguments("y").WithLocation(40, 22),
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(41, 16)
[xUnit.net 00:00:13.62]       Actual:
[xUnit.net 00:00:13.62]                       // (12,24): error CS1739: The best overload for 'F1' does not have a parameter named 'z'
[xUnit.net 00:00:13.62]                       //         F1(x: 1, y: 2, z: 3);
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("F1", "z").WithLocation(12, 24),
[xUnit.net 00:00:13.62]                       // (13,24): error CS1739: The best overload for 'F2' does not have a parameter named 'z'
[xUnit.net 00:00:13.62]                       //         F2(x: 1, y: 2, z: 3);
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("F2", "z").WithLocation(13, 24),
[xUnit.net 00:00:13.62]                       // (15,9): error CS1501: No overload for method 'M1' takes 2 arguments
[xUnit.net 00:00:13.62]                       //         M1(0, x: 1);
[xUnit.net 00:00:13.62]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M1").WithArguments("M1", "2").WithLocation(15, 9),
[xUnit.net 00:00:13.62]                       // (17,15): error CS1739: The best overload for 'M2' does not have a parameter named 'x'
[xUnit.net 00:00:13.62]                       //         M2(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "x").WithArguments("M2", "x").WithLocation(17, 15),
[xUnit.net 00:00:13.63]                       // (18,15): error CS1739: The best overload for 'M3' does not have a parameter named 'x'
[xUnit.net 00:00:13.63]                       //         M3(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "x").WithArguments("M3", "x").WithLocation(18, 15),
[xUnit.net 00:00:13.63]                       // (20,15): error CS1744: Named argument 'x' specifies a parameter for which a positional argument has already been given
[xUnit.net 00:00:13.63]                       //         M4(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(20, 15),
[xUnit.net 00:00:13.63]                       // (21,15): error CS1744: Named argument 'x' specifies a parameter for which a positional argument has already been given
[xUnit.net 00:00:13.63]                       //         M5(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(21, 15),
[xUnit.net 00:00:13.63]                       // (22,15): error CS1744: Named argument 'x' specifies a parameter for which a positional argument has already been given
[xUnit.net 00:00:13.63]                       //         M6(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(22, 15),
[xUnit.net 00:00:13.63]                       // (24,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M7(int u, int x, int w)'
[xUnit.net 00:00:13.63]                       //         M7(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M7").WithArguments("w", "C.M7(int u, int x, int w)").WithLocation(24, 9),
[xUnit.net 00:00:13.63]                       // (25,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M9(int u, int x, int w)'
[xUnit.net 00:00:13.63]                       //         M9(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M9").WithArguments("w", "C.M9(int u, int x, int w)").WithLocation(25, 9),
[xUnit.net 00:00:13.63]                       // (26,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M8(int u, int x, int w)'
[xUnit.net 00:00:13.63]                       //         M8(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M8").WithArguments("w", "C.M8(int u, int x, int w)").WithLocation(26, 9),
[xUnit.net 00:00:13.63]                       // (27,9): error CS7036: There is no argument given that corresponds to the required parameter 'w' of 'C.M10(int u, int x, int w)'
[xUnit.net 00:00:13.63]                       //         M10(0, x: 1);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M10").WithArguments("w", "C.M10(int u, int x, int w)").WithLocation(27, 9),
[xUnit.net 00:00:13.63]                       // (29,25): error CS1739: The best overload for 'M11' does not have a parameter named 'z'
[xUnit.net 00:00:13.63]                       //         M11(x: 1, y: 2, z: 3);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadNamedArgument, "z").WithArguments("M11", "z").WithLocation(29, 25),
[xUnit.net 00:00:13.63]                       // (31,9): error CS1501: No overload for method 'M12' takes 4 arguments
[xUnit.net 00:00:13.63]                       //         M12(1, 2, 3, 4);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M12").WithArguments("M12", "4").WithLocation(31, 9),
[xUnit.net 00:00:13.63]                       // (32,9): error CS1501: No overload for method 'M13' takes 4 arguments
[xUnit.net 00:00:13.63]                       //         M13(1, 2, 3, 4);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M13").WithArguments("M13", "4").WithLocation(32, 9),
[xUnit.net 00:00:13.63]                       // (34,9): error CS1501: No overload for method 'M14' takes 3 arguments
[xUnit.net 00:00:13.63]                       //         M14(1, 2, 3);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M14").WithArguments("M14", "3").WithLocation(34, 9),
[xUnit.net 00:00:13.63]                       // (36,9): error CS1501: No overload for method 'M15' takes 2 arguments
[xUnit.net 00:00:13.63]                       //         M15(1, z: 0);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M15").WithArguments("M15", "2").WithLocation(36, 9),
[xUnit.net 00:00:13.63]                       // (37,9): error CS1501: No overload for method 'M16' takes 2 arguments
[xUnit.net 00:00:13.63]                       //         M16(1, z: 0);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadArgCount, "M16").WithArguments("M16", "2").WithLocation(37, 9),
[xUnit.net 00:00:13.63]                       // (39,22): error CS1744: Named argument 'y' specifies a parameter for which a positional argument has already been given
[xUnit.net 00:00:13.63]                       //         M17(1, x: 2, y: 3);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "y").WithArguments("y").WithLocation(39, 22),
[xUnit.net 00:00:13.63]                       // (40,22): error CS1744: Named argument 'y' specifies a parameter for which a positional argument has already been given
[xUnit.net 00:00:13.63]                       //         M18(1, x: 2, y: 3);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "y").WithArguments("y").WithLocation(40, 22),
[xUnit.net 00:00:13.63]                       // (41,16): error CS1744: Named argument 'x' specifies a parameter for which a positional argument has already been given
[xUnit.net 00:00:13.63]                       //         M19(1, x: 2, y: 3);
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_NamedArgumentUsedInPositional, "x").WithArguments("x").WithLocation(41, 16)
[xUnit.net 00:00:13.63]       Diff:
[xUnit.net 00:00:13.63]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M7").WithArguments("w", "C.M7(int u, int x, int w)").WithLocation(24, 9)
[xUnit.net 00:00:13.63]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M9").WithArguments("w", "C.M9(int u, int x, int w)").WithLocation(25, 9)
[xUnit.net 00:00:13.63]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M8").WithArguments("w", "C.M8(int u, int x, int w)").WithLocation(26, 9)
[xUnit.net 00:00:13.63]       ++>                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M10").WithArguments("w", "C.M10(int u, int x, int w)").WithLocation(27, 9)
[xUnit.net 00:00:13.63]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M7").WithArguments("w", "C.M7(int, int, int)").WithLocation(24, 9)
[xUnit.net 00:00:13.63]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M9").WithArguments("w", "C.M9(int, int, int)").WithLocation(25, 9)
[xUnit.net 00:00:13.63]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M8").WithArguments("w", "C.M8(int, int, int)").WithLocation(26, 9)
[xUnit.net 00:00:13.63]       -->                 Diagnostic(ErrorCode.ERR_NoCorrespondingArgument, "M10").WithArguments("w", "C.M10(int, int, int)").WithLocation(27, 9)
[xUnit.net 00:00:13.63]       Expected: True
[xUnit.net 00:00:13.63]       Actual:   False
[xUnit.net 00:00:13.63]       Stack Trace:
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8846,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterErrorMessage_01()
[xUnit.net 00:00:13.63]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversionRoReadonlyReturnType [FAIL]
[xUnit.net 00:00:13.63]       
[xUnit.net 00:00:13.63]       Expected:
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadRetType, "F").WithArguments("Program.F(in System.DateTime)", "string").WithLocation(16, 15)
[xUnit.net 00:00:13.63]       Actual:
[xUnit.net 00:00:13.63]                       // (16,15): error CS0407: 'string Program.F(in DateTime x)' has the wrong return type
[xUnit.net 00:00:13.63]                       //         D a = F;
[xUnit.net 00:00:13.63]                       Diagnostic(ErrorCode.ERR_BadRetType, "F").WithArguments("Program.F(in System.DateTime x)", "string").WithLocation(16, 15)
[xUnit.net 00:00:13.63]       Diff:
[xUnit.net 00:00:13.63]       ++>                 Diagnostic(ErrorCode.ERR_BadRetType, "F").WithArguments("Program.F(in System.DateTime x)", "string").WithLocation(16, 15)
[xUnit.net 00:00:13.63]       -->                 Diagnostic(ErrorCode.ERR_BadRetType, "F").WithArguments("Program.F(in System.DateTime)", "string").WithLocation(16, 15)
[xUnit.net 00:00:13.63]       Expected: True
[xUnit.net 00:00:13.63]       Actual:   False
[xUnit.net 00:00:13.63]       Stack Trace:
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.63]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11263,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.MethodGroupConversionRoReadonlyReturnType()
[xUnit.net 00:00:13.82]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestConstraintViolationApplicabilityErrors [FAIL]
[xUnit.net 00:00:13.82]       
[xUnit.net 00:00:13.82]       Expected:
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "ny").WithArguments("C.N<T>", "T", "Y").WithLocation(67, 36),
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test1<string>").WithArguments("C.Test1<U>(U, C.N<U>)", "U", "string").WithLocation(17, 9),
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test2").WithArguments("C.Test2<V>(V, C.N<V>)", "V", "string").WithLocation(21, 9),
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test4").WithArguments("C.Test4<X>(X)", "X", "string").WithLocation(36, 9),
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test5").WithArguments("C.N<T>", "T", "string").WithLocation(47, 9),
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "string").WithArguments("C.L<S>", "S", "string").WithLocation(58, 17),
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test6<L<string>>").WithArguments("C.L<S>", "S", "string").WithLocation(58, 9)
[xUnit.net 00:00:13.82]       Actual:
[xUnit.net 00:00:13.82]                       // (67,36): error CS0453: The type 'Y' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'C.N<T>'
[xUnit.net 00:00:13.82]                       //     static void Test5<Y>(Y y, N<Y> ny) { }
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "ny").WithArguments("C.N<T>", "T", "Y").WithLocation(67, 36),
[xUnit.net 00:00:13.82]                       // (17,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'U' in the generic type or method 'C.Test1<U>(U u, C.N<U> nu)'
[xUnit.net 00:00:13.82]                       //         Test1<string>(s, null);
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test1<string>").WithArguments("C.Test1<U>(U u, C.N<U> nu)", "U", "string").WithLocation(17, 9),
[xUnit.net 00:00:13.82]                       // (21,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'V' in the generic type or method 'C.Test2<V>(V v, C.N<V> nv)'
[xUnit.net 00:00:13.82]                       //         Test2(s, null);
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test2").WithArguments("C.Test2<V>(V v, C.N<V> nv)", "V", "string").WithLocation(21, 9),
[xUnit.net 00:00:13.82]                       // (36,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'X' in the generic type or method 'C.Test4<X>(X x)'
[xUnit.net 00:00:13.82]                       //         Test4(s);
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test4").WithArguments("C.Test4<X>(X x)", "X", "string").WithLocation(36, 9),
[xUnit.net 00:00:13.82]                       // (47,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'C.N<T>'
[xUnit.net 00:00:13.82]                       //         Test5(s, null);
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test5").WithArguments("C.N<T>", "T", "string").WithLocation(47, 9),
[xUnit.net 00:00:13.82]                       // (58,17): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'S' in the generic type or method 'C.L<S>'
[xUnit.net 00:00:13.82]                       //         Test6<L<string>>(null);
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "string").WithArguments("C.L<S>", "S", "string").WithLocation(58, 17),
[xUnit.net 00:00:13.82]                       // (58,9): error CS0453: The type 'string' must be a non-nullable value type in order to use it as parameter 'S' in the generic type or method 'C.L<S>'
[xUnit.net 00:00:13.82]                       //         Test6<L<string>>(null);
[xUnit.net 00:00:13.82]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test6<L<string>>").WithArguments("C.L<S>", "S", "string").WithLocation(58, 9)
[xUnit.net 00:00:13.82]       Diff:
[xUnit.net 00:00:13.82]       ++>                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test1<string>").WithArguments("C.Test1<U>(U u, C.N<U> nu)", "U", "string").WithLocation(17, 9)
[xUnit.net 00:00:13.82]       ++>                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test2").WithArguments("C.Test2<V>(V v, C.N<V> nv)", "V", "string").WithLocation(21, 9)
[xUnit.net 00:00:13.82]       ++>                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test4").WithArguments("C.Test4<X>(X x)", "X", "string").WithLocation(36, 9)
[xUnit.net 00:00:13.82]       -->                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test1<string>").WithArguments("C.Test1<U>(U, C.N<U>)", "U", "string").WithLocation(17, 9)
[xUnit.net 00:00:13.82]       -->                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test2").WithArguments("C.Test2<V>(V, C.N<V>)", "V", "string").WithLocation(21, 9)
[xUnit.net 00:00:13.82]       -->                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "Test4").WithArguments("C.Test4<X>(X)", "X", "string").WithLocation(36, 9)
[xUnit.net 00:00:13.82]       Expected: True
[xUnit.net 00:00:13.82]       Actual:   False
[xUnit.net 00:00:13.82]       Stack Trace:
[xUnit.net 00:00:13.82]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.82]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.82]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.82]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.82]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1470,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestConstraintViolationApplicabilityErrors()
[xUnit.net 00:00:13.87]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ConflictingParameters_Error [FAIL]
[xUnit.net 00:00:13.88]       
[xUnit.net 00:00:13.88]       Expected:
[xUnit.net 00:00:13.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int)", "Program.Method(int, in int)").WithLocation(18, 9),
[xUnit.net 00:00:13.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int)", "Program.Method(int, in int)").WithLocation(19, 9)
[xUnit.net 00:00:13.88]       Actual:
[xUnit.net 00:00:13.88]                       // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y)' and 'Program.Method(int x, in int y)'
[xUnit.net 00:00:13.88]                       //         Method(x, y);
[xUnit.net 00:00:13.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y)", "Program.Method(int x, in int y)").WithLocation(18, 9),
[xUnit.net 00:00:13.88]                       // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y)' and 'Program.Method(int x, in int y)'
[xUnit.net 00:00:13.88]                       //         Method(3, 4);
[xUnit.net 00:00:13.88]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y)", "Program.Method(int x, in int y)").WithLocation(19, 9)
[xUnit.net 00:00:13.88]       Diff:
[xUnit.net 00:00:13.88]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y)", "Program.Method(int x, in int y)").WithLocation(18, 9)
[xUnit.net 00:00:13.88]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y)", "Program.Method(int x, in int y)").WithLocation(19, 9)
[xUnit.net 00:00:13.88]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int)", "Program.Method(int, in int)").WithLocation(18, 9)
[xUnit.net 00:00:13.88]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int)", "Program.Method(int, in int)").WithLocation(19, 9)
[xUnit.net 00:00:13.88]       Expected: True
[xUnit.net 00:00:13.88]       Actual:   False
[xUnit.net 00:00:13.88]       Stack Trace:
[xUnit.net 00:00:13.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.88]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.88]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10035,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ConflictingParameters_Error()
[xUnit.net 00:00:13.93]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ThreeConflictingParameters_Error [FAIL]
[xUnit.net 00:00:13.93]       
[xUnit.net 00:00:13.93]       Expected:
[xUnit.net 00:00:13.93]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int, in int)", "Program.Method(int, in int, int)").WithLocation(18, 9),
[xUnit.net 00:00:13.93]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int, in int)", "Program.Method(int, in int, int)").WithLocation(19, 9)
[xUnit.net 00:00:13.93]       Actual:
[xUnit.net 00:00:13.93]                       // (18,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y, in int z)' and 'Program.Method(int x, in int y, int z)'
[xUnit.net 00:00:13.93]                       //         Method(x, y, z);
[xUnit.net 00:00:13.93]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y, in int z)", "Program.Method(int x, in int y, int z)").WithLocation(18, 9),
[xUnit.net 00:00:13.93]                       // (19,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(in int x, int y, in int z)' and 'Program.Method(int x, in int y, int z)'
[xUnit.net 00:00:13.93]                       //         Method(4, 5, 6);
[xUnit.net 00:00:13.93]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y, in int z)", "Program.Method(int x, in int y, int z)").WithLocation(19, 9)
[xUnit.net 00:00:13.93]       Diff:
[xUnit.net 00:00:13.93]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y, in int z)", "Program.Method(int x, in int y, int z)").WithLocation(18, 9)
[xUnit.net 00:00:13.93]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int x, int y, in int z)", "Program.Method(int x, in int y, int z)").WithLocation(19, 9)
[xUnit.net 00:00:13.93]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int, in int)", "Program.Method(int, in int, int)").WithLocation(18, 9)
[xUnit.net 00:00:13.93]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(in int, int, in int)", "Program.Method(int, in int, int)").WithLocation(19, 9)
[xUnit.net 00:00:13.93]       Expected: True
[xUnit.net 00:00:13.93]       Actual:   False
[xUnit.net 00:00:13.93]       Stack Trace:
[xUnit.net 00:00:13.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:13.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.93]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:13.93]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10103,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingInArgumentsOverloadedOnIn_ThreeConflictingParameters_Error()
[xUnit.net 00:00:14.03]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBaseAccessForAbstractMembers1 [FAIL]
[xUnit.net 00:00:14.03]       
[xUnit.net 00:00:14.03]       Expected:
[xUnit.net 00:00:14.03]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A, B)")
[xUnit.net 00:00:14.03]       Actual:
[xUnit.net 00:00:14.03]                       // (12,26): error CS0205: Cannot call an abstract base member: 'Base<A, B>.Method(A i, B j)'
[xUnit.net 00:00:14.03]                       //         Action<A, B> m = base.Method; // Error - Cannot call abstract base member
[xUnit.net 00:00:14.03]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A i, B j)").WithLocation(12, 26)
[xUnit.net 00:00:14.03]       Diff:
[xUnit.net 00:00:14.03]       ++>                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A i, B j)").WithLocation(12, 26)
[xUnit.net 00:00:14.03]       -->                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("Base<A, B>.Method(A, B)")
[xUnit.net 00:00:14.03]       Expected: True
[xUnit.net 00:00:14.03]       Actual:   False
[xUnit.net 00:00:14.03]       Stack Trace:
[xUnit.net 00:00:14.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.03]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.03]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(2035,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBaseAccessForAbstractMembers1()
[xUnit.net 00:00:14.04]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBaseAccessForAbstractMembers2 [FAIL]
[xUnit.net 00:00:14.04]       
[xUnit.net 00:00:14.04]       Expected:
[xUnit.net 00:00:14.04]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("A.Base2<long>.Method(long)")
[xUnit.net 00:00:14.04]       Actual:
[xUnit.net 00:00:14.04]                       // (17,46): error CS0205: Cannot call an abstract base member: 'Base2<long>.Method(long x)'
[xUnit.net 00:00:14.04]                       //         public override long Method(int x) { base.Method(x); return 1; }
[xUnit.net 00:00:14.04]                       Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("A.Base2<long>.Method(long x)").WithLocation(17, 46)
[xUnit.net 00:00:14.04]       Diff:
[xUnit.net 00:00:14.04]       ++>                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("A.Base2<long>.Method(long x)").WithLocation(17, 46)
[xUnit.net 00:00:14.04]       -->                 Diagnostic(ErrorCode.ERR_AbstractBaseCall, "base.Method").WithArguments("A.Base2<long>.Method(long)")
[xUnit.net 00:00:14.04]       Expected: True
[xUnit.net 00:00:14.04]       Actual:   False
[xUnit.net 00:00:14.04]       Stack Trace:
[xUnit.net 00:00:14.04]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.04]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.04]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.04]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.04]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(2080,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBaseAccessForAbstractMembers2()
[xUnit.net 00:00:14.05]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterErrorMessage_02 [FAIL]
[xUnit.net 00:00:14.05]       
[xUnit.net 00:00:14.05]       Expected:
[xUnit.net 00:00:14.05]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Should").WithArguments("FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)", "Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)").WithLocation(34, 18)
[xUnit.net 00:00:14.05]       Actual:
[xUnit.net 00:00:14.05]                       // (34,18): error CS0121: The call is ambiguous between the following methods or properties: 'FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> actualValue)' and 'Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> actualValue)'
[xUnit.net 00:00:14.05]                       //             dict.Should();
[xUnit.net 00:00:14.05]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Should").WithArguments("FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> actualValue)", "Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> actualValue)").WithLocation(34, 18)
[xUnit.net 00:00:14.05]       Diff:
[xUnit.net 00:00:14.05]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Should").WithArguments("FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue> actualValue)", "Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> actualValue)").WithLocation(34, 18)
[xUnit.net 00:00:14.05]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Should").WithArguments("FluentAssertions.AssertionExtensions.Should<TKey, TValue>(System.Collections.Generic.IDictionary<TKey, TValue>)", "Extensions.TestExtensions.Should<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>)").WithLocation(34, 18)
[xUnit.net 00:00:14.05]       Expected: True
[xUnit.net 00:00:14.05]       Actual:   False
[xUnit.net 00:00:14.05]       Stack Trace:
[xUnit.net 00:00:14.05]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.05]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.05]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.05]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.05]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(8976,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.BetterErrorMessage_02()
[xUnit.net 00:00:14.10]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingArgumentsToInParameters_RefKind_None_WrongType [FAIL]
[xUnit.net 00:00:14.10]       
[xUnit.net 00:00:14.10]       Expected:
[xUnit.net 00:00:14.10]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "System.Exception", "in int").WithLocation(11, 16)
[xUnit.net 00:00:14.10]       Actual:
[xUnit.net 00:00:14.10]                       // (11,16): error CS1503: Argument 1: cannot convert from 'System.Exception' to 'in int p'
[xUnit.net 00:00:14.10]                       //         Method(x);
[xUnit.net 00:00:14.10]                       Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "System.Exception", "in int p").WithLocation(11, 16)
[xUnit.net 00:00:14.10]       Diff:
[xUnit.net 00:00:14.10]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "System.Exception", "in int p").WithLocation(11, 16)
[xUnit.net 00:00:14.10]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "x").WithArguments("1", "System.Exception", "in int").WithLocation(11, 16)
[xUnit.net 00:00:14.10]       Expected: True
[xUnit.net 00:00:14.10]       Actual:   False
[xUnit.net 00:00:14.10]       Stack Trace:
[xUnit.net 00:00:14.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.10]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.10]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9542,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.PassingArgumentsToInParameters_RefKind_None_WrongType()
[xUnit.net 00:00:14.11]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InapplicableExtensionMethods_1 [FAIL]
[xUnit.net 00:00:14.11]       
[xUnit.net 00:00:14.11]       Expected:
[xUnit.net 00:00:14.11]                       Diagnostic(ErrorCode.ERR_BadArgType, "a").WithArguments("3", "A", "B").WithLocation(9, 22)
[xUnit.net 00:00:14.11]       Actual:
[xUnit.net 00:00:14.11]                       // (9,22): error CS1503: Argument 3: cannot convert from 'A' to 'B z'
[xUnit.net 00:00:14.11]                       //         a.F(o => {}, a);
[xUnit.net 00:00:14.11]                       Diagnostic(ErrorCode.ERR_BadArgType, "a").WithArguments("3", "A", "B z").WithLocation(9, 22)
[xUnit.net 00:00:14.11]       Diff:
[xUnit.net 00:00:14.11]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "a").WithArguments("3", "A", "B z").WithLocation(9, 22)
[xUnit.net 00:00:14.11]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "a").WithArguments("3", "A", "B").WithLocation(9, 22)
[xUnit.net 00:00:14.11]       Expected: True
[xUnit.net 00:00:14.11]       Actual:   False
[xUnit.net 00:00:14.11]       Stack Trace:
[xUnit.net 00:00:14.11]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.11]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.11]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.11]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.11]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9341,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.InapplicableExtensionMethods_1()
[xUnit.net 00:00:14.28]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug1079899 [FAIL]
[xUnit.net 00:00:14.28]       
[xUnit.net 00:00:14.28]       Expected:
[xUnit.net 00:00:14.28]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Test").WithArguments("A.B.X.Test(int)", "A.C.X.Test(int)").WithLocation(30, 19)
[xUnit.net 00:00:14.28]       Actual:
[xUnit.net 00:00:14.28]                       // (30,19): error CS0121: The call is ambiguous between the following methods or properties: 'A.B.X.Test(int o)' and 'A.C.X.Test(int o)'
[xUnit.net 00:00:14.28]                       //             if (1.Test() != 1)
[xUnit.net 00:00:14.28]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Test").WithArguments("A.B.X.Test(int o)", "A.C.X.Test(int o)").WithLocation(30, 19)
[xUnit.net 00:00:14.28]       Diff:
[xUnit.net 00:00:14.28]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Test").WithArguments("A.B.X.Test(int o)", "A.C.X.Test(int o)").WithLocation(30, 19)
[xUnit.net 00:00:14.28]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Test").WithArguments("A.B.X.Test(int)", "A.C.X.Test(int)").WithLocation(30, 19)
[xUnit.net 00:00:14.28]       Expected: True
[xUnit.net 00:00:14.28]       Actual:   False
[xUnit.net 00:00:14.28]       Stack Trace:
[xUnit.net 00:00:14.28]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.28]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.28]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.28]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.28]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7838,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug1079899()
[xUnit.net 00:00:14.38]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.AmbiguousInference_02 [FAIL]
[xUnit.net 00:00:14.38]       
[xUnit.net 00:00:14.38]       Expected:
[xUnit.net 00:00:14.38]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T, T)").WithLocation(17, 9),
[xUnit.net 00:00:14.38]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T, T)").WithLocation(18, 9)
[xUnit.net 00:00:14.38]       Actual:
[xUnit.net 00:00:14.38]                       // (17,9): error CS0411: The type arguments for method 'Test.Assert<T>(T a, T b)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:14.38]                       //         Assert(a, b);
[xUnit.net 00:00:14.38]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T a, T b)").WithLocation(17, 9),
[xUnit.net 00:00:14.38]                       // (18,9): error CS0411: The type arguments for method 'Test.Assert<T>(T a, T b)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:14.38]                       //         Assert(b, a);
[xUnit.net 00:00:14.38]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T a, T b)").WithLocation(18, 9)
[xUnit.net 00:00:14.38]       Diff:
[xUnit.net 00:00:14.38]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T a, T b)").WithLocation(17, 9)
[xUnit.net 00:00:14.38]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T a, T b)").WithLocation(18, 9)
[xUnit.net 00:00:14.38]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T, T)").WithLocation(17, 9)
[xUnit.net 00:00:14.38]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Assert").WithArguments("Test.Assert<T>(T, T)").WithLocation(18, 9)
[xUnit.net 00:00:14.38]       Expected: True
[xUnit.net 00:00:14.38]       Actual:   False
[xUnit.net 00:00:14.38]       Stack Trace:
[xUnit.net 00:00:14.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.38]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.38]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9302,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.AmbiguousInference_02()
[xUnit.net 00:00:14.41]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Issue52701_02 [FAIL]
[xUnit.net 00:00:14.41]       
[xUnit.net 00:00:14.41]       Expected:
[xUnit.net 00:00:14.41]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T)", "T", "object").WithLocation(11, 9)
[xUnit.net 00:00:14.41]       Actual:
[xUnit.net 00:00:14.41]                       // (11,9): error CS0453: The type 'object' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'B.F<T>(T t)'
[xUnit.net 00:00:14.41]                       //         F<object>(default);
[xUnit.net 00:00:14.41]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T t)", "T", "object").WithLocation(11, 9)
[xUnit.net 00:00:14.41]       Diff:
[xUnit.net 00:00:14.41]       ++>                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T t)", "T", "object").WithLocation(11, 9)
[xUnit.net 00:00:14.41]       -->                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T)", "T", "object").WithLocation(11, 9)
[xUnit.net 00:00:14.41]       Expected: True
[xUnit.net 00:00:14.41]       Actual:   False
[xUnit.net 00:00:14.41]       Stack Trace:
[xUnit.net 00:00:14.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.41]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.41]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11496,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Issue52701_02()
[xUnit.net 00:00:14.60]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_3 [FAIL]
[xUnit.net 00:00:14.60]       
[xUnit.net 00:00:14.60]       Expected:
[xUnit.net 00:00:14.60]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>)").WithLocation(25, 38)
[xUnit.net 00:00:14.60]       Actual:
[xUnit.net 00:00:14.60]                       // (25,38): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Bar<T, V>.Create(Func<T, bool> filter, params int[] dummy)' and 'Program.Bar<T, V>.Create(Func<T, V> propertyPrev)'
[xUnit.net 00:00:14.60]                       //             var x = Bar<Goo, double>.Create(Goo.IsThing);
[xUnit.net 00:00:14.60]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] dummy)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev)").WithLocation(25, 38)
[xUnit.net 00:00:14.60]       Diff:
[xUnit.net 00:00:14.60]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool> filter, params int[] dummy)", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V> propertyPrev)").WithLocation(25, 38)
[xUnit.net 00:00:14.60]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Create").WithArguments("ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, bool>, params int[])", "ConsoleApplication2.Program.Bar<T, V>.Create(System.Func<T, V>)").WithLocation(25, 38)
[xUnit.net 00:00:14.60]       Expected: True
[xUnit.net 00:00:14.60]       Actual:   False
[xUnit.net 00:00:14.60]       Stack Trace:
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7998,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Bug1080896_3()
[xUnit.net 00:00:14.60]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ParametersImplicitlyConvertibleToEachOther [FAIL]
[xUnit.net 00:00:14.60]       
[xUnit.net 00:00:14.60]       Expected:
[xUnit.net 00:00:14.60]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(CA)", "P.M1(CB)")
[xUnit.net 00:00:14.60]       Actual:
[xUnit.net 00:00:14.60]                       // (36,5): error CS0121: The call is ambiguous between the following methods or properties: 'P.M1(CA a)' and 'P.M1(CB a)'
[xUnit.net 00:00:14.60]                       //     M1(i);
[xUnit.net 00:00:14.60]                       Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(CA a)", "P.M1(CB a)").WithLocation(36, 5)
[xUnit.net 00:00:14.60]       Diff:
[xUnit.net 00:00:14.60]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(CA a)", "P.M1(CB a)").WithLocation(36, 5)
[xUnit.net 00:00:14.60]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "M1").WithArguments("P.M1(CA)", "P.M1(CB)")
[xUnit.net 00:00:14.60]       Expected: True
[xUnit.net 00:00:14.60]       Actual:   False
[xUnit.net 00:00:14.60]       Stack Trace:
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.60]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(438,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.ParametersImplicitlyConvertibleToEachOther()
[xUnit.net 00:00:14.67]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug9851 [FAIL]
[xUnit.net 00:00:14.67]       
[xUnit.net 00:00:14.67]       Expected:
[xUnit.net 00:00:14.67]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "J").WithArguments("C.J<T>(T, T)").WithLocation(8, 9)
[xUnit.net 00:00:14.67]       Actual:
[xUnit.net 00:00:14.67]                       // (8,9): error CS0411: The type arguments for method 'C.J<T>(T t1, T t2)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:14.67]                       //         J(123.0, 456.0m);
[xUnit.net 00:00:14.67]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "J").WithArguments("C.J<T>(T t1, T t2)").WithLocation(8, 9)
[xUnit.net 00:00:14.67]       Diff:
[xUnit.net 00:00:14.67]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "J").WithArguments("C.J<T>(T t1, T t2)").WithLocation(8, 9)
[xUnit.net 00:00:14.67]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "J").WithArguments("C.J<T>(T, T)").WithLocation(8, 9)
[xUnit.net 00:00:14.67]       Expected: True
[xUnit.net 00:00:14.67]       Actual:   False
[xUnit.net 00:00:14.67]       Stack Trace:
[xUnit.net 00:00:14.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.67]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.67]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1249,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug9851()
[xUnit.net 00:00:14.72]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceOnInErrTuples [FAIL]
[xUnit.net 00:00:14.72]       
[xUnit.net 00:00:14.72]       Expected:
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2))").WithLocation(15, 9),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadArgType, "(null, 1)").WithArguments("1", "(<null>, int)", "in (int arg1, int arg2)").WithLocation(16, 16),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "default(RefLike)").WithArguments("Program.RefLike").WithLocation(17, 31),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2))").WithLocation(17, 9),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(19, 17),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(19, 21),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "Method").WithArguments("Program.RefLike").WithLocation(19, 9),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(20, 20),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(20, 24),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(rl, rl)").WithLocation(20, 19),
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(y, x)").WithLocation(22, 19)
[xUnit.net 00:00:14.72]       Actual:
[xUnit.net 00:00:14.72]                       // (15,9): error CS0411: The type arguments for method 'Program.Method<T>(in (T arg1, T arg2) p)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:14.72]                       //         Method((null, null));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2) p)").WithLocation(15, 9),
[xUnit.net 00:00:14.72]                       // (16,16): error CS1503: Argument 1: cannot convert from '(<null>, int)' to 'in (int arg1, int arg2) p'
[xUnit.net 00:00:14.72]                       //         Method((null, 1));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadArgType, "(null, 1)").WithArguments("1", "(<null>, int)", "in (int arg1, int arg2) p").WithLocation(16, 16),
[xUnit.net 00:00:14.72]                       // (17,31): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:14.72]                       //         Method((new object(), default(RefLike)));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "default(RefLike)").WithArguments("Program.RefLike").WithLocation(17, 31),
[xUnit.net 00:00:14.72]                       // (17,9): error CS0411: The type arguments for method 'Program.Method<T>(in (T arg1, T arg2) p)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:14.72]                       //         Method((new object(), default(RefLike)));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2) p)").WithLocation(17, 9),
[xUnit.net 00:00:14.72]                       // (19,17): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:14.72]                       //         Method((rl, rl));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(19, 17),
[xUnit.net 00:00:14.72]                       // (19,21): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:14.72]                       //         Method((rl, rl));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(19, 21),
[xUnit.net 00:00:14.72]                       // (19,9): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:14.72]                       //         Method((rl, rl));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "Method").WithArguments("Program.RefLike").WithLocation(19, 9),
[xUnit.net 00:00:14.72]                       // (20,20): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:14.72]                       //         Method(in (rl, rl));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(20, 20),
[xUnit.net 00:00:14.72]                       // (20,24): error CS0306: The type 'Program.RefLike' may not be used as a type argument
[xUnit.net 00:00:14.72]                       //         Method(in (rl, rl));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_BadTypeArgument, "rl").WithArguments("Program.RefLike").WithLocation(20, 24),
[xUnit.net 00:00:14.72]                       // (20,19): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
[xUnit.net 00:00:14.72]                       //         Method(in (rl, rl));
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(rl, rl)").WithLocation(20, 19),
[xUnit.net 00:00:14.72]                       // (22,19): error CS8156: An expression cannot be used in this context because it may not be passed or returned by reference
[xUnit.net 00:00:14.72]                       //         Method(in (y, x));  
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_RefReturnLvalueExpected, "(y, x)").WithLocation(22, 19)
[xUnit.net 00:00:14.72]       Diff:
[xUnit.net 00:00:14.72]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2) p)").WithLocation(15, 9)
[xUnit.net 00:00:14.72]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, "(null, 1)").WithArguments("1", "(<null>, int)", "in (int arg1, int arg2) p").WithLocation(16, 16)
[xUnit.net 00:00:14.72]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2) p)").WithLocation(17, 9)
[xUnit.net 00:00:14.72]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2))").WithLocation(15, 9)
[xUnit.net 00:00:14.72]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, "(null, 1)").WithArguments("1", "(<null>, int)", "in (int arg1, int arg2)").WithLocation(16, 16)
[xUnit.net 00:00:14.72]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in (T arg1, T arg2))").WithLocation(17, 9)
[xUnit.net 00:00:14.72]       Expected: True
[xUnit.net 00:00:14.72]       Actual:   False
[xUnit.net 00:00:14.72]       Stack Trace:
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(10968,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceOnInErrTuples()
[xUnit.net 00:00:14.72]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Issue52701_01 [FAIL]
[xUnit.net 00:00:14.72]       
[xUnit.net 00:00:14.72]       Expected:
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T)", "T", "object").WithLocation(11, 35)
[xUnit.net 00:00:14.72]       Actual:
[xUnit.net 00:00:14.72]                       // (11,35): error CS0453: The type 'object' must be a non-nullable value type in order to use it as parameter 'T' in the generic type or method 'B.F<T>(T t)'
[xUnit.net 00:00:14.72]                       //         System.Action<object> d = F<object>;
[xUnit.net 00:00:14.72]                       Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T t)", "T", "object").WithLocation(11, 35)
[xUnit.net 00:00:14.72]       Diff:
[xUnit.net 00:00:14.72]       ++>                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T t)", "T", "object").WithLocation(11, 35)
[xUnit.net 00:00:14.72]       -->                 Diagnostic(ErrorCode.ERR_ValConstraintNotSatisfied, "F<object>").WithArguments("B.F<T>(T)", "T", "object").WithLocation(11, 35)
[xUnit.net 00:00:14.72]       Expected: True
[xUnit.net 00:00:14.72]       Actual:   False
[xUnit.net 00:00:14.72]       Stack Trace:
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.72]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11468,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.Issue52701_01()
[xUnit.net 00:00:14.74]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness03 [FAIL]
[xUnit.net 00:00:14.74]       
[xUnit.net 00:00:14.74]       Expected:
[xUnit.net 00:00:14.74]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1<string>)", "Program.Method(Del2<string>)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       Actual:
[xUnit.net 00:00:14.74]                       // (11,9): error CS0121: The call is ambiguous between the following methods or properties: 'Program.Method(Del1<string> del1)' and 'Program.Method(Del2<string> del2)'
[xUnit.net 00:00:14.74]                       //         Method(() => null);
[xUnit.net 00:00:14.74]                       Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1<string> del1)", "Program.Method(Del2<string> del2)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       Diff:
[xUnit.net 00:00:14.74]       ++>                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1<string> del1)", "Program.Method(Del2<string> del2)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       -->                 Diagnostic(ErrorCode.ERR_AmbigCall, "Method").WithArguments("Program.Method(Del1<string>)", "Program.Method(Del2<string>)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       Expected: True
[xUnit.net 00:00:14.74]       Actual:   False
[xUnit.net 00:00:14.74]       Stack Trace:
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(9154,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.RecursiveBetterBetterness03()
[xUnit.net 00:00:14.74]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceErrorRecovery [FAIL]
[xUnit.net 00:00:14.74]       
[xUnit.net 00:00:14.74]       Expected:
[xUnit.net 00:00:14.74]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in T)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       Actual:
[xUnit.net 00:00:14.74]                       // (11,9): error CS0411: The type arguments for method 'Program.Method<T>(in T p)' cannot be inferred from the usage. Try specifying the type arguments explicitly.
[xUnit.net 00:00:14.74]                       //         Method((null, 1));
[xUnit.net 00:00:14.74]                       Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in T p)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       Diff:
[xUnit.net 00:00:14.74]       ++>                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in T p)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       -->                 Diagnostic(ErrorCode.ERR_CantInferMethTypeArgs, "Method").WithArguments("Program.Method<T>(in T)").WithLocation(11, 9)
[xUnit.net 00:00:14.74]       Expected: True
[xUnit.net 00:00:14.74]       Actual:   False
[xUnit.net 00:00:14.74]       Stack Trace:
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.74]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(11022,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.GenericInferenceErrorRecovery()
[xUnit.net 00:00:14.85]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.IndexMemberAccessErr005 [FAIL]
[xUnit.net 00:00:14.85]       
[xUnit.net 00:00:14.85]       Expected:
[xUnit.net 00:00:14.85]                       Diagnostic(ErrorCode.ERR_BadArgType, @"""aaa""").WithArguments("1", "string", "int").WithLocation(8, 46)
[xUnit.net 00:00:14.85]       Actual:
[xUnit.net 00:00:14.85]                       // (8,46): error CS1503: Argument 1: cannot convert from 'string' to 'int key'
[xUnit.net 00:00:14.85]                       //         var d = new Dictionary<int, int>() {["aaa"] = 3};
[xUnit.net 00:00:14.85]                       Diagnostic(ErrorCode.ERR_BadArgType, @"""aaa""").WithArguments("1", "string", "int key").WithLocation(8, 46)
[xUnit.net 00:00:14.85]       Diff:
[xUnit.net 00:00:14.85]       ++>                 Diagnostic(ErrorCode.ERR_BadArgType, @"""aaa""").WithArguments("1", "string", "int key").WithLocation(8, 46)
[xUnit.net 00:00:14.85]       -->                 Diagnostic(ErrorCode.ERR_BadArgType, @"""aaa""").WithArguments("1", "string", "int").WithLocation(8, 46)
[xUnit.net 00:00:14.85]       Expected: True
[xUnit.net 00:00:14.85]       Actual:   False
[xUnit.net 00:00:14.85]       Stack Trace:
[xUnit.net 00:00:14.85]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(98,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected, Boolean errorCodeOnly)
[xUnit.net 00:00:14.85]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(48,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(IEnumerable`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.85]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(63,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.Verify(ImmutableArray`1 actual, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.85]         C:\roslyn\src\Compilers\Test\Core\Diagnostics\DiagnosticExtensions.cs(108,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)
[xUnit.net 00:00:14.85]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(7557,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.IndexMemberAccessErr005()
[xUnit.net 00:00:14.86]     Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug6156 [FAIL]
[xUnit.net 00:00:14.86]       Actual and expected values differ. Expected shown in baseline of diff:
[xUnit.net 00:00:14.86]       -Ref1.M(ref int)
[xUnit.net 00:00:14.86]       -Ref1.M(ref int)
[xUnit.net 00:00:14.86]       -Out1.M(out int)
[xUnit.net 00:00:14.86]       -Ref2.M(ref int)
[xUnit.net 00:00:14.86]       -Out1.M(out int)
[xUnit.net 00:00:14.86]       -Ref2.M(ref int)
[xUnit.net 00:00:14.86]       -Out2.M(out int)
[xUnit.net 00:00:14.86]       +Ref1.M(ref int x)
[xUnit.net 00:00:14.86]       +Ref1.M(ref int x)
[xUnit.net 00:00:14.86]       +Out1.M(out int x)
[xUnit.net 00:00:14.86]       +Ref2.M(ref int x)
[xUnit.net 00:00:14.86]       +Out1.M(out int x)
[xUnit.net 00:00:14.86]       +Ref2.M(ref int x)
[xUnit.net 00:00:14.86]       +Out2.M(out int x)
[xUnit.net 00:00:14.86]       
[xUnit.net 00:00:14.86]       Expected: True
[xUnit.net 00:00:14.86]       Actual:   False
[xUnit.net 00:00:14.86]       Stack Trace:
[xUnit.net 00:00:14.86]         C:\roslyn\src\Compilers\Test\Core\Assert\AssertEx.cs(297,0): at Roslyn.Test.Utilities.AssertEx.EqualOrDiff(String expected, String actual, String message)
[xUnit.net 00:00:14.86]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTestBase.cs(51,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTestBase.TestOverloadResolutionWithDiff(String source, MetadataReference[] additionalRefs)
[xUnit.net 00:00:14.86]         C:\roslyn\src\Compilers\CSharp\Test\Semantic\Semantics\OverloadResolutionTests.cs(1558,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.OverloadResolutionTests.TestBug6156()
[xUnit.net 00:00:14.87]   Finished:    Microsoft.CodeAnalysis.CSharp.Semantic.UnitTests
========== Test run finished: 215 Tests (135 Passed, 79 Failed, 1 Skipped) run in 14.9 sec ==========
